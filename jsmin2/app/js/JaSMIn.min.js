var $jscomp = $jscomp || {};
$jscomp.scope = {};
$jscomp.arrayIteratorImpl = function (n) {
    var q = 0;
    return function () {
        return q < n.length ? {done: !1, value: n[q++]} : {done: !0}
    }
};
$jscomp.arrayIterator = function (n) {
    return {next: $jscomp.arrayIteratorImpl(n)}
};
$jscomp.makeIterator = function (n) {
    var q = "undefined" != typeof Symbol && Symbol.iterator && n[Symbol.iterator];
    return q ? q.call(n) : $jscomp.arrayIterator(n)
};
$jscomp.arrayFromIterator = function (n) {
    for (var q, t = []; !(q = n.next()).done;) t.push(q.value);
    return t
};
$jscomp.arrayFromIterable = function (n) {
    return n instanceof Array ? n : $jscomp.arrayFromIterator($jscomp.makeIterator(n))
};
$jscomp.ASSUME_ES5 = !1;
$jscomp.ASSUME_NO_NATIVE_MAP = !1;
$jscomp.ASSUME_NO_NATIVE_SET = !1;
$jscomp.SIMPLE_FROUND_POLYFILL = !1;
$jscomp.ISOLATE_POLYFILLS = !1;
$jscomp.FORCE_POLYFILL_PROMISE = !1;
$jscomp.FORCE_POLYFILL_PROMISE_WHEN_NO_UNHANDLED_REJECTION = !1;
$jscomp.objectCreate = $jscomp.ASSUME_ES5 || "function" == typeof Object.create ? Object.create : function (n) {
    var q = function () {
    };
    q.prototype = n;
    return new q
};
$jscomp.defineProperty = $jscomp.ASSUME_ES5 || "function" == typeof Object.defineProperties ? Object.defineProperty : function (n, q, t) {
    if (n == Array.prototype || n == Object.prototype) return n;
    n[q] = t.value;
    return n
};
$jscomp.getGlobal = function (n) {
    n = ["object" == typeof globalThis && globalThis, n, "object" == typeof window && window, "object" == typeof self && self, "object" == typeof global && global];
    for (var q = 0; q < n.length; ++q) {
        var t = n[q];
        if (t && t.Math == Math) return t
    }
    throw Error("Cannot find global object");
};
$jscomp.global = $jscomp.getGlobal(this);
$jscomp.IS_SYMBOL_NATIVE = "function" === typeof Symbol && "symbol" === typeof Symbol("x");
$jscomp.TRUST_ES6_POLYFILLS = !$jscomp.ISOLATE_POLYFILLS || $jscomp.IS_SYMBOL_NATIVE;
$jscomp.polyfills = {};
$jscomp.propertyToPolyfillSymbol = {};
$jscomp.POLYFILL_PREFIX = "$jscp$";
var $jscomp$lookupPolyfilledValue = function (n, q) {
    var t = $jscomp.propertyToPolyfillSymbol[q];
    if (null == t) return n[q];
    t = n[t];
    return void 0 !== t ? t : n[q]
};
$jscomp.polyfill = function (n, q, t, x) {
    q && ($jscomp.ISOLATE_POLYFILLS ? $jscomp.polyfillIsolated(n, q, t, x) : $jscomp.polyfillUnisolated(n, q, t, x))
};
$jscomp.polyfillUnisolated = function (n, q, t, x) {
    t = $jscomp.global;
    n = n.split(".");
    for (x = 0; x < n.length - 1; x++) {
        var A = n[x];
        if (!(A in t)) return;
        t = t[A]
    }
    n = n[n.length - 1];
    x = t[n];
    q = q(x);
    q != x && null != q && $jscomp.defineProperty(t, n, {configurable: !0, writable: !0, value: q})
};
$jscomp.polyfillIsolated = function (n, q, t, x) {
    var A = n.split(".");
    n = 1 === A.length;
    x = A[0];
    x = !n && x in $jscomp.polyfills ? $jscomp.polyfills : $jscomp.global;
    for (var P = 0; P < A.length - 1; P++) {
        var ka = A[P];
        if (!(ka in x)) return;
        x = x[ka]
    }
    A = A[A.length - 1];
    t = $jscomp.IS_SYMBOL_NATIVE && "es6" === t ? x[A] : null;
    q = q(t);
    null != q && (n ? $jscomp.defineProperty($jscomp.polyfills, A, {
        configurable: !0,
        writable: !0,
        value: q
    }) : q !== t && (void 0 === $jscomp.propertyToPolyfillSymbol[A] && (t = 1E9 * Math.random() >>> 0, $jscomp.propertyToPolyfillSymbol[A] = $jscomp.IS_SYMBOL_NATIVE ?
        $jscomp.global.Symbol(A) : $jscomp.POLYFILL_PREFIX + t + "$" + A), $jscomp.defineProperty(x, $jscomp.propertyToPolyfillSymbol[A], {
        configurable: !0,
        writable: !0,
        value: q
    })))
};
$jscomp.getConstructImplementation = function () {
    function n() {
        function t() {
        }

        new t;
        Reflect.construct(t, [], function () {
        });
        return new t instanceof t
    }

    if ($jscomp.TRUST_ES6_POLYFILLS && "undefined" != typeof Reflect && Reflect.construct) {
        if (n()) return Reflect.construct;
        var q = Reflect.construct;
        return function (t, x, A) {
            t = q(t, x);
            A && Reflect.setPrototypeOf(t, A.prototype);
            return t
        }
    }
    return function (t, x, A) {
        void 0 === A && (A = t);
        A = $jscomp.objectCreate(A.prototype || Object.prototype);
        return Function.prototype.apply.call(t, A, x) ||
            A
    }
};
$jscomp.construct = {valueOf: $jscomp.getConstructImplementation}.valueOf();
$jscomp.underscoreProtoCanBeSet = function () {
    var n = {a: !0}, q = {};
    try {
        return q.__proto__ = n, q.a
    } catch (t) {
    }
    return !1
};
$jscomp.setPrototypeOf = $jscomp.TRUST_ES6_POLYFILLS && "function" == typeof Object.setPrototypeOf ? Object.setPrototypeOf : $jscomp.underscoreProtoCanBeSet() ? function (n, q) {
    n.__proto__ = q;
    if (n.__proto__ !== q) throw new TypeError(n + " is not extensible");
    return n
} : null;
$jscomp.inherits = function (n, q) {
    n.prototype = $jscomp.objectCreate(q.prototype);
    n.prototype.constructor = n;
    if ($jscomp.setPrototypeOf) {
        var t = $jscomp.setPrototypeOf;
        t(n, q)
    } else for (t in q) if ("prototype" != t) if (Object.defineProperties) {
        var x = Object.getOwnPropertyDescriptor(q, t);
        x && Object.defineProperty(n, t, x)
    } else n[t] = q[t];
    n.superClass_ = q.prototype
};
$jscomp.polyfill("Reflect", function (n) {
    return n ? n : {}
}, "es6", "es3");
$jscomp.polyfill("Reflect.construct", function (n) {
    return $jscomp.construct
}, "es6", "es3");
$jscomp.polyfill("Reflect.setPrototypeOf", function (n) {
    if (n) return n;
    if ($jscomp.setPrototypeOf) {
        var q = $jscomp.setPrototypeOf;
        return function (t, x) {
            try {
                return q(t, x), !0
            } catch (A) {
                return !1
            }
        }
    }
    return null
}, "es6", "es5");
$jscomp.initSymbol = function () {
};
$jscomp.polyfill("Symbol", function (n) {
    if (n) return n;
    var q = function (P, ka) {
        this.$jscomp$symbol$id_ = P;
        $jscomp.defineProperty(this, "description", {configurable: !0, writable: !0, value: ka})
    };
    q.prototype.toString = function () {
        return this.$jscomp$symbol$id_
    };
    var t = "jscomp_symbol_" + (1E9 * Math.random() >>> 0) + "_", x = 0, A = function (P) {
        if (this instanceof A) throw new TypeError("Symbol is not a constructor");
        return new q(t + (P || "") + "_" + x++, P)
    };
    return A
}, "es6", "es3");
$jscomp.polyfill("Symbol.iterator", function (n) {
        if (n) return n;
        n = Symbol("Symbol.iterator");
        for (var q = "Array Int8Array Uint8Array Uint8ClampedArray Int16Array Uint16Array Int32Array Uint32Array Float32Array Float64Array".split(" "), t = 0; t < q.length; t++) {
            var x = $jscomp.global[q[t]];
            "function" === typeof x && "function" != typeof x.prototype[n] && $jscomp.defineProperty(x.prototype, n, {
                configurable: !0,
                writable: !0,
                value: function () {
                    return $jscomp.iteratorPrototype($jscomp.arrayIteratorImpl(this))
                }
            })
        }
        return n
    }, "es6",
    "es3");
$jscomp.iteratorPrototype = function (n) {
    n = {next: n};
    n[Symbol.iterator] = function () {
        return this
    };
    return n
};
$jscomp.iteratorFromArray = function (n, q) {
    n instanceof String && (n += "");
    var t = 0, x = !1, A = {
        next: function () {
            if (!x && t < n.length) {
                var P = t++;
                return {value: q(P, n[P]), done: !1}
            }
            x = !0;
            return {done: !0, value: void 0}
        }
    };
    A[Symbol.iterator] = function () {
        return A
    };
    return A
};
$jscomp.polyfill("Array.prototype.values", function (n) {
    return n ? n : function () {
        return $jscomp.iteratorFromArray(this, function (q, t) {
            return t
        })
    }
}, "es8", "es3");
$jscomp.polyfill("Array.prototype.entries", function (n) {
    return n ? n : function () {
        return $jscomp.iteratorFromArray(this, function (q, t) {
            return [q, t]
        })
    }
}, "es6", "es3");
$jscomp.checkStringArgs = function (n, q, t) {
    if (null == n) throw new TypeError("The 'this' value for String.prototype." + t + " must not be null or undefined");
    if (q instanceof RegExp) throw new TypeError("First argument to String.prototype." + t + " must not be a regular expression");
    return n + ""
};
$jscomp.polyfill("String.prototype.repeat", function (n) {
    return n ? n : function (q) {
        var t = $jscomp.checkStringArgs(this, null, "repeat");
        if (0 > q || 1342177279 < q) throw new RangeError("Invalid count value");
        q |= 0;
        for (var x = ""; q;) if (q & 1 && (x += t), q >>>= 1) t += t;
        return x
    }
}, "es6", "es3");
$jscomp.polyfill("String.prototype.startsWith", function (n) {
    return n ? n : function (q, t) {
        var x = $jscomp.checkStringArgs(this, q, "startsWith");
        q += "";
        var A = x.length, P = q.length;
        t = Math.max(0, Math.min(t | 0, x.length));
        for (var ka = 0; ka < P && t < A;) if (x[t++] != q[ka++]) return !1;
        return ka >= P
    }
}, "es6", "es3");
(function (n, q) {
    "object" === typeof exports && "undefined" !== typeof module ? q(exports) : "function" === typeof define && define.amd ? define(["exports"], q) : (n = "undefined" !== typeof globalThis ? globalThis : n || self, q(n.JaSMIn = {}))
})(this, function (n) {
    function q(a, b, c) {
        var d = a.line;
        null === d && (d = a.next());
        var e = 0, g = t, m = A;
        b.type === T.THREED ? 0 === b.version ? (g = x, m = P) : (g = ka, m = xb) : 0 < b.version && (m = xb);
        for (; null !== d && e < c.maxStates;) {
            try {
                switch (d.charAt(0)) {
                    case "E":
                        if ("P" === d.charAt(1)) {
                            var f = b, k = c;
                            try {
                                var l = JSON.parse(d.slice(3));
                                f.environmentParams.clear();
                                f.environmentParams.paramObj = l
                            } catch (W) {
                                console.log("Exception while parsing environment parameters:"), console.log(W)
                            }
                            f.updateFrequency();
                            null !== k.partialState && (k.partialState.timeStep = 1 / f.frequency)
                        }
                        break;
                    case "P":
                        if ("P" === d.charAt(1)) {
                            f = b;
                            try {
                                var r = JSON.parse(d.slice(3));
                                f.playerParams.clear();
                                f.playerParams.paramObj = r
                            } catch (W) {
                                console.log("Exception while parsing player parameters:"), console.log(W)
                            }
                        } else if ("T" === d.charAt(1)) {
                            f = b;
                            var p = d.indexOf(" ", 4);
                            if (3 < p && 10 > p) {
                                var y =
                                    parseInt(d.slice(3, p), 10);
                                try {
                                    f.playerTypes[y] = new L(JSON.parse(d.slice(p + 1)))
                                } catch (W) {
                                    console.log("Exception while parsing player type parameters:"), console.log(W)
                                }
                            }
                        }
                        break;
                    case "T":
                        f = b;
                        var w = d.split(" ");
                        if (!(3 > w.length)) {
                            var K = f.leftTeam.setName(Z.copyString(w[1]));
                            K = f.rightTeam.setName(Z.copyString(w[2])) || K;
                            if (4 < w.length) try {
                                K = f.leftTeam.setColor(new THREE.Color(w[3])) || K, K = f.rightTeam.setColor(new THREE.Color(w[4])) || K
                            } catch (W) {
                                console.log(W)
                            }
                            if (K) f.onTeamsUpdated()
                        }
                        break;
                    case "S":
                        f = b;
                        k = c;
                        var M =
                            d.split(" ");
                        if (5 > M.length) var ma = !1; else {
                            d = !1;
                            null !== k.partialState ? d = k.partialState.appendTo(f.states) : k.partialState = new Ea(0, 1 / f.frequency, 0);
                            var Fa = parseFloat(M[1]);
                            0 === f.version && (Fa /= 10);
                            k.partialState.setGameTime(Fa);
                            k.partialState.setPlaymode(M[2]);
                            8 < M.length ? k.partialState.setScore(parseInt(M[3], 10), parseInt(M[4], 10), parseInt(M[5], 10), parseInt(M[6], 10), parseInt(M[7], 10), parseInt(M[8], 10)) : k.partialState.setScore(parseInt(M[3], 10), parseInt(M[4], 10));
                            ma = d
                        }
                        ma && e++;
                        break;
                    case "b":
                        g(d, c.partialState);
                        break;
                    case "l":
                    case "L":
                        c.hasPartialState() && m(d, b, c, !0);
                        break;
                    case "r":
                    case "R":
                        c.hasPartialState() && m(d, b, c, !1)
                }
            } catch (W) {
            }
            d = a.next()
        }
        if (0 < e) b.onStatesUpdated();
        null !== d ? setTimeout(q, 1, a, b, c) : a.extent === N.COMPLETE && (a.dispose(), c.hasPartialState() && c.partialState.appendTo(b.states), b.finalize())
    }

    function t(a, b) {
        a = a.split(" ");
        null === b || 3 > a.length || (b.ballState = new Q({x: parseFloat(a[1]), y: .2, z: parseFloat(a[2]), qx: 0, qy: 0, qz: 0, qw: 1}))
    }

    function x(a, b) {
        a = a.split(" ");
        null === b || 8 > a.length || (b.ballState =
            new Q({
                x: parseInt(a[1], 10) / 1E3,
                y: parseInt(a[3], 10) / 1E3,
                z: -parseInt(a[2], 10) / 1E3,
                qx: parseInt(a[5], 10) / 1E3,
                qy: parseInt(a[7], 10) / 1E3,
                qz: -parseInt(a[6], 10) / 1E3,
                qw: parseInt(a[4], 10) / 1E3
            }))
    }

    function A(a, b, c, d) {
        b = a.split(" ");
        if (!(5 > b.length)) {
            a = parseInt(b[1], 10);
            var e = yb.STAND;
            if ("L" === b[0] || "R" === b[0]) e |= yb.GOALIE;
            var g = new THREE.Vector3(parseFloat(b[2]), 0, parseFloat(b[3])), m = parseFloat(b[4]), f = new THREE.Quaternion;
            f.setFromAxisAngle(v.Vector3_UnitY(), U.toRad(-m));
            var k = [], l = [];
            6 < b.length && (m = parseFloat(b[5]) -
                m, 180 < m ? m -= 360 : -180 > m && (m += 360), k[0] = U.toRad(-m), l[G.STAMINA] = parseFloat(b[6].slice(1)));
            b = new ha({modelIdx: 0, flags: e, x: g.x, y: g.y, z: g.z, qx: f.x, qy: f.y, qz: f.z, qw: f.w, jointAngles: k, data: l});
            d ? c.partialState.leftAgentStates[a] = b : c.partialState.rightAgentStates[a] = b
        }
    }

    function P(a, b, c, d) {
        a = a.split(" ");
        if (!(9 > a.length)) {
            var e = parseInt(a[1], 10), g = 2, m = 0;
            if (d) {
                d = b.leftTeam;
                var f = c.leftIndexList;
                c = c.partialState.leftAgentStates
            } else d = b.rightTeam, f = c.rightIndexList, c = c.partialState.rightAgentStates;
            if ("L" ===
                a[0] || "R" === a[0]) {
                if (10 > a.length) return;
                g++;
                var k = 0;
                try {
                    k = parseInt(a[2].slice(-1), 10)
                } catch (y) {
                }
                d.addAgent(e, b.playerTypes[k]);
                f[e] = d.getRecentTypeIdx(e)
            }
            void 0 !== f[e] && (m = f[e]);
            b = new THREE.Vector3(parseInt(a[g], 10) / 1E3, parseInt(a[g + 2], 10) / 1E3, -parseInt(a[g + 1], 10) / 1E3);
            d = new THREE.Quaternion(parseInt(a[g + 4], 10) / 1E3, parseInt(a[g + 6], 10) / 1E3, -parseInt(a[g + 5], 10) / 1E3, parseInt(a[g + 3], 10) / 1E3);
            f = [];
            g += 7;
            var l = 22 < a.length - g ? 7 : 6, r = [], p = [];
            for (k = 0; 2 > k && g < a.length; k++, g++) f.push(U.toRad(parseFloat(a[g]) / 100));
            for (k = 0; 4 > k && g < a.length; k++, g++) r.push(U.toRad(parseFloat(a[g]) / 100));
            for (k = 0; k < l && g < a.length; k++, g++) p.push(U.toRad(parseFloat(a[g]) / 100));
            for (k = 0; 4 > k && g < a.length; k++, g++) f.push(U.toRad(parseFloat(a[g]) / 100));
            for (k = 0; k < r.length; k++) f.push(r[k]);
            for (k = 0; k < l && g < a.length; k++, g++) f.push(U.toRad(parseFloat(a[g]) / 100));
            for (k = 0; k < p.length; k++) f.push(p[k]);
            c[e] = new ha({modelIdx: m, flags: 0, x: b.x, y: b.y, z: b.z, qx: d.x, qy: d.y, qz: d.z, qw: d.w, jointAngles: f, data: []})
        }
    }

    function ka(a, b) {
        a = a.split(" ");
        null === b || 8 > a.length ||
        (b.ballState = new Q({
            x: parseFloat(a[1]),
            y: parseFloat(a[3]),
            z: -parseFloat(a[2]),
            qx: parseFloat(a[5]),
            qy: parseFloat(a[7]),
            qz: -parseFloat(a[6]),
            qw: parseFloat(a[4])
        }))
    }

    function xb(a, b, c, d) {
        a = na.parse("(" + a + ")");
        if (!(6 > a.values.length)) {
            var e = parseInt(a.values[1], 10), g = 2, m = 0;
            if (d) {
                d = b.leftTeam;
                var f = c.leftIndexList;
                c = c.partialState.leftAgentStates
            } else d = b.rightTeam, f = c.rightIndexList, c = c.partialState.rightAgentStates;
            if ("L" === a.values[0] || "R" === a.values[0]) d.addAgent(e, b.playerTypes[parseInt(a.values[g],
                10)]), f[e] = d.getRecentTypeIdx(e), g++;
            void 0 !== f[e] && (m = f[e]);
            d = parseInt(a.values[g], 16);
            g++;
            f = new THREE.Vector3;
            var k = new THREE.Quaternion, l = [], r = [];
            (b = b.type === T.TWOD) ? (f.set(parseFloat(a.values[g]), 0, parseFloat(a.values[g + 1])), k.setFromAxisAngle(v.Vector3_UnitY(), U.toRad(-1 * parseFloat(a.values[g + 2])))) : (f.set(parseFloat(a.values[g]), parseFloat(a.values[g + 2]), -parseFloat(a.values[g + 1])), k.set(parseFloat(a.values[g + 4]), parseFloat(a.values[g + 6]), -parseFloat(a.values[g + 5]), parseFloat(a.values[g + 3])));
            for (g = 0; g < a.children.length; g++) switch (a.children[g].values[0]) {
                case "j":
                    for (var p = a.children[g], y = l, w = !0 === b ? Hb : Ib, K = 1; K < p.values.length; K++) y.push(parseFloat(p.values[K]) * w);
                    break;
                case "s":
                    r[G.STAMINA] = parseFloat(a.children[g].values[1])
            }
            c[e] = new ha({modelIdx: m, flags: d, x: f.x, y: f.y, z: f.z, qx: k.x, qy: k.y, qz: k.z, qw: k.w, jointAngles: l, data: r})
        }
    }

    var aa = function () {
        this.__event_observers = null
    };
    aa.prototype.addEventListener = function (a, b) {
        null === this.__event_observers && (this.__event_observers = {});
        var c = this.__event_observers;
        void 0 === c[a] && (c[a] = []);
        return -1 === c[a].indexOf(b) ? (c[a].push(b), !0) : !1
    };
    aa.prototype.removeEventListener = function (a, b) {
        var c = this.__event_observers;
        if (null === c) return !1;
        a = c[a];
        return void 0 !== a && (b = a.indexOf(b), -1 !== b) ? (a.splice(b, 1), !0) : !1
    };
    aa.prototype.dispatchEvent = function (a) {
        var b = this.__event_observers;
        if (null !== b) {
            var c = b[a.type];
            if (void 0 !== c) {
                b = [];
                for (var d = 0; d < c.length; d++) b[d] = c[d];
                for (c = 0; c < b.length; c++) b[c].call(this, a)
            }
        }
    };
    var zb = function (a, b, c, d, e, g, m) {
        this.time = a;
        this.goalsLeft = b;
        this.penaltyScoreLeft = void 0 !== d ? d : 0;
        this.penaltyMissLeft = void 0 !== e ? e : 0;
        this.goalsRight = c;
        this.penaltyScoreRight = void 0 !== g ? g : 0;
        this.penaltyMissRight = void 0 !== m ? m : 0
    }, lb = function (a, b) {
        this.time = a;
        this.playMode = b
    };
    lb.prototype.getPlayModeString = function () {
        return this.playMode
    };
    var L = function (a) {
        this.paramObj = void 0 !== a ? a : {}
    };
    L.prototype.clear = function () {
        this.paramObj = {}
    };
    L.prototype.getNumber = function (a) {
        a = this.paramObj[a];
        return "number" === typeof a ? a : null
    };
    L.prototype.getBoolean = function (a) {
        a = this.paramObj[a];
        return void 0 !== a ? a ? !0 : !1 : null
    };
    L.prototype.getString = function (a) {
        a = this.paramObj[a];
        return "string" === typeof a ? a : null
    };
    L.prototype.getObject = function (a) {
        a = this.paramObj[a];
        return "object" === typeof a ? new L(a) : null
    };
    var T = {TWOD: 1, THREED: 2}, ab = function () {
    };
    ab.getSideLetter = function (a, b) {
        return b ? -1 === a ? "L" : 1 === a ? "R" : "N" : -1 === a ? "l" : 1 === a ? "r" : "n"
    };
    var bb = function (a, b, c) {
        this.playerNo = a;
        this.side = b;
        this.playerTypes = [];
        this.playerTypes.push(c);
        this.recentTypeIdx = 0
    };
    bb.prototype.isGoalie = function () {
        return 1 ==
            this.playerNo
    };
    bb.prototype.addPlayerType = function (a) {
        var b = this.playerTypes.indexOf(a);
        if (-1 === b) return this.playerTypes.push(a), this.recentTypeIdx = this.playerTypes.length - 1, !0;
        this.recentTypeIdx = b;
        return !1
    };
    bb.prototype.getSideLetter = function (a) {
        return ab.getSideLetter(this.side, a)
    };
    var oa = function (a, b, c) {
        this.name = a;
        this.agents = [];
        this.color = b;
        this.side = c
    };
    oa.prototype.setName = function (a) {
        a = a.split("_").join(" ");
        return this.name !== a ? (this.name = a, !0) : !1
    };
    oa.prototype.setColor = function (a) {
        return this.color.equals(a) ?
            !1 : (this.color = a, !0)
    };
    oa.prototype.addAgent = function (a, b) {
        for (var c = this.agents.length; c--;) if (this.agents[c].playerNo === a) return this.agents[c].addPlayerType(b);
        this.agents.push(new bb(a, this.side, b));
        return !0
    };
    oa.prototype.getRecentTypeIdx = function (a) {
        for (var b = this.agents.length; b--;) if (this.agents[b].playerNo === a) return this.agents[b].recentTypeIdx;
        return 0
    };
    oa.prototype.getSideLetter = function (a) {
        return ab.getSideLetter(this.side, a)
    };
    var Q = function (a) {
        this.state = [];
        this.state = void 0 === a ? Q.encodeObjectState(0,
            0, 0, 0, 0, 0, 1) : a instanceof Float32Array || a instanceof Array ? a : Q.encodeObjectState(a.x, a.y, a.z, a.qx, a.qy, a.qz, a.qw)
    };
    Q.prototype.isValid = function () {
        var a = this.state;
        return 0 !== a[3] || 0 !== a[4] || 0 !== a[5] || 0 !== a[6]
    };
    Q.encodeObjectState = function (a, b, c, d, e, g, m, f) {
        void 0 === f && (f = new Float32Array(7));
        f[0] = a;
        f[1] = b;
        f[2] = c;
        f[3] = d;
        f[4] = e;
        f[5] = g;
        f[6] = m;
        return f
    };
    $jscomp.global.Object.defineProperties(Q.prototype, {
        x: {
            configurable: !0, enumerable: !0, get: function () {
                return this.state[0] || 0
            }, set: function (a) {
                this.state[0] =
                    a
            }
        }, y: {
            configurable: !0, enumerable: !0, get: function () {
                return this.state[1] || 0
            }, set: function (a) {
                this.state[1] = a
            }
        }, z: {
            configurable: !0, enumerable: !0, get: function () {
                return this.state[2] || 0
            }, set: function (a) {
                this.state[2] = a
            }
        }, qx: {
            configurable: !0, enumerable: !0, get: function () {
                return this.state[3] || 0
            }, set: function (a) {
                this.state[3] = a
            }
        }, qy: {
            configurable: !0, enumerable: !0, get: function () {
                return this.state[4] || 0
            }, set: function (a) {
                this.state[4] = a
            }
        }, qz: {
            configurable: !0, enumerable: !0, get: function () {
                return this.state[5] ||
                    0
            }, set: function (a) {
                this.state[5] = a
            }
        }, qw: {
            configurable: !0, enumerable: !0, get: function () {
                return void 0 !== this.state[6] ? this.state[6] : 1
            }, set: function (a) {
                this.state[6] = a
            }
        }, position: {
            configurable: !0, enumerable: !0, get: function () {
                var a = this.state;
                return new THREE.Vector3(a[0] || 0, a[1] || 0, a[2] || 0)
            }, set: function (a) {
                this.state[0] = a.x;
                this.state[1] = a.y;
                this.state[2] = a.z
            }
        }, orientation: {
            configurable: !0, enumerable: !0, get: function () {
                var a = this.state;
                return new THREE.Quaternion(a[3] || 0, a[4] || 0, a[5] || 0, void 0 !== a[6] ?
                    a[6] : 1)
            }, set: function (a) {
                this.state[3] = a.x;
                this.state[4] = a.y;
                this.state[5] = a.z;
                this.state[6] = a.w
            }
        }
    });
    var ha = function (a) {
        var b = Q.call(this, a instanceof Float32Array || a instanceof Array ? a : []) || this;
        void 0 === a ? b.state = ha.encodeAgentState(0, 0, 0, 0, 0, 0, 0, 0, 1, [], []) : a instanceof Float32Array || a instanceof Array || (b.state = ha.encodeAgentState(a.modelIdx, a.flags, a.x, a.y, a.z, a.qx, a.qy, a.qz, a.qw, a.jointAngles, a.data));
        return b
    };
    $jscomp.inherits(ha, Q);
    ha.prototype.isValid = function () {
        return Q.prototype.isValid.call(this) &&
            9 < this.state.length
    };
    ha.encodeAgentState = function (a, b, c, d, e, g, m, f, k, l, r, p) {
        void 0 === p && (p = new Float32Array(10 + l.length + r.length));
        Q.encodeObjectState(c, d, e, g, m, f, k, p);
        c = 10 + l.length;
        p[7] = a;
        p[8] = b;
        p[9] = c;
        for (a = 0; a < l.length; a++) p[10 + a] = l[a];
        for (l = 0; l < r.length; l++) p[c + l] = r[l];
        return p
    };
    $jscomp.global.Object.defineProperties(ha.prototype, {
        modelIndex: {
            configurable: !0, enumerable: !0, get: function () {
                return Math.round(this.state[7] || 0)
            }
        }, flags: {
            configurable: !0, enumerable: !0, get: function () {
                return this.state[8] ||
                    0
            }
        }, jointAngles: {
            configurable: !0, enumerable: !0, get: function () {
                return this.state.slice(10, this.state[9])
            }
        }, data: {
            configurable: !0, enumerable: !0, get: function () {
                return this.state.slice(this.state[9])
            }
        }
    });
    var sa = function (a, b, c, d, e, g, m) {
        this.time = a;
        this.gameTime = b;
        this.gameState = c;
        this.score = d;
        this.ballStateArr = e;
        this.leftAgentStateArrs = g;
        this.rightAgentStateArrs = m
    };
    sa.wrapAgentStatesArray = function (a) {
        return a.map(function (b) {
            return void 0 !== b ? new ha(b) : void 0
        })
    };
    sa.unwrapAgentStatesArray = function (a) {
        return a.map(function (b) {
            return void 0 !==
            b ? b.state : void 0
        })
    };
    $jscomp.global.Object.defineProperties(sa.prototype, {
        ballState: {
            configurable: !0, enumerable: !0, get: function () {
                return new Q(this.ballStateArr)
            }
        }, leftAgentStates: {
            configurable: !0, enumerable: !0, get: function () {
                return sa.wrapAgentStatesArray(this.leftAgentStateArrs)
            }
        }, rightAgentStates: {
            configurable: !0, enumerable: !0, get: function () {
                return sa.wrapAgentStatesArray(this.rightAgentStateArrs)
            }
        }
    });
    var O = function () {
    };
    O.createDefaultEnvironmentParams = function () {
        return O.createEnvironmentParamsV66()
    };
    O.createEnvironmentParamsV62 = function () {
        var a = {};
        a[E.LOG_STEP] = 200;
        a[E.FIELD_LENGTH] = 12;
        a[E.FIELD_WIDTH] = 8;
        a[E.FIELD_HEIGHT] = 40;
        a[E.GOAL_WIDTH] = 1.4;
        a[E.GOAL_DEPTH] = .4;
        a[E.GOAL_HEIGHT] = .8;
        a[E.FREE_KICK_DISTANCE] = 1;
        a[E.AGENT_RADIUS] = .4;
        a[E.BALL_RADIUS] = .042;
        a[E.RULE_HALF_TIME] = 300;
        return new L(a)
    };
    O.createEnvironmentParamsV63 = function () {
        var a = O.createEnvironmentParamsV62();
        a.paramObj[E.FIELD_LENGTH] = 18;
        a.paramObj[E.FIELD_WIDTH] = 12;
        a.paramObj[E.GOAL_WIDTH] = 2.1;
        a.paramObj[E.GOAL_DEPTH] = .6;
        a.paramObj[E.FREE_KICK_DISTANCE] =
            1.8;
        return a
    };
    O.createEnvironmentParamsV64 = function () {
        var a = O.createEnvironmentParamsV63();
        a.paramObj[E.FIELD_LENGTH] = 21;
        a.paramObj[E.FIELD_WIDTH] = 14;
        return a
    };
    O.createEnvironmentParamsV66 = function () {
        var a = O.createEnvironmentParamsV63();
        a.paramObj[E.FIELD_LENGTH] = 30;
        a.paramObj[E.FIELD_WIDTH] = 20;
        a.paramObj[E.FREE_KICK_DISTANCE] = 2;
        return a
    };
    O.createDefaultPlayerParams = function () {
        return new L({})
    };
    O.createDefaultPlayerTypeParams = function () {
        for (var a = [], b = 0; 5 > b; b++) a[b] = new L, a[b].paramObj[cb.MODEL_NAME] =
            "nao_hetero", a[b].paramObj[cb.MODEL_TYPE] = b;
        return a
    };
    var E = {
        LOG_STEP: "log_step",
        FIELD_LENGTH: "FieldLength",
        FIELD_WIDTH: "FieldWidth",
        FIELD_HEIGHT: "FieldHeight",
        GOAL_WIDTH: "GoalWidth",
        GOAL_DEPTH: "GoalDepth",
        GOAL_HEIGHT: "GoalHeight",
        BORDER_SIZE: "BorderSize",
        FREE_KICK_DISTANCE: "FreeKickDistance",
        WAIT_BEFORE_KICK_OFF: "WaitBeforeKickOff",
        AGENT_MASS: "AgentMass",
        AGENT_RADIUS: "AgentRadius",
        AGENT_MAX_SPEED: "AgentMaxSpeed",
        BALL_RADIUS: "BallRadius",
        BALL_MASS: "BallMass",
        RULE_GOAL_PAUSE_TIME: "RuleGoalPauseTime",
        RULE_KICK_IN_PAUSE_TIME: "RuleKickInPauseTime",
        RULE_HALF_TIME: "RuleHalfTime",
        PLAY_MODES: "play_modes"
    }, cb = {MODEL_NAME: "model", MODEL_TYPE: "model_type"}, Ga = function () {
    };
    Ga.createDefaultEnvironmentParams = function () {
        var a = {};
        a[mb.SIMULATOR_STEP] = 100;
        return new L(a)
    };
    Ga.createDefaultPlayerParams = function () {
        var a = {};
        a[Jb.PLAYER_TYPES] = 1;
        return new L(a)
    };
    Ga.createDefaultPlayerTypeParams = function () {
        var a = [];
        a[0] = new L;
        a[0].paramObj[Ab.PLAYER_SIZE] = .3;
        return a
    };
    var yb = {
            DISABLE: 0,
            STAND: 1,
            KICK: 2,
            KICK_FAULT: 4,
            GOALIE: 8,
            CATCH: 16,
            CATCH_FAULT: 32,
            BALL_TO_PLAYER: 64,
            PLAYER_TO_BALL: 128,
            DISCARD: 256,
            LOST: 512,
            BALL_COLLIDE: 1024,
            PLAYER_COLLIDE: 2048,
            TACKLE: 4096,
            TACKLE_FAULT: 8192,
            BACK_PASS: 16384,
            FREE_KICK_FAULT: 32768,
            POST_COLLIDE: 65536,
            FOUL_CHARGED: 131072,
            YELLOW_CARD: 262144,
            RED_CARD: 524288
        }, G = {
            STAMINA: 0,
            STAMINA_EFFORT: 1,
            STAMINA_RECOVERY: 2,
            STAMINA_CAPACITY: 3,
            VIEW_QUALITY: 4,
            VIEW_WIDTH: 5,
            FOCUS_SIDE: 6,
            FOCUS_UNUM: 7,
            KICK_COUNT: 8,
            DASH_COUNT: 9,
            TURN_COUNT: 10,
            CATCH_COUNT: 11,
            MOVE_COUNT: 12,
            TURN_NECK_COUNT: 13,
            VIEW_COUNT: 14,
            SAY_COUNT: 15,
            TACKLE_COUNT: 16,
            POINT_TO_COUNT: 17,
            ATTENTION_COUNT: 18
        }, mb = {
            GOAL_WIDTH: "goal_width",
            INERTIA_MOMENT: "inertia_moment",
            PLAYER_SIZE: "player_size",
            PLAYER_DECAY: "player_decay",
            PLAYER_RAND: "player_rand",
            PLAYER_WEIGHT: "player_weight",
            PLAYER_SPEED_MAX: "player_speed_max",
            PLAYER_ACCEL_MAX: "player_accel_max",
            STAMINA_MAX: "stamina_max",
            STAMINA_INC_MAX: "stamina_inc_max",
            RECOVER_INIT: "recover_init",
            RECOVER_DEC_THR: "recover_dec_thr",
            RECOVER_MIN: "recover_min",
            RECOVER_DEC: "recover_dec",
            EFFORT_INIT: "effort_init",
            EFFORT_DEC_THR: "effort_dec_thr",
            EFFORT_MIN: "effort_min",
            EFFORT_DEC: "effort_dec",
            EFFORT_INC_THR: "effort_inc_thr",
            EFFORT_INC: "effort_inc",
            KICK_RAND: "kick_rand",
            TEAM_ACTUATOR_NOISE: "team_actuator_noise",
            PLAYER_RAND_FACTOR_L: "prand_factor_l",
            PLAYER_RAND_FACTOR_R: "prand_factor_r",
            KICK_RAND_FACTOR_L: "kick_rand_factor_l",
            KICK_RAND_FACTOR_R: "kick_rand_factor_r",
            BALL_SIZE: "ball_size",
            BALL_DECAY: "ball_decay",
            BALL_RAND: "ball_rand",
            BALL_WEIGHT: "ball_weight",
            BALL_SPEED_MAX: "ball_speed_max",
            BALL_ACCEL_MAX: "ball_accel_max",
            DASH_POWER_RATE: "dash_power_rate",
            KICK_POWER_RATE: "kick_power_rate",
            KICKABLE_MARGIN: "kickable_margin",
            CONTROL_RADIUS: "control_radius",
            CONTROL_RADIUS_WIDTH: "control_radius_width",
            CATCH_PROBABILITY: "catch_probability",
            CATCHABLE_AREA_L: "catchable_area_l",
            CATCHABLE_AREA_W: "catchable_area_w",
            GOALIE_MAX_MOVES: "goalie_max_moves",
            MAX_POWER: "maxpower",
            MIN_POWER: "minpower",
            MAX_MOMENT: "maxmoment",
            MIN_MOMENT: "minmoment",
            MAX_NECK_MOMENT: "maxneckmoment",
            MIN_NECK_MOMENT: "minneckmoment",
            MAX_NECK_ANGLE: "maxneckang",
            MIN_NECK_ANGLE: "minneckang",
            VISIBLE_ANGLE: "visible_angle",
            VISIBLE_DISTANCE: "visible_distance",
            AUDIO_CUT_DIST: "audio_cut_dist",
            QUANTIZE_STEP: "quantize_step",
            LANDMARK_QUANTIZE_STEP: "quantize_step_l",
            CORNER_KICK_MARGIN: "ckick_margin",
            WIND_DIR: "wind_dir",
            WIND_FORCE: "wind_force",
            WIND_ANGLE: "wind_ang",
            WIND_RAND: "wind_rand",
            WIND_NONE: "wind_none",
            WIND_RANDOM: "wind_random",
            HALF_TIME: "half_time",
            DROP_BALL_TIME: "drop_ball_time",
            PORT: "port",
            COACH_PORT: "coach_port",
            ONLINE_COACH_PORT: "olcoach_port",
            SAY_COACH_COUNT_MAX: "say_coach_cnt_max",
            SAY_COACH_MSG_SIZE: "say_coach_msg_size",
            SIMULATOR_STEP: "simulator_step",
            SEND_STEP: "send_step",
            RECV_STEP: "recv_step",
            SENSE_BODY_STEP: "sense_body_step",
            SAY_MSG_SIZE: "say_msg_size",
            CLANG_WIN_SIZE: "clang_win_size",
            CLANG_DEFINE_WIN: "clang_define_win",
            CLANG_META_WIN: "clang_meta_win",
            CLANG_ADVICE_WIN: "clang_advice_win",
            CLANG_INFO_WIN: "clang_info_win",
            CLANG_DEL_WIN: "clang_del_win",
            CLANG_RULE_WIN: "clang_rule_win",
            CLANG_MESS_DELAY: "clang_mess_delay",
            CLANG_MESS_PER_CYCLE: "clang_mess_per_cycle",
            HEAR_MAX: "hear_max",
            HEAR_INC: "hear_inc",
            HEAR_DECAY: "hear_decay",
            CATCH_BAN_CYCLE: "catch_ban_cycle",
            COACH_MODE: "coach",
            COACH_WITH_REFEREE_MODE: "coach_w_referee",
            OLD_COACH_HEAR: "old_coach_hear",
            SEND_VI_STEP: "send_vi_step",
            USE_OFFSIDE: "use_offside",
            OFFSIDE_ACTIVE_AREA_SIZE: "offside_active_area_size",
            FORBID_KICK_OFF_OFFSIDE: "forbid_kick_off_offside",
            VERBOSE: "verbose",
            OFFSIDE_KICK_MARGIN: "offside_kick_margin",
            SLOW_DOWN_FACTOR: "slow_down_factor",
            SYNCH_MODE: "synch_mode",
            SYNCH_OFFSET: "synch_offset",
            SYNCH_MICRO_SLEEP: "synch_micro_sleep",
            START_GOAL_L: "start_goal_l",
            START_GOAL_R: "start_goal_r",
            FULLSTATE_L: "fullstate_l",
            FULLSTATE_R: "fullstate_r",
            SLOWNESS_ON_TOP_FOR_LEFT_TEAM: "slowness_on_top_for_left_team",
            SLOWNESS_ON_TOP_FOR_RIGHT_TEAM: "slowness_on_top_for_right_team",
            LANDMARK_FILE: "landmark_file",
            SEND_COMMS: "send_comms",
            TEXT_LOGGING: "text_logging",
            GAME_LOGGING: "game_logging",
            GAME_LOG_VERSION: "game_log_version",
            TEXT_LOG_DIR: "text_log_dir",
            GAME_LOG_DIR: "game_log_dir",
            TEXT_LOG_FIXED_NAME: "text_log_fixed_name",
            GAME_LOG_FIXED_NAME: "game_log_fixed_name",
            TEXT_LOG_FIXED: "text_log_fixed",
            GAME_LOG_FIXED: "game_log_fixed",
            TEXT_LOG_DATED: "text_log_dated",
            GAME_LOG_DATED: "game_log_dated",
            LOG_DATE_FORMAT: "log_date_format",
            LOG_TIMES: "log_times",
            RECORD_MESSAGES: "record_messages",
            TEXT_LOG_COMPRESSION: "text_log_compression",
            GAME_LOG_COMPRESSION: "game_log_compression",
            PROFILE: "profile",
            POINT_TO_BAN: "point_to_ban",
            POINT_TO_DURATION: "point_to_duration",
            TACKLE_DIST: "tackle_dist",
            TACKLE_BACK_DIST: "tackle_back_dist",
            TACKLE_WIDTH: "tackle_width",
            TACKLE_EXPONENT: "tackle_exponent",
            TACKLE_CYCLES: "tackle_cycles",
            TACKLE_POWER_RATE: "tackle_power_rate",
            FREEFORM_WAIT_PERIOD: "freeform_wait_period",
            FREEFORM_SEND_PERIOD: "freeform_send_period",
            FREE_KICK_FAULTS: "free_kick_faults",
            BACK_PASSES: "back_passes",
            PROPER_GOAL_KICKS: "proper_goal_kicks",
            STOPPED_BALL_VEL: "stopped_ball_vel",
            MAX_GOAL_KICKS: "max_goal_kicks",
            AUTO_MODE: "auto_mode",
            KICK_OFF_WAIT: "kick_off_wait",
            CONNECT_WAIT: "connect_wait",
            GAME_OVER_WAIT: "game_over_wait",
            TEAM_L_START: "team_l_start",
            TEAM_R_START: "team_r_start",
            KEEPAWAY_MODE: "keepaway",
            KEEPAWAY_LENGTH: "keepaway_length",
            KEEPAWAY_WIDTH: "keepaway_width",
            KEEPAWAY_LOGGING: "keepaway_logging",
            KEEPAWAY_LOG_DIR: "keepaway_log_dir",
            KEEPAWAY_LOG_FIXED_NAME: "keepaway_log_fixed_name",
            KEEPAWAY_LOG_FIXED: "keepaway_log_fixed",
            KEEPAWAY_LOG_DATED: "keepaway_log_dated",
            KEEPAWAY_START: "keepaway_start",
            NR_NORMAL_HALFS: "nr_normal_halfs",
            NR_EXTRA_HALFS: "nr_extra_halfs",
            PENALTY_SHOOT_OUTS: "penalty_shoot_outs",
            PEN_BEFORE_SETUP_WAIT: "pen_before_setup_wait",
            PEN_SETUP_WAIT: "pen_setup_wait",
            PEN_READY_WAIT: "pen_ready_wait",
            PEN_TAKEN_WAIT: "pen_taken_wait",
            PEN_NR_KICKS: "pen_nr_kicks",
            PEN_MAX_EXTRA_KICKS: "pen_max_extra_kicks",
            PEN_DIST_X: "pen_dist_x",
            PEN_RANDOM_WINNER: "pen_random_winner",
            PEN_MAX_GOALIE_DIST_X: "pen_max_goalie_dist_x",
            PEN_ALLOW_MULT_KICKS: "pen_allow_mult_kicks",
            PEN_COACH_MOVES_PLAYERS: "pen_coach_moves_players",
            BALL_STUCK_AREA: "ball_stuck_area",
            COACH_MSG_FILE: "coach_msg_file",
            MAX_TACKLE_POWER: "max_tackle_power",
            MAX_BACK_TACKLE_POWER: "max_back_tackle_power",
            PLAYER_SPEED_MAX_MIN: "player_speed_max_min",
            EXTRA_STAMINA: "extra_stamina",
            SYNCH_SEE_OFFSET: "synch_see_offset",
            MAX_MONITORS: "max_monitors",
            EXTRA_HALF_TIME: "extra_half_time",
            STAMINA_CAPACITY: "stamina_capacity",
            MAX_DASH_ANGLE: "max_dash_angle",
            MIN_DASH_ANGLE: "min_dash_angle",
            DASH_ANGLE_STEP: "dash_angle_step",
            SIDE_DASH_RATE: "side_dash_rate",
            BACK_DASH_RATE: "back_dash_rate",
            MAX_DASH_POWER: "max_dash_power",
            MIN_DASH_POWER: "min_dash_power",
            TACKLE_RAND_FACTOR: "tackle_rand_factor",
            FOUL_DETECT_PROBABILITY: "foul_detect_probability",
            FOUL_EXPONENT: "foul_exponent",
            FOUL_CYCLES: "foul_cycles",
            GOLDEN_GOAL: "golden_goal",
            RED_CARD_PROBABILITY: "red_card_probability"
        },
        Jb = {
            PLAYER_TYPES: "player_types",
            SUBS_MAX: "subs_max",
            PT_MAX: "pt_max",
            ALLOW_MULT_DEFAULT_TYPE: "allow_mult_default_type",
            PLAYER_SPEED_MAX_DELTA_MIN: "player_speed_max_delta_min",
            PLAYER_SPEED_MAX_DELTA_MAX: "player_speed_max_delta_max",
            STAMINA_INC_MAX_DELTA_FACTOR: "stamina_inc_max_delta_factor",
            PLAYER_DECAY_DELTA_MIN: "player_decay_delta_min",
            PLAYER_DECAY_DELTA_MAX: "player_decay_delta_max",
            INERTIA_MOMENT_DELTA_FACTOR: "inertia_moment_delta_factor",
            DASH_POWER_RATE_DELTA_MIN: "dash_power_rate_delta_min",
            DASH_POWER_RATE_DELTA_MAX: "dash_power_rate_delta_max",
            PLAYER_SIZE_DELTA_FACTOR: "player_size_delta_factor",
            KICKABLE_MARGIN_DELTA_MIN: "kickable_margin_delta_min",
            KICKABLE_MARGIN_DELTA_MAX: "kickable_margin_delta_max",
            KICK_RAND_DELTA_FACTOR: "kick_rand_delta_factor",
            EXTRA_STAMINA_DELTA_MIN: "extra_stamina_delta_min",
            EXTRA_STAMINA_DELTA_MAX: "extra_stamina_delta_max",
            EFFORT_MAX_DELTA_FACTOR: "effort_max_delta_factor",
            EFFORT_MIN_DELTA_FACTOR: "effort_min_delta_factor",
            NEW_DASH_POWER_RATE_DELTA_MIN: "new_dash_power_rate_delta_min",
            NEW_DASH_POWER_RATE_DELTA_MAX: "new_dash_power_rate_delta_max",
            NEW_STAMINA_INC_MAX_DELTA_FACTOR: "new_stamina_inc_max_delta_factor",
            RANDOM_SEED: "random_seed",
            KICK_POWER_RATE_DELTA_MIN: "kick_power_rate_delta_min",
            KICK_POWER_RATE_DELTA_MAX: "kick_power_rate_delta_max",
            FOUL_DETECT_PROBABILITY_DELTA_FACTOR: "foul_detect_probability_delta_factor",
            CATCHABLE_AREA_L_STRETCH_MIN: "catchable_area_l_stretch_min",
            CATCHABLE_AREA_L_STRETCH_MAX: "catchable_area_l_stretch_max"
        }, Ab = {
            ID: "id",
            PLAYER_SPEED_MAX: "player_speed_max",
            STAMINA_INC_MAX: "stamina_inc_max",
            PLAYER_DECAY: "player_decay",
            INERTIA_MOMENT: "inertia_moment",
            DASH_POWER_RATE: "dash_power_rate",
            PLAYER_SIZE: "player_size",
            KICKABLE_MARGIN: "kickable_margin",
            KICK_RAND: "kick_rand",
            EXTRA_STAMINA: "extra_stamina",
            EFFORT_MAX: "effort_max",
            EFFORT_MIN: "effort_min",
            KICK_POWER_RATE: "kick_power_rate",
            FOUL_DETECT_PROBABILITY: "foul_detect_probability",
            CATCHABLE_AREA_L_STRETCH: "catchable_area_l_stretch"
        }, la = function (a) {
            this.url = null;
            this.type = a;
            this.frequency = 1;
            this.environmentParams = new L;
            this.playerParams = new L;
            this.playerTypes = [];
            this.leftTeam =
                new oa("Left Team", new THREE.Color(16776960), -1);
            this.rightTeam = new oa("Right Team", new THREE.Color(16711680), 1);
            this.states = [];
            this.duration = this.endTime = this.startTime = 0;
            this.gameStateList = [];
            this.gameScoreList = [];
            this.fullyLoaded = !1;
            this.onChange = void 0;
            a === T.TWOD ? (this.environmentParams = Ga.createDefaultEnvironmentParams(), this.playerParams = Ga.createDefaultPlayerParams(), this.playerTypes = Ga.createDefaultPlayerTypeParams()) : (this.environmentParams = O.createDefaultEnvironmentParams(), this.playerParams =
                O.createDefaultPlayerParams(), this.playerTypes = O.createDefaultPlayerTypeParams());
            this.updateFrequency()
        };
    la.prototype.updateFrequency = function () {
        var a;
        if (a = this.type === T.TWOD ? this.environmentParams.getNumber(mb.SIMULATOR_STEP) : this.environmentParams.getNumber(E.LOG_STEP)) this.frequency = 1E3 / a
    };
    la.prototype.getIndexForTime = function (a) {
        a = Math.floor(a * this.frequency);
        return 0 > a ? 0 : a >= this.states.length ? this.states.length - 1 : a
    };
    la.prototype.getStateForTime = function (a) {
        return this.states[this.getIndexForTime(a)]
    };
    la.prototype.onTeamsUpdated = function () {
        if (void 0 !== this.onChange) this.onChange("teams")
    };
    la.prototype.onStatesUpdated = function () {
        if (0 < this.states.length) {
            this.startTime = this.states[0].time;
            this.endTime = this.states[this.states.length - 1].time;
            this.duration = this.endTime - this.startTime;
            this.gameStateList = [];
            this.gameScoreList = [];
            var a = this.states[0].gameState, b = this.states[0].score;
            this.gameStateList.push(a);
            this.gameScoreList.push(b);
            for (var c = 1; c < this.states.length; c++) a !== this.states[c].gameState &&
            (a = this.states[c].gameState, this.gameStateList.push(a)), b !== this.states[c].score && (b = this.states[c].score, this.gameScoreList.push(b))
        }
        if (void 0 !== this.onChange) this.onChange("states")
    };
    la.prototype.finalize = function () {
        this.fullyLoaded = !0;
        this.onStatesUpdated();
        this.onChange = void 0
    };
    var Ha = function (a, b) {
        this.data = a;
        this.regExp = /[^\r\n]+/g;
        this.line = null;
        this.extent = b;
        this.update(a, b)
    };
    Ha.prototype.dispose = function () {
        this.regExp.lastIndex = 0;
        for (var a = 10; --a;) this.regExp.exec("TRY\nTO\nEMPTY\nCACHE\n!!!");
        this.data = "";
        this.regExp.lastIndex = 0;
        this.line = null;
        this.extent = N.COMPLETE
    };
    Ha.prototype.update = function (a, b) {
        switch (this.extent) {
            case N.INCREMENTAL:
                this.data = this.data.slice(this.regExp.lastIndex) + a;
                this.regExp.lastIndex = 0;
                break;
            default:
                this.data = a
        }
        this.extent = b;
        return null === this.line
    };
    Ha.prototype.hasNext = function () {
        var a = this.regExp.lastIndex, b = this.regExp.test(this.data);
        this.extent !== N.COMPLETE && this.regExp.lastIndex === this.data.length && (b = !1);
        this.regExp.lastIndex = a;
        return b
    };
    Ha.prototype.next =
        function () {
            var a = this.regExp.lastIndex, b = this.regExp.exec(this.data);
            this.extent !== N.COMPLETE && this.regExp.lastIndex === this.data.length && (b = null);
            null === b || 0 === b.length ? (this.regExp.lastIndex = a, this.line = null) : this.line = b[0];
            return this.line
        };
    var N = {COMPLETE: 0, PARTIAL: 1, INCREMENTAL: 2}, Qa = function () {
    };
    Qa.prototype.parse = function (a, b) {
    };
    Qa.prototype.getGameLog = function () {
    };
    Qa.prototype.dispose = function (a) {
    };
    var Z = function () {
    };
    Z.copyString = function (a) {
        return a ? JSON.parse(JSON.stringify(a)) : a
    };
    var Ea =
        function (a, b, c) {
            this.time = a;
            this.timeStep = b;
            this.gameTime = c;
            this.gameState = new lb(a, "unknown");
            this.score = new zb(a, 0, 0);
            this.ballState = new Q;
            this.leftAgentStates = [];
            this.rightAgentStates = []
        };
    Ea.prototype.setGameTime = function (a) {
        this.gameTime = Math.round(1E3 * a) / 1E3
    };
    Ea.prototype.setPlaymode = function (a) {
        this.gameState.playMode !== a && (this.gameState = new lb(this.time, Z.copyString(a)))
    };
    Ea.prototype.setScore = function (a, b, c, d, e, g) {
        void 0 === c && (c = 0);
        void 0 === d && (d = 0);
        void 0 === e && (e = 0);
        void 0 === g && (g = 0);
        if (this.score.goalsLeft !==
            a || this.score.goalsRight !== b || this.score.penaltyScoreLeft !== c || this.score.penaltyMissLeft !== d || this.score.penaltyScoreRight !== e || this.score.penaltyMissRight !== g) this.score = new zb(this.time, a, b, c, d, e, g)
    };
    Ea.prototype.appendTo = function (a) {
        return 0 < this.leftAgentStates.length + this.rightAgentStates.length ? (a.push(new sa(this.time, this.gameTime, this.gameState, this.score, this.ballState.state, sa.unwrapAgentStatesArray(this.leftAgentStates), sa.unwrapAgentStatesArray(this.rightAgentStates))), this.time = Math.round(1E3 *
            (this.time + this.timeStep)) / 1E3, this.leftAgentStates = [], this.rightAgentStates = [], !0) : !1
    };
    var nb = function () {
        this.partialState = null;
        this.maxStates = 500;
        this.leftIndexList = [];
        this.rightIndexList = []
    };
    nb.prototype.hasPartialState = function () {
        return null !== this.partialState
    };
    var R = function (a) {
        this.name = "ParserException";
        this.message = void 0 !== a ? a : this.name
    };
    R.prototype.toString = function () {
        return this.message
    };
    var db = function (a, b) {
        a = la.call(this, a) || this;
        a.version = b;
        return a
    };
    $jscomp.inherits(db, la);
    var v = function () {
    };
    v.Vector3_Zero = function () {
        return Kb
    };
    v.Vector3_UnitX = function () {
        return Lb
    };
    v.Vector3_UnitY = function () {
        return Mb
    };
    v.Vector3_UnitZ = function () {
        return Nb
    };
    v.Color_White = function () {
        return Ob
    };
    v.Color_Black = function () {
        return Pb
    };
    v.Color_LightGrey = function () {
        return Qb
    };
    v.Color_DarkGrey = function () {
        return Rb
    };
    v.mM4 = function (a, b, c, d, e, g, m, f, k, l, r, p) {
        return (new THREE.Matrix4).set(a, b, c, d, e, g, m, f, k, l, r, p, 0, 0, 0, 1)
    };
    var Kb = new THREE.Vector3(0, 0, 0), Lb = new THREE.Vector3(1, 0, 0), Mb = new THREE.Vector3(0, 1, 0), Nb = new THREE.Vector3(0,
            0, 1), Ob = new THREE.Color(16777215), Pb = new THREE.Color(0), Qb = new THREE.Color(15658734), Rb = new THREE.Color(3355443),
        U = function () {
        };
    U.toRad = function (a) {
        return a * Math.PI / 180
    };
    U.toDeg = function (a) {
        return 180 * a / Math.PI
    };
    var Ib = Math.PI / 180, Hb = -Math.PI / 180, Bb = function () {
        this.values = [];
        this.children = []
    }, na = function () {
    };
    na.parse = function (a) {
        var b = new Bb;
        if ("(" !== a.charAt(0) || ")" !== a.charAt(a.length - 1)) throw Error("Input not embedded in braces: " + a);
        if (na.parseNode(a, 1, b) !== a.length) throw Error("Multiple root nodes in input: " +
            a);
        return b.children[0]
    };
    na.parseNode = function (a, b, c) {
        var d = new Bb;
        c.children.push(d);
        for (c = b; c < a.length;) if ("(" === a.charAt(c)) c > b && d.values.push(a.slice(b, c)), b = c = na.parseNode(a, c + 1, d); else {
            if (")" === a.charAt(c)) return c > b && d.values.push(a.slice(b, c)), c + 1;
            " " === a.charAt(c) ? (c > b && d.values.push(a.slice(b, c)), c++, b = c) : c++
        }
        throw Error("Invalid tree structure in input: " + a);
    };
    var Ra = function () {
        this.storage = this.replay = this.iterator = null;
        return this
    };
    $jscomp.inherits(Ra, Qa);
    Ra.prototype.parse = function (a,
                                   b) {
        b = void 0 === b ? N.COMPLETE : b;
        b = void 0 !== b ? b : N.COMPLETE;
        if (null === this.iterator || null === this.replay || null === this.storage) {
            this.iterator = new Ha(a, b);
            a = this.iterator.next();
            if (null === a) throw new R("Replay corrupt!");
            var c = a.split(" ");
            if ("R" === a.charAt(0) && "P" === a.charAt(1) && "L" === a.charAt(2)) {
                if (3 > c.length) throw new R("Malformated Replay Header!");
                this.replay = new db("2D" === c[1] ? T.TWOD : T.THREED, parseInt(c[2], 10));
                this.iterator.next()
            } else if ("T" === a.charAt(0)) {
                console.log("ReplayParser: Detected old 2D replay file format!");
                if (3 > c.length) throw new R("Invalid team line!");
                this.replay = new db(T.TWOD, 0);
                this.replay.leftTeam.setName(Z.copyString(c[1].slice(1, -1)));
                this.replay.rightTeam.setName(Z.copyString(c[2].slice(1, -1)));
                this.iterator.next();
                for (a = 1; 12 > a; a++) this.replay.leftTeam.addAgent(a, this.replay.playerTypes[0]), this.replay.rightTeam.addAgent(a, this.replay.playerTypes[0])
            } else if ("V" === a.charAt(0)) {
                console.log("ReplayParser: Detected old 3D replay file format!");
                if (4 > c.length) throw new R("Malformated Replay Header!");
                this.replay = new db(T.THREED, 0);
                this.replay.frequency = parseInt(c[3], 10);
                a = this.iterator.next();
                if (null === a) throw new R("Replay corrupt!");
                c = a.split(" ");
                if (5 > c.length || "T" != c[0]) throw new R("Invalid teams line!");
                this.replay.leftTeam.setName(Z.copyString(c[1].slice(1, -1)));
                this.replay.rightTeam.setName(Z.copyString(c[3].slice(1, -1)));
                try {
                    this.replay.leftTeam.color = new THREE.Color(c[2]), this.replay.rightTeam.color = new THREE.Color(c[4])
                } catch (d) {
                    console.log(d)
                }
                a = this.iterator.next();
                if (null === a) throw new R("Replay corrupt!");
                c = a.split(" ");
                if (2 > c.length || "F" != c[0]) throw new R("Invalid world line!");
                switch (parseInt(c[1], 10)) {
                    case 62:
                        this.replay.environmentParams = O.createEnvironmentParamsV62();
                        break;
                    case 63:
                        this.replay.environmentParams = O.createEnvironmentParamsV63();
                        break;
                    case 64:
                        this.replay.environmentParams = O.createEnvironmentParamsV64();
                        break;
                    case 66:
                        this.replay.environmentParams = O.createEnvironmentParamsV66()
                }
                this.iterator.next()
            } else throw new R("Failed parsing replay file - no Replay header found (and none of the fallback options applies)!");
            this.storage = new nb;
            this.storage.maxStates = this.replay.type === T.TWOD ? 300 : 50;
            q(this.iterator, this.replay, this.storage);
            if (b === N.COMPLETE && 0 === this.replay.states.length) throw new R("Empty replay file!");
            return 0 < this.replay.states.length
        }
        c = 0 === this.replay.states.length;
        this.iterator.update(a, b) && q(this.iterator, this.replay, this.storage);
        if (b === N.COMPLETE && 0 === this.replay.states.length) throw new R("Empty replay file!");
        return c && 0 < this.replay.states.length
    };
    Ra.prototype.getGameLog = function () {
        return this.replay
    };
    Ra.prototype.dispose = function (a) {
        null === this.iterator || a || this.iterator.dispose();
        this.storage = this.replay = this.iterator = null
    };
    var Cb = function (a) {
        var b = la.call(this, T.TWOD) || this;
        b.version = a;
        return b
    };
    $jscomp.inherits(Cb, la);
    var C = function () {
        this.storage = this.sserverLog = this.iterator = null;
        return this
    };
    $jscomp.inherits(C, Qa);
    C.prototype.parse = function (a, b) {
        b = void 0 === b ? N.COMPLETE : b;
        b = void 0 !== b ? b : N.COMPLETE;
        if (null === this.iterator || null === this.sserverLog || null === this.storage) {
            this.iterator = new Ha(a,
                b);
            a = this.iterator.next();
            if (null === a || "U" !== a.charAt(0) && "L" !== a.charAt(1) && "G" !== a.charAt(2)) throw new R("Failed parsing ULG log file - no ULG header found!");
            a = parseInt(a.slice(3), 10);
            this.sserverLog = new Cb(a);
            this.storage = new nb;
            this.storage.partialState = new Ea(0, .1, 0);
            this.storage.maxStates = 100;
            this.iterator.next();
            C.parseULGBody(this.iterator, this.sserverLog, this.storage);
            if (b === N.COMPLETE && 0 === this.sserverLog.states.length) throw new R("Empty SServer log file!");
            return 0 < this.sserverLog.states.length
        }
        if (null !==
            this.sserverLog) {
            var c = 0 === this.sserverLog.states.length;
            this.iterator.update(a, b) && C.parseULGBody(this.iterator, this.sserverLog, this.storage);
            if (b === N.COMPLETE && 0 === this.sserverLog.states.length) throw new R("Empty SServer log file!");
            return c && 0 < this.sserverLog.states.length
        }
        return !1
    };
    C.prototype.getGameLog = function () {
        return this.sserverLog
    };
    C.prototype.dispose = function (a) {
        null === this.iterator || a || this.iterator.dispose();
        this.storage = this.sserverLog = this.iterator = null
    };
    C.parseULGBody = function (a,
                               b, c) {
        var d = a.line;
        null === d && (d = a.next());
        for (var e = 0; null !== d && e < c.maxStates;) {
            try {
                "(server_param " === d.slice(0, 14) ? C.parseServerParamLine(d, b, c) : "(player_param " === d.slice(0, 14) ? C.parsePlayerParamLine(d, b) : "(player_type " === d.slice(0, 13) ? C.parsePlayerTypeLine(d, b) : "(team " === d.slice(0, 6) ? C.parseTeamLine(d, b, c) : "(playmode " === d.slice(0, 10) ? C.parsePlaymodeLine(d, b, c) : "(msg " === d.slice(0, 5) ? C.parseMessageLine(d, b) : "(draw " === d.slice(0, 6) ? C.parseDrawLine(d, b) : "(show " === d.slice(0, 6) ? (C.parseShowLine(d,
                    b, c), e++) : console.log("Unknown ulg log line: " + d)
            } catch (g) {
            }
            d = a.next()
        }
        if (0 < e) b.onStatesUpdated();
        null !== d ? setTimeout(C.parseULGBody, 1, a, b, c) : a.extent === N.COMPLETE && (a.dispose(), c.hasPartialState() && c.partialState.appendTo(b.states), b.finalize())
    };
    C.parsePlaymodeLine = function (a, b, c) {
        var d = na.parse(a);
        2 < d.values.length ? (a = parseInt(d.values[1], 10) / 10, c.partialState.appendTo(b.states), c.partialState.setGameTime(a), c.partialState.setPlaymode(d.values[2])) : console.log("Invalid playmode line: " + a)
    };
    C.parseTeamLine =
        function (a, b, c) {
            var d = na.parse(a);
            if (5 < d.values.length) {
                a = parseInt(d.values[1], 10) / 10;
                var e = parseInt(d.values[4], 10), g = parseInt(d.values[5], 10), m = 0, f = 0, k = 0, l = 0;
                9 < d.values.length && (m = parseInt(d.values[6], 10), f = parseInt(d.values[7], 10), k = parseInt(d.values[8], 10), l = parseInt(d.values[9], 10));
                var r = b.leftTeam.setName(Z.copyString(d.values[2]));
                d = b.rightTeam.setName(Z.copyString(d.values[3]));
                if (r || d) b.onTeamsUpdated();
                c.partialState.appendTo(b.states);
                c.partialState.setGameTime(a);
                c.partialState.setScore(e,
                    g, m, f, k, l)
            } else console.log("Invalid team line: " + a)
        };
    C.parseShowLine = function (a, b, c) {
        var d = na.parse(a);
        if (1 < d.values.length) {
            c.partialState.appendTo(b.states);
            c.partialState.setGameTime(parseInt(d.values[1], 10) / 10);
            for (var e, g = 0; g < d.children.length; g++) e = d.children[g], 0 < e.children.length ? "b" === e.children[0].values[0] ? C.parseBallState(e, c.partialState) : "l" === e.children[0].values[0] ? C.parseAgentState(e, b, b.leftTeam, c.partialState.leftAgentStates) : "r" === e.children[0].values[0] ? C.parseAgentState(e, b,
                b.rightTeam, c.partialState.rightAgentStates) : console.log("Found unexpected node in show line: " + a.slice(0, 20)) : 0 < e.values.length ? "pm" === e.values[0] ? console.log("Found pm info in show line...") : "tm" === e.values[0] ? console.log("Found tm info in show line...") : console.log("Found unexpected node in show line: " + a.slice(0, 20)) : console.log("Found empty node in show line: " + a.slice(0, 20))
        } else console.log("Invalid show line: " + a.slice(0, 20))
    };
    C.parseBallState = function (a, b) {
        null === b || 2 > a.values.length || (b.ballState =
            new Q({x: parseFloat(a.values[0]), y: .2, z: parseFloat(a.values[1]), qx: 0, qy: 0, qz: 0, qw: 1}))
    };
    C.parseAgentState = function (a, b, c, d) {
        if (7 > a.values.length) console.log("Expected more values in agent node: " + a.values); else {
            var e = parseInt(a.children[0].values[1], 10), g = parseInt(a.values[0], 10), m = parseInt(a.values[1], 16);
            c.addAgent(e, b.playerTypes[g]);
            var f = [], k = [];
            b = new THREE.Vector3(parseFloat(a.values[2]), 0, parseFloat(a.values[3]));
            var l = parseFloat(a.values[6]);
            g = new THREE.Quaternion;
            g.setFromAxisAngle(v.Vector3_UnitY(),
                U.toRad(-l));
            7 < a.values.length && (l = parseFloat(a.values[7]), f[0] = U.toRad(-l));
            for (var r = 1; r < a.children.length; r++) l = a.children[r].values, 0 < l.length ? "v" !== l[0] && ("s" === l[0] ? (1 < l.length && (k[G.STAMINA] = parseFloat(l[1])), 2 < l.length && (k[G.STAMINA_EFFORT] = parseFloat(l[2])), 3 < l.length && (k[G.STAMINA_RECOVERY] = parseFloat(l[3])), 4 < l.length && (k[G.STAMINA_CAPACITY] = parseFloat(l[4]))) : "f" === l[0] ? 2 < l.length ? (k[G.FOCUS_SIDE] = "l" === l[1] ? "l" : "r", k[G.FOCUS_UNUM] = parseInt(l[2], 10)) : console.log("Found unexpected focus node in agent node!") :
                "c" === l[0] ? (1 < l.length && (k[G.KICK_COUNT] = parseInt(l[1], 10)), 2 < l.length && (k[G.DASH_COUNT] = parseInt(l[2], 10)), 3 < l.length && (k[G.TURN_COUNT] = parseInt(l[3], 10)), 4 < l.length && (k[G.CATCH_COUNT] = parseInt(l[4], 10)), 5 < l.length && (k[G.MOVE_COUNT] = parseInt(l[5], 10)), 6 < l.length && (k[G.TURN_NECK_COUNT] = parseInt(l[6], 10)), 7 < l.length && (k[G.VIEW_COUNT] = parseInt(l[7], 10)), 8 < l.length && (k[G.SAY_COUNT] = parseInt(l[8], 10)), 9 < l.length && (k[G.TACKLE_COUNT] = parseInt(l[9], 10)), 10 < l.length && (k[G.POINT_TO_COUNT] = parseInt(l[10], 10)),
                11 < l.length && (k[G.ATTENTION_COUNT] = parseInt(l[11], 10))) : console.log("Found unexpected child node in agent node!")) : console.log("Found unexpected child node in agent node!");
            d[e] = new ha({
                modelIdx: c.getRecentTypeIdx(e),
                flags: m,
                x: b.x,
                y: b.y,
                z: b.z,
                qx: g.x,
                qy: g.y,
                qz: g.z,
                qw: g.w,
                jointAngles: f,
                data: k
            })
        }
    };
    C.parseServerParamLine = function (a, b, c) {
        b.environmentParams.clear();
        C.parseParameters(a, b.environmentParams.paramObj, "server parameter");
        b.updateFrequency();
        null !== c.partialState && (c.partialState.timeStep = 1 /
            b.frequency)
    };
    C.parsePlayerParamLine = function (a, b) {
        b.playerParams.clear();
        C.parseParameters(a, b.playerParams.paramObj, "player parameter")
    };
    C.parsePlayerTypeLine = function (a, b) {
        var c = {};
        C.parseParameters(a, c, "player type");
        a = c[Ab.ID];
        void 0 !== a && (b.playerTypes[a] = new L(c))
    };
    C.parseParameters = function (a, b, c) {
        a = na.parse(a);
        for (var d, e = 0; e < a.children.length; e++) if (d = a.children[e].values, 2 > d.length) console.log("Malformated name-value pair in " + c + " line: " + a.children[e]); else if ("true" === d[1]) b[d[0]] = !0;
        else if ("false" === d[1]) b[d[0]] = !1; else if ('"' === d[1].charAt(0)) b[d[0]] = Z.copyString(d[1].slice(1, -1)); else try {
            b[d[0]] = parseFloat(d[1])
        } catch (g) {
            b[d[0]] = Z.copyString(d[1])
        }
    };
    C.parseMessageLine = function (a, b) {
    };
    C.parseDrawLine = function (a, b) {
    };
    var ba = function () {
    };
    ba.getFileName = function (a) {
        var b = a.indexOf("?");
        -1 === b && (b = a.length);
        var c = a.slice(0, b).lastIndexOf("/");
        return a.slice(c + 1, b)
    };
    ba.getFileType = function (a) {
        var b = a.lastIndexOf(".");
        return -1 !== b ? a.slice(b + 1) : null
    };
    ba.filterFiles = function (a, b) {
        for (var c =
            [], d = 0; d < a.length; d++) for (var e = 0; e < b.length; e++) if (a[d].name.slice(-b[e].length) === b[e]) {
            c.push(a[d]);
            break
        }
        return c
    };
    ba.isReplayFile = function (a, b) {
        a = ba.getFileName(a);
        var c = a.slice(-9), d = a.slice(-6);
        return ".rpl3d" === d || ".rpl2d" === d || ".replay" === a.slice(-7) || b && (".rpl3d.gz" === c || ".rpl2d.gz" === c || ".replay.gz" === a.slice(-10)) ? !0 : !1
    };
    ba.isSServerLogFile = function (a, b) {
        a = ba.getFileName(a);
        return ".rcg" === a.slice(-4) || void 0 !== b && ".rcg.gz" === a.slice(-7)
    };
    var ca = function () {
        this.fileReader = this.xhr = this.parser =
            this.__event_observers = null;
        this.xhrOnLoadListener = this.xhrOnLoad.bind(this);
        this.xhrOnProgressListener = this.xhrOnProgress.bind(this);
        this.xhrOnErrorListener = this.xhrOnError.bind(this);
        this.fileReaderOnLoadEndListener = this.fileReaderOnLoadEnd.bind(this);
        return this
    };
    $jscomp.inherits(ca, aa);
    ca.prototype.load = function (a) {
        this.clear();
        this.createParserFor(a, !0) && (this.dispatchEvent({
            type: "start",
            url: a
        }), this.xhr = new XMLHttpRequest, this.xhr.open("GET", a, !0), this.xhr.addEventListener("load", this.xhrOnLoadListener,
            !1), this.xhr.addEventListener("progress", this.xhrOnProgressListener, !1), this.xhr.addEventListener("error", this.xhrOnErrorListener, !1), this.xhr.overrideMimeType && this.xhr.overrideMimeType("text/plain"), this.xhr.send(null))
    };
    ca.prototype.loadFile = function (a) {
        this.clear();
        this.createParserFor(a.name) && (null === this.fileReader && (this.fileReader = new FileReader, this.fileReader.addEventListener("loadend", this.fileReaderOnLoadEndListener, !1)), this.dispatchEvent({
            type: "start",
            url: a.name
        }), this.fileReader.readAsText(a))
    };
    ca.prototype.createParserFor = function (a, b) {
        ba.isSServerLogFile(a, b) ? this.parser = new C : ba.isReplayFile(a, b) ? this.parser = new Ra : this.dispatchEvent({
            type: "error",
            msg: "Error while loading file! Failed to create game log parser!"
        });
        return null !== this.parser
    };
    ca.prototype.clear = function (a) {
        null !== this.xhr && (this.xhr.removeEventListener("load", this.xhrOnLoadListener), this.xhr.removeEventListener("progress", this.xhrOnProgressListener), this.xhr.removeEventListener("error", this.xhrOnErrorListener), this.xhr.abort(),
            this.xhr = null);
        null !== this.parser && this.parser.dispose(a);
        this.parser = null
    };
    ca.prototype.xhrOnLoad = function (a) {
        200 === a.target.status || 0 === a.target.status ? (this.parse(a.target.response, N.COMPLETE), this.dispatchEvent({type: "finished"})) : this.dispatchEvent({
            type: "error",
            msg: this.getXHRErrorMessage()
        })
    };
    ca.prototype.fileReaderOnLoadEnd = function (a) {
        a.target.readyState == FileReader.DONE ? (this.parse(a.target.result, N.COMPLETE), this.dispatchEvent({type: "finished"})) : (this.clear(), this.dispatchEvent({
            type: "error",
            msg: "Loading file failed!"
        }))
    };
    ca.prototype.xhrOnProgress = function (a) {
        this.dispatchEvent({type: "progress", total: a.total, loaded: a.loaded});
        200 !== a.target.status && 0 !== a.target.status || this.parse(a.target.response, N.PARTIAL)
    };
    ca.prototype.xhrOnError = function (a) {
        this.dispatchEvent({type: "error", msg: this.getXHRErrorMessage()})
    };
    ca.prototype.parse = function (a, b) {
        if (a && null !== this.parser) try {
            this.parser.parse(a, b) && this.dispatchEvent({type: "new-game-log", gameLog: this.parser.getGameLog()}), b === N.COMPLETE &&
            this.clear(!0)
        } catch (c) {
            this.clear(), this.dispatchEvent({type: "error", msg: c.toString()})
        }
    };
    ca.prototype.getXHRErrorMessage = function () {
        var a = "No active XMLHttpRequest to check for an error!";
        null !== this.xhr && ((a = this.xhr.statusText) && "" !== a || (a = "Unknown reason!"));
        this.clear();
        return a
    };
    var Ia = function () {
        this.__event_observers = null;
        return this
    };
    $jscomp.inherits(Ia, aa);
    Ia.prototype.getID = function () {
        return ""
    };
    Ia.prototype.toJSONString = function () {
        return ""
    };
    Ia.prototype.fromJSONString = function (a) {
    };
    var ia =
        function () {
            var a = Ia.call(this) || this;
            a.teamColorsEnabled = !1;
            a.leftTeamColor = new THREE.Color("#cccc00");
            a.rightTeamColor = new THREE.Color("#008fff");
            a.interpolateStates = !0;
            a.shadowsEnabled = !1;
            a.glInfoEnabled = !1;
            return a
        };
    $jscomp.inherits(ia, Ia);
    ia.prototype.getID = function () {
        return "monitorConfig"
    };
    ia.prototype.toJSONString = function () {
        var a = {};
        a.teamColorsEnabled = this.teamColorsEnabled;
        a.teamColorLeft = this.leftTeamColor.getHex();
        a.teamColorRight = this.rightTeamColor.getHex();
        a.interpolateStates = this.interpolateStates;
        a.shadowsEnabled = this.shadowsEnabled;
        a.glInfoEnabled = this.glInfoEnabled;
        return JSON.stringify(a)
    };
    ia.prototype.fromJSONString = function (a) {
        try {
            var b = JSON.parse(a), c = b.teamColorsEnabled;
            void 0 !== c && (this.teamColorsEnabled = c);
            c = b.teamColorLeft;
            void 0 !== c && (this.leftTeamColor = new THREE.Color(c));
            c = b.teamColorRight;
            void 0 !== c && (this.rightTeamColor = new THREE.Color(c));
            c = b.interpolateStates;
            void 0 !== c && (this.interpolateStates = c);
            c = b.shadowsEnabled;
            void 0 !== c && (this.shadowsEnabled = c);
            c = b.glInfoEnabled;
            void 0 !==
            c && (this.glInfoEnabled = c)
        } catch (d) {
            console.log(d)
        }
    };
    ia.prototype.setTeamColorsEnabled = function (a) {
        this.teamColorsEnabled !== a && (this.teamColorsEnabled = a, this.dispatchEvent({type: "change", property: "teamColorsEnabled", newValue: a}))
    };
    ia.prototype.setTeamColor = function (a, b) {
        b ? (this.leftTeamColor = new THREE.Color(a), this.dispatchEvent({
            type: "change",
            property: "teamColorLeft",
            newValue: this.leftTeamColor
        })) : (this.rightTeamColor = new THREE.Color(a), this.dispatchEvent({
            type: "change", property: "teamColorRight",
            newValue: this.rightTeamColor
        }))
    };
    ia.prototype.getTeamColor = function (a) {
        return a ? this.leftTeamColor : this.rightTeamColor
    };
    ia.prototype.setInterpolateStates = function (a) {
        this.interpolateStates !== a && (this.interpolateStates = a, this.dispatchEvent({type: "change", property: "interpolateStates", newValue: a}))
    };
    ia.prototype.setShadowsEnabled = function (a) {
        this.shadowsEnabled !== a && (this.shadowsEnabled = a, this.dispatchEvent({type: "change", property: "shadowsEnabled", newValue: a}))
    };
    ia.prototype.setGLInfoEnabled = function (a) {
        this.glInfoEnabled !==
        a && (this.glInfoEnabled = a, this.dispatchEvent({type: "change", property: "glInfoEnabled", newValue: a}))
    };
    var Ja = function (a, b, c, d, e, g, m, f, k) {
        this.year = a;
        this.month = b;
        this.day = c;
        this.hour = d;
        this.minute = e;
        this.leftTeamName = g;
        this.leftScore = m;
        this.rightTeamName = f;
        this.rightScore = k
    };
    Ja.fromURL = function (a) {
        return Ja.fromFileName(ba.getFileName(a))
    };
    Ja.fromFileName = function (a) {
        return (a = /^([\d]{4})([\d]{2})([\d]{2})([\d]{2})([\d]{2})[-_](.+)_([\d]+)[-_]vs[-_](.+)_([\d]+)\..*/g.exec(a)) ? new Ja(parseInt(a[1], 10),
            parseInt(a[2], 10), parseInt(a[3], 10), parseInt(a[4], 10), parseInt(a[5], 10), a[6], parseInt(a[7], 10), a[8], parseInt(a[9], 10)) : null
    };
    var Sb = function (a, b) {
        this.title = a;
        this.resource = b;
        this.info = this.errorMsg = null;
        this.info = b instanceof File ? Ja.fromFileName(b.name) : Ja.fromURL(b)
    }, X = function (a) {
        this.__event_observers = null;
        this.title = a;
        this.entries = [];
        this.activeIndex = -1;
        this.autoplay = !1;
        return this
    };
    $jscomp.inherits(X, aa);
    X.prototype.setAutoplay = function (a) {
        a = void 0 === a ? !0 : a;
        this.autoplay !== a && (this.autoplay =
            a, this.dispatchEvent({type: "autoplay-change"}))
    };
    X.prototype.getActiveEntry = function () {
        return 0 > this.activeIndex ? null : this.entries[this.activeIndex]
    };
    X.prototype.addEntry = function (a, b) {
        for (var c = 0; c < this.entries.length; c++) if (this.entries[c].resource === b) return !1;
        this.entries.push(new Sb(a, b));
        this.dispatchEvent({type: "change", index: this.entries.length - 1});
        return !0
    };
    X.prototype.addFiles = function (a) {
        for (var b = 0; b < a.length; b++) this.addEntry(a[b].name, a[b])
    };
    X.prototype.markAsInvalid = function (a) {
        if (!(0 >
            this.activeIndex)) {
            var b = this.entries[this.activeIndex];
            void 0 !== b && null === b.errorMsg && (b.errorMsg = a, this.dispatchEvent({type: "update", entry: b, index: this.activeIndex}))
        }
    };
    X.prototype.setActiveIndex = function (a, b) {
        this.activeIndex === a || 0 > a || a >= this.entries.length || (void 0 === b && (b = !0), null === this.entries[a].errorMsg ? (this.activeIndex = a, this.dispatchEvent({type: "active-change"})) : this.setActiveIndex(a + (b ? 1 : -1)))
    };
    X.prototype.nextEntry = function () {
        this.setActiveIndex(this.activeIndex + 1, !0)
    };
    X.prototype.previousEntry =
        function () {
            this.setActiveIndex(this.activeIndex - 1, !1)
        };
    X.fromJSONString = function (a) {
        var b = null;
        try {
            var c = JSON.parse(a);
            if ("playlist" === c.type) {
                b = new X(void 0 !== c.title ? c.title : "My Playlist");
                var d = c.gamelogs;
                for (a = 0; a < d.length; a++) d[a].title && d[a].url ? b.addEntry(d[a].title, d[a].url) : console.log("Invalid playlist entry format.")
            } else console.log("Invalid playlist format.")
        } catch (e) {
            console.log("ERROR: Parsing playlist json failed!")
        }
        return b
    };
    var ja = function () {
        this.fileReader = this.xhr = this.__event_observers =
            null;
        this.xhrOnLoadListener = this.xhrOnLoad.bind(this);
        this.xhrOnProgressListener = this.xhrOnProgress.bind(this);
        this.xhrOnErrorListener = this.xhrOnError.bind(this);
        this.fileReaderOnLoadEndListener = this.fileReaderOnLoadEnd.bind(this);
        return this
    };
    $jscomp.inherits(ja, aa);
    ja.prototype.load = function (a) {
        this.clear();
        this.dispatchEvent({type: "start", url: a});
        this.xhr = new XMLHttpRequest;
        this.xhr.open("GET", a, !0);
        this.xhr.addEventListener("load", this.xhrOnLoadListener, !1);
        this.xhr.addEventListener("progress",
            this.xhrOnProgressListener, !1);
        this.xhr.addEventListener("error", this.xhrOnErrorListener, !1);
        this.xhr.overrideMimeType && this.xhr.overrideMimeType("text/plain");
        this.xhr.send(null)
    };
    ja.prototype.loadFile = function (a) {
        this.clear();
        null === this.fileReader && (this.fileReader = new FileReader, this.fileReader.addEventListener("loadend", this.fileReaderOnLoadEndListener, !1));
        this.dispatchEvent({type: "start", url: a.name});
        this.fileReader.readAsText(a)
    };
    ja.prototype.clear = function () {
        null !== this.xhr && (this.xhr.removeEventListener("load",
            this.xhrOnLoadListener), this.xhr.removeEventListener("progress", this.xhrOnProgressListener), this.xhr.removeEventListener("error", this.xhrOnErrorListener), this.xhr.abort(), this.xhr = null)
    };
    ja.prototype.xhrOnLoad = function (a) {
        200 === a.target.status || 0 === a.target.status ? this.createPlaylist(a.target.response) : this.dispatchEvent({
            type: "error",
            msg: this.getXHRErrorMessage()
        })
    };
    ja.prototype.fileReaderOnLoadEnd = function (a) {
        a.target.readyState == FileReader.DONE ? this.createPlaylist(a.target.result) : (this.clear(),
            this.dispatchEvent({type: "error", msg: "ERROR: Loading file failed!"}))
    };
    ja.prototype.xhrOnProgress = function (a) {
        this.dispatchEvent({type: "progress", total: a.total, loaded: a.loaded})
    };
    ja.prototype.xhrOnError = function (a) {
        this.dispatchEvent({type: "error", msg: this.getXHRErrorMessage()})
    };
    ja.prototype.createPlaylist = function (a) {
        a = X.fromJSONString(a);
        this.clear();
        null !== a ? this.dispatchEvent({type: "finished", list: a}) : this.dispatchEvent({type: "error", msg: "ERROR while parsing Playlist data!"})
    };
    ja.prototype.getXHRErrorMessage =
        function () {
            var a = "No active XMLHttpRequest to check for an error!";
            null !== this.xhr && ((a = this.xhr.statusText) && "" !== a || (a = "Unknown reason!"));
            this.clear();
            return a
        };
    var u = function () {
    };
    u.createFieldLinesGeometry = function (a, b, c, d, e) {
        var g = b.x / 2, m = b.y / 2, f = a / 2, k = d.y / 2, l = 0, r = new THREE.Matrix4, p = function (K, M, ma) {
            ma ? r.makeRotationZ(ma) : r.identity();
            r.elements[12] = K;
            r.elements[13] = M;
            y.merge(w, r)
        };
        l = c;
        var y = new THREE.RingGeometry(l - f, l + f, 64, 1), w = new THREE.PlaneGeometry(a, b.y);
        p(-g, 0);
        p(g, 0);
        p(0, 0);
        w = new THREE.PlaneGeometry(b.x +
            a, a);
        p(0, -m);
        p(0, m);
        l = b.x / 105;
        w = new THREE.RingGeometry(l - f, l + f, 8, 1, 0, Math.PI / 2);
        p(-g, -m);
        p(g, -m, Math.PI / 2);
        p(g, m, Math.PI);
        p(-g, m, -Math.PI / 2);
        w = new THREE.CircleGeometry(1.2 * a, 16);
        p(0, 0);
        null !== e && (b = e.y / 2, l = g - e.z, p(-l, 0), p(l, 0), w = new THREE.PlaneGeometry(a, e.y + a), l = g - e.x, p(-l, 0), p(l, 0), w = new THREE.PlaneGeometry(e.x, a), l = g - e.x / 2, p(-l, -b), p(l, -b), p(-l, b), p(l, b), b = Math.acos((e.x - e.z) / c), w = new THREE.RingGeometry(c - f, c + f, 32, 1, b, -2 * b), l = g - e.z, p(-l, 0), p(l, 0, Math.PI));
        w = new THREE.PlaneGeometry(a, d.y + a);
        l = g -
            d.x;
        p(-l, 0);
        p(l, 0);
        w = new THREE.PlaneGeometry(d.x, a);
        l = g - d.x / 2;
        p(-l, -k);
        p(l, -k);
        p(-l, k);
        p(l, k);
        a = new THREE.BufferGeometry;
        a.name = "fieldLinesGeo";
        a.fromGeometry(y);
        return a
    };
    u.createHockeyGoalGeometry = function (a, b) {
        var c = new THREE.Matrix4, d = function (l, r, p, y, w) {
            y ? w ? c.makeRotationY(y) : c.makeRotationX(y) : c.identity();
            c.elements[12] = l;
            c.elements[13] = r;
            c.elements[14] = p;
            f.merge(k, c)
        }, e = a / 2, g = a + b.y / 2, m = (e + b.z) / 2, f = new THREE.Geometry, k = new THREE.CylinderGeometry(a, a, b.z + e, 16);
        d(a, g, m, -Math.PI / 2);
        d(a, -g, m, -Math.PI /
            2);
        k = new THREE.CylinderGeometry(e, e, 2 * g, 8);
        d(a, 0, b.z);
        a = Math.atan(.5 * b.z / b.x);
        k = new THREE.CylinderGeometry(e, e, 2 * g, 8, 1, !1, -.5 * Math.PI, a);
        d(b.x, 0, 0);
        k = new THREE.PlaneGeometry(e, 2 * g);
        d(b.x - e / 2, 0, 0);
        d(b.x - Math.cos(a) * e / 2, 0, Math.sin(a) * e / 2, a, !0);
        e = new THREE.Shape;
        e.moveTo(0, 0);
        e.lineTo(b.x, 0);
        e.lineTo(0, b.z / 2);
        e.lineTo(0, 0);
        k = new THREE.ShapeGeometry(e);
        d(0, g, 0, Math.PI / 2);
        d(0, -g, 0, Math.PI / 2);
        b = new THREE.BufferGeometry;
        b.name = "goalGeo";
        b.fromGeometry(f);
        return b
    };
    u.createHockeyGoalSideNetGeometry = function () {
        var a =
            new THREE.Geometry, b = new THREE.Shape;
        b.moveTo(0, 0);
        b.lineTo(1, 0);
        b.lineTo(0, 1);
        b.lineTo(0, 0);
        b = new THREE.ShapeGeometry(b);
        var c = new THREE.Matrix4;
        c.makeRotationX(Math.PI / 2);
        c.elements[13] = .5;
        a.merge(b, c);
        c.elements[13] = -.5;
        a.merge(b, c);
        b = new THREE.BufferGeometry;
        b.name = "goalNetSidesGeo";
        b.fromGeometry(a);
        return b
    };
    u.loadTexture = function (a) {
        null === ob && (ob = new THREE.TextureLoader);
        return ob.load("textures/" + a)
    };
    u.loadObject = function (a, b, c, d) {
        null === pb && (pb = new THREE.ObjectLoader);
        pb.load("models/" +
            a, b, c, function (e) {
            console.error('Error loading object "' + a + '": ' + e.statusText);
            void 0 !== d && d(e)
        })
    };
    u.createStdPhongMat = function (a, b, c) {
        var d = null;
        void 0 !== c && (d = "string" === typeof c ? u.loadTexture(c) : c);
        return new THREE.MeshPhongMaterial({name: a, color: b, specular: 8355711, emissive: 0, shininess: 49, map: d})
    };
    u.createStdNumberMat = function (a, b, c, d) {
        return u.createStdPhongMat(a, b)
    };
    u.offsetMaterial = function (a, b, c) {
        a.depthTest = !0;
        a.polygonOffset = !0;
        a.polygonOffsetFactor = b || -1;
        a.polygonOffsetUnits = c || -.1
    };
    u.createMesh =
        function (a, b, c, d) {
            b = new THREE.Mesh(b, c);
            b.name = a;
            b.receiveShadow = !0;
            b.castShadow = !0;
            d && (b.rotation.x = -Math.PI / 2);
            return b
        };
    u.createMeshAt = function (a, b, c, d, e, g, m) {
        a = u.createMesh(a, b, c, m);
        a.position.set(d, e, g);
        return a
    };
    u.createSelectionMesh = function (a, b) {
        a = new THREE.Mesh(new THREE.RingBufferGeometry(a - b, a + b, 16, 1), Db);
        a.name = "selectionCircle";
        a.visible = !1;
        a.receiveShadow = !1;
        a.castShadow = !1;
        a.rotation.x = -Math.PI / 2;
        return a
    };
    u.createDummyMesh = function () {
        var a = new THREE.Mesh(Tb, Ub);
        a.name = "placeholder";
        a.receiveShadow = !1;
        a.castShadow = !1;
        return a
    };
    u.createSkyBoxMaterial = function () {
        var a = u.loadTexture("sky_posx.jpg"), b = u.loadTexture("sky_negy.jpg"), c = u.loadTexture("sky_posy.jpg"),
            d = u.loadTexture("sky_negz.jpg"), e = u.loadTexture("sky_posz.jpg"), g = u.loadTexture("sky_negx.jpg");
        return [new THREE.MeshBasicMaterial({map: a, side: THREE.BackSide}), new THREE.MeshBasicMaterial({
            map: b,
            side: THREE.BackSide
        }), new THREE.MeshBasicMaterial({map: c, side: THREE.BackSide}), new THREE.MeshBasicMaterial({map: d, side: THREE.BackSide}),
            new THREE.MeshBasicMaterial({map: e, side: THREE.BackSide}), new THREE.MeshBasicMaterial({map: g, side: THREE.BackSide})]
    };
    u.createSkyBox = function (a) {
        var b = u.createSkyBoxMaterial();
        a = new THREE.BoxBufferGeometry(a, a, a);
        b = new THREE.Mesh(a, b);
        b.name = "skyBox";
        return b
    };
    u.createSimpleBall = function (a) {
        a = new THREE.SphereBufferGeometry(a, 16, 16);
        a.name = "ballGeo";
        var b = u.createStdPhongMat("ballMat", 16777215);
        return u.createMesh("ballSphere", a, b)
    };
    u.addFieldPlane = function (a, b, c, d) {
        var e, g = function (p, y, w, K) {
            e = new THREE.Mesh(f,
                l);
            e.name = p;
            e.position.set(y, w, K);
            e.rotation.x = -Math.PI / 2;
            e.receiveShadow = !0;
            e.castShadow = !1;
            a.add(e)
        }, m = Math.floor((b + 1.99) / 2), f = new THREE.PlaneBufferGeometry(2 * m, c), k = u.loadTexture("field.png");
        k.wrapS = THREE.RepeatWrapping;
        k.wrapT = THREE.RepeatWrapping;
        null !== d ? k.repeat.set(d, c * d / b) : k.repeat.set(m, c);
        var l = new THREE.MeshPhongMaterial({name: "fieldMat", color: 13421772, map: k});
        g("fieldPlane", 0, 0, 0);
        m = b / 2;
        d = c / 2;
        var r = b / 12;
        f = new THREE.PlaneBufferGeometry(b + 2 * r, r);
        k = u.loadTexture("field_border.png");
        k.wrapS =
            THREE.RepeatWrapping;
        k.wrapT = THREE.RepeatWrapping;
        k.repeat.set(b + 2 * r, r);
        l = new THREE.MeshPhongMaterial({name: "tbBorderMat", color: 11180458, map: k});
        g("topBorder", 0, 0, -d - r / 2);
        g("bottomBorder", 0, 0, d + r / 2);
        k = u.loadTexture("field_border.png");
        k.wrapS = THREE.RepeatWrapping;
        k.wrapT = THREE.RepeatWrapping;
        k.repeat.set(r, c);
        l = new THREE.MeshPhongMaterial({name: "lrBorderMat", color: 11180458, map: k});
        u.offsetMaterial(l, -.5, -.05);
        f = new THREE.PlaneBufferGeometry(r, c);
        g("leftBorder", -m - r / 2, 0, 0);
        g("rightBorder", m + r / 2, 0,
            0)
    };
    u.addFieldLines = function (a, b, c, d, e, g) {
        var m, f = 0, k = new THREE.MeshBasicMaterial({color: 15658734, side: THREE.DoubleSide});
        u.offsetMaterial(k, -1, -.1);
        var l = function (K, M, ma, Fa, W) {
            m = new THREE.Mesh(w, k);
            m.name = K;
            m.position.set(M, ma, Fa);
            m.rotation.x = -Math.PI / 2;
            m.rotation.z = W ? W : 0;
            m.receiveShadow = !0;
            m.castShadow = !1;
            a.add(m)
        }, r = c.x / 2;
        f = c.y / 2;
        var p = b / 2, y = d, w = new THREE.RingBufferGeometry(y - p, y + p, 64, 1);
        l("centerCircle", 0, 0, 0);
        w = new THREE.PlaneBufferGeometry(c.x + b, b);
        l("topBorderLine", 0, 0, -f);
        l("btmBorderLine",
            0, 0, f);
        w = new THREE.PlaneBufferGeometry(b, c.y);
        l("leftBorderLine", -r, 0, 0);
        l("rightBorderLine", r, 0, 0);
        l("centerLine", 0, 0, 0);
        y = c.x / 105;
        w = new THREE.RingBufferGeometry(y - p, y + p, 8, 1, 0, Math.PI / 2);
        l("btmLeftCircle", -r, 0, f);
        l("btmRightCircle", r, 0, f, Math.PI / 2);
        l("topRightCircle", r, 0, -f, Math.PI);
        l("topLeftCircle", -r, 0, -f, -Math.PI / 2);
        w = new THREE.CircleBufferGeometry(1.2 * b, 16);
        l("centerSpot", 0, 0, 0);
        null !== g && (f = r - g.z, l("leftPenaltySpot", -f, 0, 0), l("rightPenaltySpot", f, 0, 0), c = g.y / 2, f = r - g.x, w = new THREE.PlaneBufferGeometry(b,
            g.y + b), l("leftPAFrontLine", -f, 0, 0), l("rightPAFrontLine", f, 0, 0), f = r - g.x / 2, w = new THREE.PlaneBufferGeometry(g.x, b), l("leftPATopLine", -f, 0, -c), l("leftPABtmLine", -f, 0, c), l("rightPABtmLine", f, 0, -c), l("rightPATopLine", f, 0, c), f = r - g.z, g = Math.acos((g.x - g.z) / d), w = new THREE.RingBufferGeometry(d - p, d + p, 32, 1, g, -2 * g), l("leftPAArc", -f, 0, 0), l("rightPAArc", f, 0, 0, Math.PI));
        d = e.y / 2;
        f = r - e.x;
        w = new THREE.PlaneBufferGeometry(b, e.y + b);
        l("leftGAFrontLine", -f, 0, 0);
        l("rightGAFrontLine", f, 0, 0);
        f = r - e.x / 2;
        w = new THREE.PlaneBufferGeometry(e.x,
            b);
        l("leftGATopLine", -f, 0, -d);
        l("leftGABtmLine", -f, 0, d);
        l("rightGATopLine", f, 0, -d);
        l("rightGABtmLine", f, 0, d)
    };
    u.createHockeyGoal = function (a, b, c, d) {
        var e, g = !0, m = new THREE.Object3D;
        m.name = a;
        a = function (K, M, ma, Fa, W, Vb) {
            e = new THREE.Mesh(p, M);
            e.name = K;
            e.position.set(ma, Fa, W);
            e.rotation.x = Vb ? 0 : -Math.PI / 2;
            e.receiveShadow = g;
            e.castShadow = g;
            m.add(e);
            return e
        };
        var f = b / 2, k = b + c.y / 2, l = (f + c.z) / 2;
        d = u.createStdPhongMat("goalMat", d);
        d.side = THREE.DoubleSide;
        var r = d.clone();
        u.offsetMaterial(r, -1, -.1);
        var p = new THREE.CylinderBufferGeometry(b,
            b, c.z + f, 16);
        a("leftPost", r, b, l, k, !0);
        a("rightPost", r, b, l, -k, !0);
        p = new THREE.CylinderBufferGeometry(f, f, 2 * k, 8);
        a("upperBar", d, b, c.z, 0);
        l = Math.atan(.5 * c.z / c.x);
        var y = new THREE.CylinderGeometry(f, f, 2 * k, 8, 1, !1, -.5 * Math.PI, l), w = new THREE.Matrix4;
        w.identity();
        w.elements[12] = -f / 2;
        y.merge(new THREE.PlaneGeometry(f, 2 * k), w);
        w.makeRotationY(l);
        w.elements[12] = -Math.cos(l) * f / 2;
        w.elements[14] = Math.sin(l) * f / 2;
        y.merge(new THREE.PlaneGeometry(f, 2 * k), w);
        p = new THREE.BufferGeometry;
        p.fromGeometry(y);
        a("bottomBar", r,
            c.x, 0, 0);
        f = new THREE.Shape;
        f.moveTo(0, 0);
        f.lineTo(c.x, 0);
        f.lineTo(0, c.z / 2);
        f.lineTo(0, 0);
        p = new THREE.BufferGeometry;
        p.fromGeometry(new THREE.ShapeGeometry(f));
        a("leftStand", d, 0, 0, k, !0);
        a("rightStand", d, 0, 0, -k, !0);
        g = !1;
        k = c.y + 2 * b - .02;
        d = c.x - b - .01;
        r = Math.sqrt(d * d + c.z * c.z);
        f = u.loadTexture("goalnet.png");
        f.wrapS = THREE.RepeatWrapping;
        f.wrapT = THREE.RepeatWrapping;
        f.repeat.set(d, c.z);
        l = u.createStdPhongMat("netSideMat", 16777215, f);
        l.side = THREE.DoubleSide;
        l.transparent = !0;
        f = u.loadTexture("goalnet.png");
        f.wrapS =
            THREE.RepeatWrapping;
        f.wrapT = THREE.RepeatWrapping;
        f.repeat.set(k, r);
        y = u.createStdPhongMat("netBackMat", 16777215, f);
        y.side = THREE.DoubleSide;
        y.transparent = !0;
        f = new THREE.Shape;
        f.moveTo(0, 0);
        f.lineTo(d, 0);
        f.lineTo(0, c.z);
        f.lineTo(0, 0);
        p = new THREE.BufferGeometry;
        p.fromGeometry(new THREE.ShapeGeometry(f));
        a("leftNet", l, b, 0, k / 2, !0);
        a("rightNet", l, b, 0, -k / 2, !0);
        p = new THREE.PlaneBufferGeometry(k, r);
        a("backNet", y, b + d / 2, c.z / 2, 0, !0);
        e.rotation.order = "ZYX";
        e.rotation.y = -Math.PI / 2;
        e.rotation.x = Math.PI / 2 - Math.atan(c.z /
            d);
        return m
    };
    u.addStdLighting = function (a, b, c) {
        a.add(new THREE.AmbientLight(15658734));
        var d = Math.ceil(.8 * c);
        b = Math.ceil(.7 * b);
        var e = new THREE.DirectionalLight(15658734, .4);
        e.position.set(300, 300, 500);
        e.castShadow = !0;
        e.shadow.mapSize.width = 2048;
        e.shadow.mapSize.height = 2048;
        e.shadow.camera.left = -b;
        e.shadow.camera.right = b;
        e.shadow.camera.top = d;
        e.shadow.camera.bottom = -d;
        e.shadow.camera.near = 655 - c;
        e.shadow.camera.far = 655 + c;
        a.add(e)
    };
    var ob = null, pb = null, Db = new THREE.MeshPhongMaterial({
        name: "selectionMat",
        color: 15658734, side: THREE.DoubleSide
    });
    u.offsetMaterial(Db, -1.5, -.15);
    var Tb = new THREE.BoxBufferGeometry(.1, .1, .1), Ub = new THREE.MeshPhongMaterial({name: "dummyMat", color: 0}), Ka = function (a) {
        this.objGroup = new THREE.Object3D;
        this.objGroup.name = a;
        this.objTwoDGroup = new THREE.Object3D;
        this.objTwoDGroup.name = a + "_2D";
        this.selectionObj = u.createSelectionMesh(.15, .02);
        this.objTwoDGroup.add(this.selectionObj)
    };
    Ka.prototype.setSelected = function (a) {
        this.selectionObj.visible = a
    };
    Ka.prototype.updateBodyPose = function (a,
                                            b, c) {
        c = void 0 === c ? 0 : c;
        void 0 !== b && b.isValid() && 0 < c ? 1 <= c ? (this.objGroup.position.set(b.x, b.y, b.z), this.objGroup.quaternion.set(b.qx, b.qy, b.qz, b.qw)) : (this.objGroup.position.lerpVectors(a.position, b.position, c), THREE.Quaternion.slerp(a.orientation, b.orientation, this.objGroup.quaternion, c)) : (this.objGroup.position.set(a.x, a.y, a.z), this.objGroup.quaternion.set(a.qx, a.qy, a.qz, a.qw));
        this.objTwoDGroup.position.x = this.objGroup.position.x;
        this.objTwoDGroup.position.z = this.objGroup.position.z;
        this.objGroup.updateMatrix();
        this.objTwoDGroup.updateMatrix()
    };
    var eb = function (a) {
        var b = Ka.call(this, "ball") || this;
        b.radius = void 0 !== a ? a : .2;
        b.objGroup.scale.setScalar(b.radius);
        return b
    };
    $jscomp.inherits(eb, Ka);
    eb.prototype.setRadius = function (a) {
        this.radius !== a && (this.radius = a, this.objGroup.scale.setScalar(this.radius))
    };
    eb.prototype.update = function (a, b, c) {
        this.updateBodyPose(a, b, c)
    };
    var qb = function (a, b, c, d, e) {
        this.objGroup = new THREE.Object3D;
        this.objGroup.name = "field";
        this.fieldDimensions = void 0 !== a ? a : new THREE.Vector2(105,
            68);
        this.centerRadius = void 0 !== b ? b : 9.15;
        this.goalDimensions = void 0 !== c ? c : new THREE.Vector3(1.2, 14.64, 1.5);
        this.goalAreaDimensions = void 0 !== d ? d : new THREE.Vector2(5.5, 18.32);
        this.penaltyAreaDimensions = void 0 !== e ? e : new THREE.Vector3(16.5, 40.3, 11);
        this.textureRepeat = 10;
        this.lineWidth = .15
    };
    qb.prototype.set = function (a, b) {
        if (a === T.TWOD) this.fieldDimensions = new THREE.Vector2(105, 68), this.centerRadius = 9.15, this.goalDimensions = new THREE.Vector3(1.2, 14.64, 1.5), this.goalAreaDimensions = new THREE.Vector2(5.5, 18.32),
            this.penaltyAreaDimensions = new THREE.Vector3(16.5, 40.3, 11), this.lineWidth = .15; else {
            a = b.getNumber(E.FIELD_LENGTH);
            var c = b.getNumber(E.FIELD_WIDTH);
            null !== a && null !== c ? this.fieldDimensions.set(a, c) : this.fieldDimensions.set(30, 20);
            a = b.getNumber(E.FREE_KICK_DISTANCE);
            this.centerRadius = null !== a ? a : 2;
            a = b.getNumber(E.GOAL_WIDTH);
            c = b.getNumber(E.GOAL_DEPTH);
            b = b.getNumber(E.GOAL_HEIGHT);
            null !== c && null !== a && null !== b ? this.goalDimensions.set(c, a, b) : this.goalDimensions.set(.6, 2.1, .8);
            this.penaltyAreaDimensions =
                null;
            15 > this.fieldDimensions.x ? (this.goalAreaDimensions.set(1.2, 4), this.lineWidth = .03) : (this.goalAreaDimensions.set(1.8, 6), this.lineWidth = .04)
        }
        this.textureRepeat = 50 < this.fieldDimensions.x ? 10 : null
    };
    qb.prototype.hasPenaltyArea = function () {
        return null !== this.penaltyAreaDimensions
    };
    var ta = function (a) {
        this.name = a;
        this.objGroup = new THREE.Object3D;
        this.objGroup.name = a;
        this.objGroup.visible = !1;
        this.jointGroups = [];
        this.teamMatList = []
    };
    ta.prototype.isValid = function () {
        return 0 < this.objGroup.children.length
    };
    ta.prototype.setActive = function (a) {
        this.objGroup.visible !== a && (this.objGroup.visible = a)
    };
    ta.prototype.isActive = function () {
        return this.objGroup.visible
    };
    ta.prototype.update = function (a, b, c, d, e) {
        e = void 0 === e ? 0 : e;
        var g = a, m;
        if (void 0 !== c && 0 < e) if (1 <= e) g = c; else for (g = [], m = Math.min(a.length, c.length); m--;) g[m] = e * (c[m] - a[m]) + a[m];
        for (m = Math.min(g.length, this.jointGroups.length); m--;) this.jointGroups[m].setRotationFromAxisAngle(this.jointGroups[m].jointAxis, g[m]), this.jointGroups[m].updateMatrix();
        this.updateData(b,
            d, e)
    };
    ta.prototype.updateData = function (a, b, c) {
    };
    ta.prototype.setTeamColor = function (a) {
        for (var b = this.teamMatList.length; b--;) {
            var c = this.teamMatList[b];
            c.color.copy(a);
            c.needsUpdate = !0
        }
    };
    var Sa = function (a) {
        var b = Ka.call(this, "agent_" + a.getSideLetter() + a.playerNo) || this;
        b.description = a;
        b.models = [];
        return b
    };
    $jscomp.inherits(Sa, Ka);
    Sa.prototype.update = function (a, b, c) {
        void 0 === a || !1 === a.isValid() ? this.objGroup.visible = !1 : (!1 === this.objGroup.visible && (this.objGroup.visible = !0), this.updateBodyPose(a, b,
            c), this.setActiveModel(a.modelIndex), void 0 !== this.models[a.modelIndex] && this.models[a.modelIndex].update(a.jointAngles, a.data, void 0 !== b ? b.jointAngles : void 0, void 0 !== b ? b.data : void 0, c))
    };
    Sa.prototype.setActiveModel = function (a) {
        if (void 0 !== this.models[a] && !this.models[a].isActive()) for (var b = this.models.length; b--;) this.models[b].setActive(b === a)
    };
    Sa.prototype.setTeamColor = function (a) {
        for (var b = this.models.length; b--;) this.models[b].setTeamColor(a)
    };
    var Ta = function (a, b) {
        this.description = a;
        this.objGroup =
            new THREE.Object3D;
        this.objGroup.name = -1 === a.side ? "leftTeam" : "rightTeam";
        this.color = a.color;
        this.agents = void 0 !== b ? b : [];
        for (a = this.agents.length; a--;) this.objGroup.add(this.agents[a].objGroup)
    };
    Ta.prototype.set = function (a) {
        this.description = a;
        this.color = a.color;
        this.agents = [];
        for (a = this.objGroup.children[0]; a;) this.objGroup.remove(a), a = this.objGroup.children[0]
    };
    Ta.prototype.update = function (a, b, c) {
        for (var d = this.agents.length; d--;) {
            var e = this.agents[d].description.playerNo;
            this.agents[d].update(a[e],
                b[e], c)
        }
    };
    Ta.prototype.setColor = function (a) {
        a = void 0 === a ? this.description.color : a;
        if (!this.color.equals(a)) for (this.color = a, a = this.agents.length; a--;) this.agents[a].setTeamColor(this.color)
    };
    var fb = function () {
    };
    fb.prototype.createModel = function (a, b, c, d, e) {
    };
    fb.prototype.dispose = function () {
    };
    var gb = function () {
    };
    gb.prototype.createGeometry = function (a, b, c) {
    };
    var Ua = function () {
    };
    Ua.prototype.createMaterial = function (a) {
    };
    var La = function (a, b) {
        this.geometryFactory = a;
        this.materialFactory = b;
        this.geometryCache =
            {};
        this.materialCache = {};
        this.receiveShadow = this.castShadow = !0
    };
    La.prototype.clearCache = function () {
        this.geometryCache = {};
        this.materialCache = {}
    };
    La.prototype.createMesh = function (a, b, c, d, e) {
        var g = a + "Geo", m = this.fetchMaterial(b);
        if (void 0 !== this.geometryCache[g]) b = new THREE.Mesh(this.geometryCache[g], m), b.name = a, b.castShadow = this.castShadow, b.receiveShadow = this.receiveShadow, b.applyMatrix(c), d(b); else {
            var f = this;
            this.geometryFactory.createGeometry(g, function (k) {
                f.geometryCache[g] = k;
                k = new THREE.Mesh(k,
                    m);
                k.name = a;
                k.castShadow = f.castShadow;
                k.receiveShadow = f.receiveShadow;
                k.applyMatrix(c);
                d(k)
            }, e)
        }
    };
    La.prototype.createDummyMesh = function () {
        return u.createDummyMesh()
    };
    La.prototype.fetchMaterial = function (a) {
        var b = this.materialCache[a];
        void 0 === b && (b = this.materialFactory.createMaterial(a), this.materialCache[a] = b);
        return b
    };
    var z = function (a, b, c) {
        this.name = a;
        this.material = b;
        this.matrix = void 0 !== c ? c : new THREE.Matrix4
    }, F = function (a, b, c, d, e) {
        this.name = a;
        this.meshes = b;
        this.translation = c;
        this.jointAxis = d;
        this.children =
            e
    }, hb = function (a, b, c, d) {
        this.name = a;
        this.teamMaterialNames = void 0 !== b ? b : [];
        this.meshes = void 0 !== c ? c : [];
        this.children = void 0 !== d ? d : []
    }, Ma = function (a, b, c) {
        a = ta.call(this, a) || this;
        a.createModel(b, c);
        return a
    };
    $jscomp.inherits(Ma, ta);
    Ma.prototype.createModel = function (a, b) {
        var c = 0, d = new THREE.Object3D;
        d.name = a.name;
        this.objGroup.add(d);
        if (0 < a.meshes.length) {
            var e = b.createDummyMesh();
            d.add(e);
            var g = function () {
                return function (m) {
                    d.remove(e);
                    d.add(m)
                }
            }();
            for (c = a.meshes.length; c--;) b.createMesh(a.meshes[c].name,
                a.meshes[c].material, a.meshes[c].matrix, g)
        }
        for (c = 0; c < a.children.length; ++c) d.add(this.createBodyParts(a.children[c], b));
        for (c = a.teamMaterialNames.length; c--;) g = b.materialCache[a.teamMaterialNames[c]], void 0 !== g && this.teamMatList.push(g)
    };
    Ma.prototype.createBodyParts = function (a, b) {
        var c = 0, d = new THREE.Object3D;
        d.name = a.name;
        this.jointGroups.push(d);
        d.position.copy(a.translation);
        d.jointAxis = a.jointAxis;
        if (0 < a.meshes.length) {
            var e = u.createDummyMesh();
            d.add(e);
            var g = function () {
                return function (m) {
                    d.remove(e);
                    d.add(m)
                }
            }();
            for (c = a.meshes.length; c--;) b.createMesh(a.meshes[c].name, a.meshes[c].material, a.meshes[c].matrix, g)
        }
        for (c = 0; c < a.children.length; ++c) d.add(this.createBodyParts(a.children[c], b));
        return d
    };
    var Wb = function (a, b, c) {
        this.name = a;
        this.onLoad = b;
        this.onError = c
    }, Va = function (a) {
        this.resourceFile = a;
        this.geometries = [];
        this.requestCache = [];
        this.loaded = this.loading = !1;
        return this
    };
    $jscomp.inherits(Va, gb);
    Va.prototype.loadJSON = function () {
        if (!this.loaded && !this.loading) {
            this.loading = !0;
            var a = this;
            (new THREE.FileLoader).load(this.resourceFile,
                function (b) {
                    b = (new THREE.ObjectLoader).parseGeometries(JSON.parse(b));
                    for (var c in b) {
                        var d = b[c];
                        if (void 0 !== d.isGeometry && !0 === d.isGeometry) {
                            var e = new THREE.BufferGeometry;
                            e.fromGeometry(d);
                            e.name = d.name;
                            a.geometries.push(e);
                            d.dispose()
                        } else void 0 !== d.isBufferGeometry && !0 === d.isBufferGeometry && a.geometries.push(d)
                    }
                    a.loaded = !0;
                    a.loading = !1;
                    a.serveCachedRequests()
                }, void 0, function (b) {
                    a.loaded = !0;
                    a.loading = !1;
                    a.serveCachedRequests();
                    console.error('Failed to load GeometryFactory resource file: "' + a.resourceFile +
                        '"!')
                })
        }
    };
    Va.prototype.serveCachedRequests = function () {
        for (var a = this.requestCache.length, b; a--;) b = this.requestCache[a], this.createGeometry(b.name, b.onLoad, b.onError);
        this.requestCache.length = 0
    };
    Va.prototype.createGeometry = function (a, b, c) {
        if (this.loaded) {
            for (var d = this.geometries.length; d--;) if (this.geometries[d].name === a) {
                b(this.geometries[d]);
                return
            }
            console.log('Geometry "' + a + '" not found!');
            c && c('Geometry "' + a + '" not found!')
        } else this.loading || this.loadJSON(), this.requestCache.push(new Wb(a, b,
            c))
    };
    var Wa = function (a, b, c) {
        var d = hb.call(this, "torso") || this;
        c = "num" + c;
        var e = ua.NAO_WHITE, g = ua.NAO_BLACK, m = ua.NAO_GREY;
        a = -1 === a ? ua.NAO_TEAM_LEFT : ua.NAO_TEAM_RIGHT;
        d.teamMaterialNames.push(a);
        var f = v.mM4(0, 0, .1, 0, 0, .1, 0, 0, -.1, 0, 0, 0), k = v.mM4(0, .07, 0, .02, 0, 0, .07, 0, .07, 0, 0, -.01),
            l = v.mM4(0, .07, 0, .02, 0, 0, .07, 0, .07, 0, 0, .01), r = v.mM4(0, .05, 0, .05, 0, 0, .05, 0, .05, 0, 0, 0),
            p = v.mM4(0, .07, 0, .01, 0, 0, .07, -.04, .07, 0, 0, 0), y = v.mM4(0, .08, 0, -.005, 0, 0, .08, -.055, .08, 0, 0, 0),
            w = v.mM4(0, .08, 0, .03, 0, 0, .08, -.04, .08, 0, 0, 0);
        d.meshes.push(new z("nao_torso_coreBody",
            e, f));
        d.meshes.push(new z("nao_torso_coreInner", g, f));
        d.meshes.push(new z("nao_torso_chestButton", a, f));
        d.meshes.push(new z("nao_torso_chestBow", a, f));
        d.meshes.push(new z("nao_torso_numberBatch", c, f));
        d.meshes.push(new z("nao_torso_lCollar", e, v.mM4(0, 0, -.1, 0, 0, .1, 0, 0, .1, 0, 0, 0)));
        d.meshes.push(new z("nao_torso_rCollar", e, f));
        d.children.push(new F("neck", [], new THREE.Vector3(0, .09, 0), v.Vector3_UnitY(), [new F("head", [new z("nao_head_core", e, f), new z("nao_head_ears", m, f), new z("nao_head_teamMarker", a,
            f), new z("nao_head_camera", g, f)], new THREE.Vector3(0, .06, 0), v.Vector3_UnitZ(), [])]));
        d.children.push(new F("rShoulder", [], new THREE.Vector3(0, .075, .098), v.Vector3_UnitZ(), [new F("rUpperArm", [new z("nao_rUpperArm_cylinder", g, l), new z("nao_rUpperArm_protector", e, l), new z("nao_rUpperArm_teamMarker", a, l)], v.Vector3_Zero(), v.Vector3_UnitY(), [new F("rElbow", [], new THREE.Vector3(.09, .009, 0), v.Vector3_UnitX(), [new F("rLowerArm", [new z("nao_rLowerArm_core", e, r), new z("nao_rLowerArm_teamMarker", a, r)], v.Vector3_Zero(),
            v.Vector3_UnitY(), [])])])]));
        d.children.push(new F("lShoulder", [], new THREE.Vector3(0, .075, -.098), v.Vector3_UnitZ(), [new F("lUpperArm", [new z("nao_lUpperArm_cylinder", g, k), new z("nao_lUpperArm_protector", e, k), new z("nao_lUpperArm_teamMarker", a, k)], v.Vector3_Zero(), v.Vector3_UnitY(), [new F("lElbow", [], new THREE.Vector3(.09, .009, 0), v.Vector3_UnitX(), [new F("lLowerArm", [new z("nao_lLowerArm_core", e, r), new z("nao_lLowerArm_teamMarker", a, r)], v.Vector3_Zero(), v.Vector3_UnitY(), [])])])]));
        d.children.push(new F("rHip1",
            [], new THREE.Vector3(-.01, -.115, .055), new THREE.Vector3(0, .7071, -.7071), [new F("rHip2", [], v.Vector3_Zero(), v.Vector3_UnitX(), [new F("rThigh", [new z("nao_rThigh_core", e, p), new z("nao_rThigh_teamMarker", a, p), new z("nao_rThigh_noMarker", c, p)], v.Vector3_Zero(), v.Vector3_UnitZ(), [new F("rShank", [new z("nao_rShank_coreInner", g, y), new z("nao_rShank_coreBody", e, y), new z("nao_rShank_teamMarker", a, y)], new THREE.Vector3(.005, -.12, 0), v.Vector3_UnitZ(), [new F("rAnkle", [], new THREE.Vector3(0, -.1, 0), v.Vector3_UnitZ(),
                [new F("rFoot", [new z("nao_rFoot_core", e, w), new z("nao_rFoot_teamMarker", a, w)], v.Vector3_Zero(), v.Vector3_UnitX(), [])])])])])]));
        d.children.push(new F("lHip1", [], new THREE.Vector3(-.01, -.115, -.055), new THREE.Vector3(0, -.7071, -.7071), [new F("lHip2", [], v.Vector3_Zero(), v.Vector3_UnitX(), [new F("lThigh", [new z("nao_lThigh_core", e, p), new z("nao_lThigh_teamMarker", a, p)], v.Vector3_Zero(), v.Vector3_UnitZ(), [new F("lShank", [new z("nao_lShank_coreInner", g, y), new z("nao_lShank_coreBody", e, y), new z("nao_lShank_teamMarker",
            a, y)], new THREE.Vector3(.005, -.12, 0), v.Vector3_UnitZ(), [new F("lAnkle", [], new THREE.Vector3(0, -.1, 0), v.Vector3_UnitZ(), [new F("lFoot", [new z("nao_lFoot_core", e, w), new z("nao_lFoot_teamMarker", a, w)], v.Vector3_Zero(), v.Vector3_UnitX(), [])])])])])]));
        d.type = void 0 !== b ? b : 0;
        switch (d.type) {
            case 4:
                d.applyType4Modifications();
                break;
            case 3:
                d.applyType3Modifications();
                break;
            case 1:
                d.applyType1Modifications()
        }
        return d
    };
    $jscomp.inherits(Wa, hb);
    Wa.prototype.applyType1Modifications = function () {
        var a = this.children[2].children[0].children[0];
        this.children[1].children[0].children[0].translation.x = .12664;
        a.translation.x = .12664;
        a = this.children[3].children[0].children[0].children[0];
        var b = this.children[4].children[0].children[0].children[0];
        a.translation.y = -.13832;
        b.translation.y = -.13832;
        b = b.children[0];
        a.children[0].translation.y = -.11832;
        b.translation.y = -.11832
    };
    Wa.prototype.applyType3Modifications = function () {
        var a = this.children[2].children[0].children[0];
        this.children[1].children[0].children[0].translation.x = .145736848;
        a.translation.x =
            .145736848;
        var b = this.children[3];
        a = this.children[4];
        b.translation.z = .072954143;
        a.translation.z = -.072954143;
        a = a.children[0].children[0].children[0];
        b = b.children[0].children[0].children[0];
        a.translation.y = -.147868424;
        b.translation.y = -.147868424;
        b = b.children[0];
        a.children[0].translation.y = -.127868424;
        b.translation.y = -.127868424
    };
    Wa.prototype.applyType4Modifications = function () {
        var a = this.children[4].children[0].children[0].children[0].children[0].children[0];
        this.children[3].children[0].children[0].children[0].children[0].children[0].children.push(new F("rToe",
            [], new THREE.Vector3(.06, -.04, 0), v.Vector3_UnitZ(), []));
        a.children.push(new F("lToe", [], new THREE.Vector3(.06, -.04, 0), v.Vector3_UnitZ(), []))
    };
    var ua = {NAO_WHITE: "naoWhite", NAO_BLACK: "naoBlack", NAO_GREY: "naoGrey", NAO_TEAM_LEFT: "teamLeft", NAO_TEAM_RIGHT: "teamRight"},
        rb = function () {
            return Ua.apply(this, arguments) || this
        };
    $jscomp.inherits(rb, Ua);
    rb.prototype.createMaterial = function (a) {
        if (a.startsWith("num")) {
            var b = 0;
            try {
                b = parseInt(a.slice(3), 10)
            } catch (c) {
            }
            return u.createStdNumberMat(a, 13421772, b)
        }
        switch (a) {
            case ua.NAO_BLACK:
                return u.createStdPhongMat(a,
                    0);
            case ua.NAO_GREY:
                return u.createStdPhongMat(a, 4013373);
            case ua.NAO_WHITE:
                return u.createStdPhongMat(a, 13421772);
            default:
                return u.createStdPhongMat(a, 4013373)
        }
    };
    var ib = function () {
        this.meshFactory = new La(new Va("models/nao_bundle.json"), new rb);
        return this
    };
    $jscomp.inherits(ib, fb);
    ib.prototype.createModel = function (a, b, c, d, e) {
        d = a.getString(cb.MODEL_NAME);
        return null !== d && "nao" === d.slice(0, 3) ? (a = a.getNumber(cb.MODEL_TYPE), null === a && (a = 0), b = new Wa(b, a, c), new Ma("nao_hetero", b, this.meshFactory)) : null
    };
    ib.prototype.dispose = function () {
    };
    var Eb = function (a, b) {
        var c = hb.call(this, "torso") || this;
        b = "stamina_" + ab.getSideLetter(a) + b;
        a = -1 === a ? "teamLeft" : "teamRight";
        c.teamMaterialNames.push(a);
        var d = v.mM4(1, 0, 0, 0, 0, 1, 0, .3, 0, 0, 1, 0), e = v.mM4(1, 0, 0, 0, 0, .2, 0, .6, 0, 0, 1, 0),
            g = v.mM4(-1, 0, 0, 0, 0, .2, 0, .6, 0, 0, -1, 0), m = v.mM4(1, 0, 0, .25, 0, 1, 0, 0, 0, 0, 1, 0);
        c.staminaMaterialNames = [b];
        c.meshes.push(new z("bodyCylinder", "sbBlack", d));
        c.meshes.push(new z("bodyTeamSphere", a, e));
        c.meshes.push(new z("bodyStaminaSphere", b, g));
        c.children.push(new F("head",
            [new z("headCylinder", "sbBlue"), new z("headNoseBox", "sbBlue", m)], new THREE.Vector3(0, .651, 0), v.Vector3_UnitY(), []));
        return c
    };
    $jscomp.inherits(Eb, hb);
    var sb = function () {
        return Ua.apply(this, arguments) || this
    };
    $jscomp.inherits(sb, Ua);
    sb.prototype.createMaterial = function (a) {
        switch (a) {
            case "sbBlue":
                return u.createStdPhongMat(a, 4454);
            case "sbBlack":
                return u.createStdPhongMat(a, 0);
            default:
                return u.createStdPhongMat(a, 1118481)
        }
    };
    var tb = function () {
        return gb.apply(this, arguments) || this
    };
    $jscomp.inherits(tb,
        gb);
    tb.prototype.createGeometry = function (a, b, c) {
        switch (a) {
            case "bodyCylinderGeo":
                b(new THREE.CylinderBufferGeometry(.5, .5, .6, 32));
                break;
            case "bodyTeamSphereGeo":
                b(new THREE.SphereBufferGeometry(.44, 16, 4, Math.PI / 2, Math.PI, 0, Math.PI / 2));
                break;
            case "bodyStaminaSphereGeo":
                b(new THREE.SphereBufferGeometry(.44, 16, 4, Math.PI / 2, Math.PI, 0, Math.PI / 2));
                break;
            case "headCylinderGeo":
                b(new THREE.CylinderBufferGeometry(.1, .1, .1, 16));
                break;
            case "headNoseBoxGeo":
                b(new THREE.BoxBufferGeometry(.5, .1, .1));
                break;
            default:
                console.log('Geometry "' +
                    a + '" not found!'), c && c('Geometry "' + a + '" not found!')
        }
    };
    var ub = function (a, b, c, d) {
        a = Ma.call(this, a, b, c) || this;
        a.staminaMatList = [];
        a.maxStamina = 8E3;
        d = d.getNumber(mb.STAMINA_MAX);
        null !== d && (a.maxStamina = d);
        for (d = b.staminaMaterialNames.length; d--;) {
            var e = c.materialCache[b.staminaMaterialNames[d]];
            void 0 !== e && a.staminaMatList.push(e)
        }
        return a
    };
    $jscomp.inherits(ub, Ma);
    ub.prototype.updateData = function (a, b, c) {
        if (void 0 !== a[G.STAMINA]) for (a = void 0 === b ? a[G.STAMINA] : a[G.STAMINA] + (b[G.STAMINA] - a[G.STAMINA]) *
            (void 0 === c ? 0 : c), a = THREE.Math.clamp(a, 0, this.maxStamina), a = (this.maxStamina - a) / this.maxStamina, b = this.staminaMatList.length; b--;) {
            c = this.staminaMatList[b];
            if (c.color.r === a) break;
            c.color.setScalar(a);
            c.needsUpdate = !0
        }
    };
    var jb = function () {
        this.meshFactory = new La(new tb, new sb);
        return this
    };
    $jscomp.inherits(jb, fb);
    jb.prototype.createModel = function (a, b, c, d, e) {
        a = new Eb(b, c);
        return new ub("SoccerBot2D", a, this.meshFactory, d)
    };
    jb.prototype.dispose = function () {
    };
    var pa = function () {
        this.geometryCache = {};
        this.materialCache =
            {}
    };
    pa.prototype.dispose = function () {
    };
    pa.prototype.createScene = function (a) {
        var b = this.fetchGeometry("skyBoxGeo"), c = this.fetchMaterial("skyBoxMat");
        b = new THREE.Mesh(b, c);
        b.name = "skyBox";
        a.add(b);
        b = new THREE.AmbientLight(15658734);
        b.name = "ambient";
        a.add(b);
        b = new THREE.DirectionalLight(15658734, .4);
        b.name = "sun";
        b.position.set(300, 300, 500);
        b.castShadow = !0;
        b.shadow.mapSize.width = 2048;
        b.shadow.mapSize.height = 2048;
        a.add(b)
    };
    pa.prototype.updateScene = function (a, b) {
        a = a.getObjectByName("sun");
        if (a instanceof
            THREE.DirectionalLight) {
            var c = Math.ceil(.8 * b.y), d = Math.ceil(.7 * b.x);
            b = b.y;
            a.shadow.camera.left = -d;
            a.shadow.camera.right = d;
            a.shadow.camera.top = c;
            a.shadow.camera.bottom = -c;
            a.shadow.camera.near = 655 - b;
            a.shadow.camera.far = 655 + b;
            a.shadow.camera.updateProjectionMatrix()
        }
    };
    pa.prototype.updateField = function (a) {
        var b = a.fieldDimensions, c, d = this, e = function (l, r, p) {
                r = d.fetchMaterial(r);
                p && (k = d.fetchGeometry(p));
                c = new THREE.Mesh(k, r);
                c.name = l;
                c.rotation.x = -Math.PI / 2;
                c.receiveShadow = !0;
                c.castShadow = !1;
                a.objGroup.add(c)
            },
            g = Math.floor((b.x + 1.99) / 2);
        (c = a.objGroup.getObjectByName("fieldPlane")) || e("fieldPlane", "grassMat", "planeGeo");
        c.scale.set(2 * g, b.y, 1);
        null !== a.textureRepeat ? c.material.map.repeat.set(a.textureRepeat, a.textureRepeat * b.y / b.x) : c.material.map.repeat.set(g, b.y);
        c.material.needsUpdate = !0;
        g = b.x / 2;
        var m = b.y / 2, f = b.x / 12;
        (c = a.objGroup.getObjectByName("fieldBorderTop")) || e("fieldBorderTop", "tbBorderMat", "planeGeo");
        c.scale.set(b.x + 2 * f, f, 1);
        c.position.set(0, 0, -m - f / 2);
        c.material.map.repeat.set(b.x + 2 * f, f);
        c.material.needsUpdate =
            !0;
        (c = a.objGroup.getObjectByName("fieldBorderBottom")) || e("fieldBorderBottom", "tbBorderMat", "planeGeo");
        c.scale.set(b.x + 2 * f, f, 1);
        c.position.set(0, 0, m + f / 2);
        c.material.map.repeat.set(b.x + 2 * f, f);
        c.material.needsUpdate = !0;
        (c = a.objGroup.getObjectByName("fieldBorderLeft")) || e("fieldBorderLeft", "lrBorderMat", "planeGeo");
        c.scale.set(f, b.y, 1);
        c.position.set(-g - f / 2, 0, 0);
        c.material.map.repeat.set(f, b.y);
        c.material.needsUpdate = !0;
        (c = a.objGroup.getObjectByName("fieldBorderRight")) || e("fieldBorderRight", "lrBorderMat",
            "planeGeo");
        c.scale.set(f, b.y, 1);
        c.position.set(g + f / 2, 0, 0);
        c.material.map.repeat.set(f, b.y);
        c.material.needsUpdate = !0;
        if (c = a.objGroup.getObjectByName("fieldLines")) a.objGroup.remove(c), c.geometry.dispose();
        var k = u.createFieldLinesGeometry(a.lineWidth, a.fieldDimensions, a.centerRadius, a.goalAreaDimensions, a.penaltyAreaDimensions);
        e("fieldLines", "lineMat");
        this.updateGoals(a)
    };
    pa.prototype.updateGoals = function (a) {
        var b = a.goalDimensions, c, d = b.y + 2 * a.lineWidth - .02, e = b.x - a.lineWidth - .01, g = Math.sqrt(e * e +
            b.z * b.z), m = function (p, y) {
            c = new THREE.Mesh(l, r);
            c.name = p;
            c.rotation.x = -Math.PI / 2;
            c.receiveShadow = y;
            c.castShadow = y;
            k.add(c)
        }, f = u.createHockeyGoalGeometry(a.lineWidth, a.goalDimensions);
        var k = a.objGroup.getObjectByName("leftGoal");
        k || (k = new THREE.Object3D, k.name = "leftGoal", k.rotation.y = Math.PI, a.objGroup.add(k));
        k.position.x = -a.fieldDimensions.x / 2;
        if (c = k.getObjectByName("goalSkeleton")) k.remove(c), c.geometry.dispose();
        var l = f;
        var r = this.fetchMaterial("leftGoalMat");
        m("goalSkeleton", !0);
        c = k.getObjectByName("goalNetSides");
        c || (l = this.fetchGeometry("goalNetSidesGeo"), r = this.fetchMaterial("goalNetSidesMat"), m("goalNetSides", !1));
        c.position.set(b.x - e, 0, 0);
        c.scale.set(e, d, b.z);
        c.material.map.repeat.set(e, b.z);
        c.material.needsUpdate = !0;
        c = k.getObjectByName("goalNetBack");
        c || (l = this.fetchGeometry("planeGeo"), r = this.fetchMaterial("goalNetBackMat"), m("goalNetBack", !1));
        c.position.set(a.lineWidth + e / 2, b.z / 2, 0);
        c.scale.set(d, g, 1);
        c.rotation.order = "ZYX";
        c.rotation.y = -Math.PI / 2;
        c.rotation.x = Math.PI / 2 - Math.atan(b.z / e);
        c.material.map.repeat.set(d,
            g);
        c.material.needsUpdate = !0;
        k = a.objGroup.getObjectByName("rightGoal");
        k || (k = new THREE.Object3D, k.name = "rightGoal", a.objGroup.add(k));
        k.position.x = a.fieldDimensions.x / 2;
        if (c = k.getObjectByName("goalSkeleton")) k.remove(c), c.geometry.dispose();
        l = f;
        r = this.fetchMaterial("rightGoalMat");
        m("goalSkeleton", !0);
        c = k.getObjectByName("goalNetSides");
        c || (l = this.fetchGeometry("goalNetSidesGeo"), r = this.fetchMaterial("goalNetSidesMat"), m("goalNetSides", !1));
        c.position.set(b.x - e, 0, 0);
        c.scale.set(e, d, b.z);
        c.material.map.repeat.set(e,
            b.z);
        c.material.needsUpdate = !0;
        c = k.getObjectByName("goalNetBack");
        c || (l = this.fetchGeometry("planeGeo"), r = this.fetchMaterial("goalNetBackMat"), m("goalNetBack", !1));
        c.position.set(a.lineWidth + e / 2, b.z / 2, 0);
        c.scale.set(d, g, 1);
        c.rotation.order = "ZYX";
        c.rotation.y = -Math.PI / 2;
        c.rotation.x = Math.PI / 2 - Math.atan(b.z / e);
        c.material.map.repeat.set(d, g);
        c.material.needsUpdate = !0
    };
    pa.prototype.createBall = function (a) {
        var b = u.createSimpleBall(a.radius);
        a.objGroup.add(b);
        u.loadObject("soccer_ball.json", function (c) {
            var d =
                new THREE.BufferGeometry;
            d.fromGeometry(c.getObjectByName("soccerball").geometry);
            d.name = "ballGeo";
            c = u.createStdPhongMat("ballMat", 16777215, "rcs-soccerball.png");
            d = new THREE.Mesh(d, c);
            d.name = "ballSphere";
            d.castShadow = !0;
            d.receiveShadow = !0;
            a.objGroup.remove(b);
            a.objGroup.add(d)
        })
    };
    pa.prototype.fetchMaterial = function (a) {
        var b = this.materialCache[a];
        if (void 0 === b) {
            switch (a) {
                case "skyBoxMat":
                    b = u.createSkyBoxMaterial();
                    break;
                case "grassMat":
                    b = u.loadTexture("field.png");
                    b.wrapS = THREE.RepeatWrapping;
                    b.wrapT =
                        THREE.RepeatWrapping;
                    b = new THREE.MeshPhongMaterial({name: "fieldMat", color: 13421772, map: b});
                    break;
                case "tbBorderMat":
                    b = u.loadTexture("field_border.png");
                    b.wrapS = THREE.RepeatWrapping;
                    b.wrapT = THREE.RepeatWrapping;
                    b = new THREE.MeshPhongMaterial({name: "tbBorderMat", color: 11180458, map: b});
                    break;
                case "lrBorderMat":
                    b = u.loadTexture("field_border.png");
                    b.wrapS = THREE.RepeatWrapping;
                    b.wrapT = THREE.RepeatWrapping;
                    b = new THREE.MeshPhongMaterial({name: "lrBorderMat", color: 11180458, map: b});
                    u.offsetMaterial(b, -.5, -.05);
                    break;
                case "lineMat":
                    b = new THREE.MeshBasicMaterial({name: "lineMat", color: 15658734, side: THREE.DoubleSide});
                    u.offsetMaterial(b, -1, -1);
                    break;
                case "goalNetSidesMat":
                    b = u.loadTexture("goalnet.png");
                    b.wrapS = THREE.RepeatWrapping;
                    b.wrapT = THREE.RepeatWrapping;
                    b = u.createStdPhongMat("goalNetSidesMat", 16777215, b);
                    b.side = THREE.DoubleSide;
                    b.transparent = !0;
                    break;
                case "goalNetBackMat":
                    b = u.loadTexture("goalnet.png");
                    b.wrapS = THREE.RepeatWrapping;
                    b.wrapT = THREE.RepeatWrapping;
                    b = u.createStdPhongMat("goalNetBackMat", 16777215,
                        b);
                    b.side = THREE.DoubleSide;
                    b.transparent = !0;
                    break;
                case "leftGoalMat":
                    b = u.createStdPhongMat(a, 13421568);
                    b.side = THREE.DoubleSide;
                    u.offsetMaterial(b, -1, -.1);
                    break;
                case "rightGoalMat":
                    b = u.createStdPhongMat(a, 35003);
                    b.side = THREE.DoubleSide;
                    u.offsetMaterial(b, -1, -.1);
                    break;
                default:
                    b = u.createStdPhongMat(a, 15658734)
            }
            this.materialCache[a] = b
        }
        return b
    };
    pa.prototype.fetchGeometry = function (a) {
        var b = this.geometryCache[a];
        if (void 0 === b) {
            switch (a) {
                case "skyBoxGeo":
                    b = new THREE.BoxBufferGeometry(1024, 1024, 1024);
                    break;
                case "planeGeo":
                    b = new THREE.PlaneBufferGeometry(1, 1);
                    break;
                case "goalNetSidesGeo":
                    b = u.createHockeyGoalSideNetGeometry();
                    break;
                default:
                    console.log('Geometry "' + a + '" not found!'), b = new THREE.BoxBufferGeometry(.5, .5, .5)
            }
            this.geometryCache[a] = b
        }
        return b
    };
    var va = function () {
        this.worldModelFactory = new pa;
        this.modelFactories2D = [new jb];
        this.modelFactories3D = [new ib]
    };
    va.prototype.dispose = function () {
    };
    va.prototype.create = function () {
        var a = new THREE.Scene;
        a.name = "soccerScene";
        this.worldModelFactory.createScene(a);
        return a
    };
    va.prototype.createBall = function (a) {
        this.worldModelFactory.createBall(a)
    };
    va.prototype.updateScene = function (a, b) {
        this.worldModelFactory.updateScene(a, b)
    };
    va.prototype.updateField = function (a) {
        this.worldModelFactory.updateField(a)
    };
    va.prototype.loadTeam = function (a, b, c, d) {
        for (var e = b.description, g = 0; g < e.agents.length; ++g) {
            var m = b.agents[g];
            void 0 === m && (m = new Sa(e.agents[g]), b.agents[g] = m, b.objGroup.add(m.objGroup));
            for (var f = 0; f < m.description.playerTypes.length; ++f) if (void 0 === m.models[f]) {
                var k =
                    this.createModel(a, m.description.playerTypes[f], e.side, m.description.playerNo, c, d);
                null !== k && (m.models[f] = k, m.models[f].setTeamColor(b.color), m.objGroup.add(m.models[f].objGroup))
            }
        }
        return b
    };
    va.prototype.createModel = function (a, b, c, d, e, g) {
        a = a === T.TWOD ? this.modelFactories2D : this.modelFactories3D;
        for (var m = a.length, f = null; m-- && (f = a[m].createModel(b, c, d, e, g), null === f);) ;
        return f
    };
    var Aa = function () {
        this.__event_observers = null;
        this.worldLoader = new va;
        this.type = T.TWOD;
        this.environmentParams = new L;
        this.playerParams =
            new L;
        this.playerTypes = [];
        this.scene = this.worldLoader.create();
        this.field = new qb;
        this.scene.add(this.field.objGroup);
        this.worldLoader.updateField(this.field);
        this.ball = new eb;
        this.scene.add(this.ball.objGroup);
        this.scene.add(this.ball.objTwoDGroup);
        this.worldLoader.createBall(this.ball);
        this.leftTeam = new Ta(new oa("left", new THREE.Color("#0000ff"), -1));
        this.scene.add(this.leftTeam.objGroup);
        this.rightTeam = new Ta(new oa("right", new THREE.Color("#ff0000"), 1));
        this.scene.add(this.rightTeam.objGroup);
        this.boundingBox = new THREE.Vector3(512, 512, 512);
        return this
    };
    $jscomp.inherits(Aa, aa);
    Aa.prototype.dispose = function () {
        this.worldLoader.dispose()
    };
    Aa.prototype.create = function (a, b, c, d, e, g) {
        this.type = a;
        this.environmentParams = b;
        this.playerParams = c;
        this.playerTypes = d;
        this.field.set(a, this.environmentParams);
        this.worldLoader.updateField(this.field);
        this.ball.setRadius(a === T.TWOD ? .2 : .042);
        this.leftTeam.set(e);
        this.rightTeam.set(g);
        this.updateTeams(a);
        this.worldLoader.updateScene(this.scene, this.field.fieldDimensions);
        this.dispatchEvent({type: "change"})
    };
    Aa.prototype.updateTeams = function (a) {
        this.worldLoader.loadTeam(a, this.leftTeam, this.environmentParams, this.playerParams);
        this.worldLoader.loadTeam(a, this.rightTeam, this.environmentParams, this.playerParams)
    };
    Aa.prototype.update = function (a, b, c) {
        this.ball.update(a.ballState, b.ballState, c);
        this.leftTeam.update(a.leftAgentStates, b.leftAgentStates, c);
        this.rightTeam.update(a.rightAgentStates, b.rightAgentStates, c)
    };
    Aa.prototype.setShadowsEnabled = function (a) {
        for (var b =
            this.scene.children.length; b--;) {
            var c = this.scene.children[b];
            if ("DirectionalLight" == c.type || "PointLight" == c.type || "SpotLight" == c.type) c.castShadow = a
        }
    };
    var H = function (a, b) {
        this.__event_observers = null;
        this.gameLogLoader = new ca;
        this.playlistLoader = new ja;
        this.world = a;
        this.monitorConfig = b;
        this.playlist = this.gameLog = null;
        this.playlistIndex = -1;
        this.state = 0;
        this.playSpeed = 1;
        this.upcomingGoals = this.passedGoals = this.playIndex = this.playTime = 0;
        this.needsUpdate = !0;
        this.handleGameLogUpdateListener = this.handleGameLogUpdate.bind(this);
        this.handleNewGameLogListener = this.handleNewGameLog.bind(this);
        this.handleGameLogLoadEndListener = this.handleGameLogLoadEnd.bind(this);
        this.handlePlaylistLoadEndListener = this.handlePlaylistLoadEnd.bind(this);
        this.handlePlaylistIndexChangeListener = this.handlePlaylistIndexChange.bind(this);
        this.gameLogLoader.addEventListener("new-game-log", this.handleNewGameLogListener);
        this.gameLogLoader.addEventListener("finished", this.handleGameLogLoadEndListener);
        this.gameLogLoader.addEventListener("error", this.handleGameLogLoadEndListener);
        this.playlistLoader.addEventListener("finished", this.handlePlaylistLoadEndListener);
        this.playlistLoader.addEventListener("error", this.handlePlaylistLoadEndListener);
        return this
    };
    $jscomp.inherits(H, aa);
    H.prototype.dispose = function () {
        this.setGameLog(null);
        this.setPlaylist(null)
    };
    H.prototype.loadGameLog = function (a) {
        this.setPlaylist(null);
        this.gameLogLoader.load(a)
    };
    H.prototype.loadGameLogFile = function (a) {
        this.setPlaylist(null);
        this.gameLogLoader.loadFile(a)
    };
    H.prototype.loadPlaylist = function (a) {
        this.playlistLoader.load(a)
    };
    H.prototype.loadPlaylistFile = function (a) {
        this.playlistLoader.loadFile(a)
    };
    H.prototype.setGameLog = function (a) {
        this.gameLog !== a && (null !== this.gameLog && this.gameLog.onChange === this.handleGameLogUpdateListener && (this.gameLog.onChange = void 0), this.gameLog = a, null !== this.gameLog ? (this.world.create(this.gameLog.type, this.gameLog.environmentParams, this.gameLog.playerParams, this.gameLog.playerTypes, this.gameLog.leftTeam, this.gameLog.rightTeam), this.gameLog.fullyLoaded || (this.gameLog.onChange = this.handleGameLogUpdateListener),
            this.playIndex = this.playTime = 0, this.updateGoalCounts(), this.needsUpdate = !0, null !== this.playlist && (this.playlistIndex = this.playlist.activeIndex), null !== this.playlist && this.playlist.autoplay ? this.setState(2) : this.setState(1)) : (this.playlistIndex = -1, this.setState(0)), this.dispatchEvent({type: "game-log-change"}))
    };
    H.prototype.setPlaylist = function (a) {
        this.playlist !== a && (null !== this.playlist && this.playlist.removeEventListener("active-change", this.handlePlaylistIndexChangeListener), this.playlist = a, this.setGameLog(null),
            this.dispatchEvent({type: "playlist-change"}), null !== this.playlist && (this.playlist.addEventListener("active-change", this.handlePlaylistIndexChangeListener), this.playlist.nextEntry()))
    };
    H.prototype.setState = function (a) {
        if (this.state !== a) {
            var b = this.state;
            this.state = a;
            this.needsUpdate = !0;
            this.dispatchEvent({type: "state-change", oldState: b, newState: a});
            4 === this.state && null !== this.playlist && this.playlist.autoplay && this.playlist.setActiveIndex(this.playlistIndex + 1)
        }
    };
    H.prototype.setPlayTime = function (a) {
        0 >
        a ? (a = 0, this.setState(1)) : a > this.gameLog.duration ? (a = this.gameLog.duration + 5E-6, this.setState(this.gameLog.fullyLoaded ? 4 : 3)) : 4 === this.state ? this.setState(1) : 3 === this.state && this.setState(2);
        if (this.playTime !== a) {
            var b = this.playTime;
            this.playTime = a;
            this.playIndex = this.gameLog.getIndexForTime(a);
            this.updateGoalCounts();
            this.needsUpdate = !0;
            this.dispatchEvent({type: "time-change", oldTime: b, newTime: a})
        }
    };
    H.prototype.updateGoalCounts = function () {
        var a = this.gameLog.gameScoreList.indexOf(this.gameLog.states[this.playIndex].score);
        this.passedGoals = this.upcomingGoals = 0;
        for (var b = 1; b < this.gameLog.gameScoreList.length; b++) b <= a ? this.passedGoals++ : this.upcomingGoals++
    };
    H.prototype.getCurrentWorldState = function () {
        return this.gameLog.states[this.playIndex]
    };
    H.prototype.progressPlayTime = function (a) {
        this.setPlayTime(this.playTime + a * this.playSpeed)
    };
    H.prototype.update = function (a) {
        if (null !== this.gameLog && (2 === this.state && .5 > a && this.progressPlayTime(a), 2 === this.state || this.needsUpdate)) {
            this.needsUpdate = !1;
            a = this.playIndex;
            var b = 0;
            this.monitorConfig.interpolateStates &&
            (b = (this.gameLog.startTime + this.playTime - this.gameLog.states[a].time) * this.gameLog.frequency);
            a + 1 >= this.gameLog.states.length && (--a, b = 1);
            this.world.update(this.gameLog.states[a], this.gameLog.states[a + 1], b)
        }
    };
    H.prototype.handleGameLogUpdate = function () {
        this.world.updateTeams(this.gameLog.type);
        this.updateGoalCounts();
        this.dispatchEvent({type: "game-log-updated"});
        3 === this.state && this.setState(2)
    };
    H.prototype.handleNewGameLog = function (a) {
        this.setGameLog(a.gameLog)
    };
    H.prototype.handleGameLogLoadEnd = function (a) {
        "error" ===
        a.type && (null !== this.playlist ? (this.playlist.markAsInvalid(a.msg), this.playlist.nextEntry()) : alert("Loading game log failed: " + a.msg))
    };
    H.prototype.handlePlaylistLoadEnd = function (a) {
        "finished" === a.type ? this.setPlaylist(a.list) : "error" === a.type && alert(a.msg)
    };
    H.prototype.handlePlaylistIndexChange = function (a) {
        a = this.playlist.getActiveEntry();
        null !== a && null === a.errorMsg && (a.resource instanceof File ? this.gameLogLoader.loadFile(a.resource) : this.gameLogLoader.load(a.resource))
    };
    H.prototype.playPause = function () {
        null !==
        this.gameLog && (2 === this.state || 3 == this.state ? this.setState(1) : 1 === this.state ? this.setState(2) : 4 === this.state && (this.setPlayTime(0), this.setState(2)))
    };
    H.prototype.step = function (a) {
        null !== this.gameLog && (1 === this.state || 4 === this.state ? this.jump(this.playIndex + (a ? -1 : 1)) : this.progressPlayTime(a ? -2 : 2))
    };
    H.prototype.jump = function (a) {
        null !== this.gameLog && (0 > a ? this.setPlayTime(0) : a >= this.gameLog.states.length ? this.setPlayTime(this.gameLog.duration + 1) : this.setPlayTime(this.gameLog.states[a].time + 1E-4))
    };
    H.prototype.jumpGoal =
        function (a) {
            if (null !== this.gameLog) {
                var b = this.playTime, c = this.gameLog.gameScoreList;
                if (a) for (a = c.length - 1; 0 < a; --a) {
                    if (c[a].time < b) {
                        this.setPlayTime(c[a].time - 6);
                        break
                    }
                } else for (b += 6, a = 1; a < c.length; ++a) if (c[a].time > b) {
                    this.setPlayTime(c[a].time - 6);
                    break
                }
            }
        };
    var wa = function () {
        this.__event_observers = null;
        this.rememberMap = {};
        this.rememberAll = !1;
        this.monitorConfig = new ia;
        this.restore();
        return this
    };
    $jscomp.inherits(wa, aa);
    wa.prototype.restore = function () {
        var a = localStorage.getItem("rememberAll");
        a && (this.rememberAll =
            "true" === a);
        if (a = localStorage.getItem("rememberMap")) try {
            this.rememberMap = JSON.parse(a)
        } catch (b) {
            console.log("Exception parsing remember map!"), console.log(b)
        }
        this.restoreConfig(this.monitorConfig)
    };
    wa.prototype.restoreConfig = function (a) {
        var b = localStorage.getItem(a.getID());
        b && a.fromJSONString(b)
    };
    wa.prototype.save = function () {
        localStorage.setItem("rememberAll", this.rememberAll);
        localStorage.setItem("rememberMap", JSON.stringify(this.rememberMap));
        this.saveConfig(this.monitorConfig)
    };
    wa.prototype.saveConfig =
        function (a) {
            var b = a.getID();
            this.rememberAll || this.rememberMap[b] ? localStorage.setItem(b, a.toJSONString()) : localStorage.removeItem(b)
        };
    wa.prototype.setRememberConfig = function (a, b) {
        this.rememberMap[a.getID()] = b;
        this.dispatchEvent({type: "change"})
    };
    wa.prototype.setRememberAll = function (a) {
        this.rememberAll = a;
        this.dispatchEvent({type: "change"})
    };
    var qa = function (a) {
        this.__event_observers = null;
        this.embedded = a;
        this.state = "init";
        this.settings = new wa;
        this.world = new Aa;
        this.world.setShadowsEnabled(this.settings.monitorConfig.shadowsEnabled);
        this.logPlayer = new H(this.world, this.settings.monitorConfig);
        this.handleLogPlayerChangeListener = this.handleLogPlayerChange.bind(this);
        this.logPlayer.addEventListener("game-log-change", this.handleLogPlayerChangeListener);
        this.logPlayer.addEventListener("playlist-change", this.handleLogPlayerChangeListener);
        return this
    };
    $jscomp.inherits(qa, aa);
    qa.prototype.setState = function (a) {
        if (this.state !== a) {
            var b = this.state;
            this.state = a;
            this.dispatchEvent({type: "state-change", oldState: b, newState: a})
        }
    };
    qa.prototype.loadGameLog =
        function (a) {
            this.logPlayer.loadGameLog(a)
        };
    qa.prototype.loadPlaylist = function (a) {
        this.logPlayer.loadPlaylist(a)
    };
    qa.prototype.loadFiles = function (a) {
        var b = ba.filterFiles(a, [".replay", ".rpl2d", ".rpl3d", ".rcg"]), c = ba.filterFiles(a, [".json"]);
        if (1 === b.length) this.logPlayer.loadGameLogFile(b[0]); else if (1 < b.length) c = new X("Local Playlist"), c.addFiles(b), this.logPlayer.setPlaylist(c); else if (0 < c.length) for (b = 0; b < c.length; b++) ; else 0 < a.length && alert("Unsupported file type(s)!")
    };
    qa.prototype.connectStream =
        function (a) {
            throw Error("MonitorModel::connectStream(): Not implemented yet!");
        };
    qa.prototype.connectSimulator = function (a) {
        throw Error("MonitorModel::connectSimulator(): Not implemented yet!");
    };
    qa.prototype.handleLogPlayerChange = function (a) {
        this.setState("replay")
    };
    var ra = function (a) {
        this.monitorParams = void 0 !== a && null !== a ? a : {};
        this.queryParams = ra.parseQueryParams()
    };
    ra.prototype.getQueryParam = function (a) {
        return this.queryParams[a] ? this.queryParams[a] : null
    };
    ra.prototype.isEmbedded = function () {
        return !0 ===
            this.monitorParams.embedded
    };
    ra.prototype.getArchives = function () {
        return this.monitorParams.archives ? this.monitorParams.archives : []
    };
    ra.prototype.getGameLogURL = function () {
        var a = this.getQueryParam("gamelog");
        null === a && (a = this.getQueryParam("replay"));
        return a
    };
    ra.prototype.getPlaylistURL = function () {
        return this.getQueryParam("list")
    };
    ra.parseQueryParams = function (a) {
        void 0 === a && (a = window.location.search);
        var b = /[?&]?([^=]+)=([^&]*)/g, c = {}, d;
        for (a = a.split("+").join(" "); d = b.exec(a);) c[decodeURIComponent(d[1])] =
            decodeURIComponent(d[2]);
        return c
    };
    var D = {
        ENTER: 13,
        SPACE: 32,
        PAGE_UP: 33,
        PAGE_DOWN: 34,
        LEFT: 37,
        UP: 38,
        RIGHT: 39,
        DOWN: 40,
        ZERO: 48,
        ONE: 49,
        TWO: 50,
        THREE: 51,
        FOUR: 52,
        FIVE: 53,
        SIX: 54,
        SEVEN: 55,
        EIGHT: 56,
        NINE: 57,
        A: 65,
        B: 66,
        C: 67,
        D: 68,
        E: 69,
        F: 70,
        G: 71,
        H: 72,
        I: 73,
        J: 74,
        K: 75,
        L: 76,
        M: 77,
        N: 78,
        O: 79,
        P: 80,
        Q: 81,
        R: 82,
        S: 83,
        T: 84,
        U: 85,
        V: 86,
        W: 87,
        X: 88,
        Y: 89,
        Z: 90
    }, S = {
        BACKSPACE: 8,
        TAB: 9,
        ENTER: 13,
        ESC: 27,
        SPACE: 32,
        LP: 40,
        RP: 41,
        ASTERISK: 42,
        PLUS: 43,
        COMMA: 44,
        MINUS: 45,
        DOT: 46,
        SLASH: 47,
        ZERO: 48,
        ONE: 49,
        TWO: 50,
        THREE: 51,
        FOUR: 52,
        FIVE: 53,
        SIX: 54,
        SEVEN: 55,
        EIGHT: 56,
        NINE: 57,
        COLON: 58,
        SEMICOLON: 59,
        LT: 60,
        EQ: 61,
        GT: 62,
        QESTIONMARK: 63,
        AT: 64,
        A: 65,
        B: 66,
        C: 67,
        D: 68,
        E: 69,
        F: 70,
        G: 71,
        H: 72,
        I: 73,
        J: 74,
        K: 75,
        L: 76,
        M: 77,
        N: 78,
        O: 79,
        P: 80,
        Q: 81,
        R: 82,
        S: 83,
        T: 84,
        U: 85,
        V: 86,
        W: 87,
        X: 88,
        Y: 89,
        Z: 90,
        LSB: 91,
        BACKSLASH: 92,
        RSB: 93,
        CIRCUMFLEX: 94,
        LOWLINE: 95,
        GRAVEACCENT: 96,
        a: 97,
        b: 98,
        c: 99,
        d: 100,
        e: 101,
        f: 102,
        g: 103,
        h: 104,
        i: 105,
        j: 106,
        k: 107,
        l: 108,
        m: 109,
        n: 110,
        o: 111,
        p: 112,
        q: 113,
        r: 114,
        s: 115,
        t: 116,
        u: 117,
        v: 118,
        w: 119,
        x: 120,
        y: 121,
        z: 122,
        LCB: 123,
        VBAR: 124,
        RCB: 125,
        TILDE: 126,
        DEL: 127
    }, h = function () {
    };
    h.getBrightness =
        function (a) {
            return 255 * Math.sqrt(a.r * a.r * .241 + a.g * a.g * .691 + a.b * a.b * .068)
        };
    h.getForegroundColor = function (a) {
        return 130 > h.getBrightness(a) ? v.Color_LightGrey() : v.Color_DarkGrey()
    };
    h.setVisibility = function (a, b) {
        a.style.display = void 0 === b || b ? "" : "none"
    };
    h.isVisible = function (a) {
        return "none" != a.style.display
    };
    h.toggleVisibility = function (a) {
        if ("none" != a.style.display) return a.style.display = "none", !1;
        a.style.display = "";
        return !0
    };
    h.createElement = function (a, b, c) {
        a = document.createElement(a);
        void 0 !== b && (a.innerHTML =
            b);
        void 0 !== c && (a.className = c);
        return a
    };
    h.createDiv = function (a) {
        return h.createElement("div", void 0, a)
    };
    h.createSpan = function (a, b) {
        return h.createElement("span", a, b)
    };
    h.createPlayerButton = function (a, b, c, d, e) {
        a = h.createElement("button", a, b);
        void 0 !== c && (a.title = c);
        void 0 !== d && (c = function () {
            return function (g) {
                g.keyCode != D.ENTER && g.keyCode != D.SPACE || d(g)
            }
        }(), e ? (e = function () {
            return function (g) {
                g.preventDefault();
                g.stopPropagation();
                d(g)
            }
        }(), a.addEventListener("mousedown", e)) : a.addEventListener("mousedown",
            d), a.addEventListener("keydown", c));
        return a
    };
    h.createButton = function (a, b, c, d) {
        a = h.createElement("button", a, b);
        void 0 !== c && (a.title = c);
        void 0 !== d && (c = function () {
            return function (e) {
                e.keyCode != D.ENTER && e.keyCode != D.SPACE || d(e)
            }
        }(), a.addEventListener("click", d), a.addEventListener("keydown", c));
        return a
    };
    h.isButtonAction = function (a) {
        if (void 0 !== a) {
            if (void 0 !== a.keyCode) return a.keyCode == D.ENTER || a.keyCode == D.SPACE;
            if (void 0 !== a.button) return 0 === a.button
        }
        return !1
    };
    h.createUL = function (a) {
        return h.createElement("ul",
            void 0, a)
    };
    h.createLI = function (a) {
        return h.createElement("li", void 0, a)
    };
    h.createHref = function (a, b, c, d) {
        a = h.createElement("a", a, c);
        void 0 !== b && (a.href = b);
        void 0 !== d && (a.title = d);
        return a
    };
    h.createSingleChoiceForm = function (a, b) {
        void 0 === b && (b = 0);
        for (var c = h.createElement("form", void 0, "jsm-s-choice"), d = 0; d < a.length; ++d) {
            var e = THREE.Math.generateUUID(), g = h.createElement("label");
            g.innerHTML = a[d];
            g.htmlFor = e;
            var m = h.createElement("input");
            m.id = e;
            m.type = "radio";
            m.name = "userOptions";
            m.value = a[d];
            d === b &&
            (m.checked = !0);
            c.appendChild(m);
            c.appendChild(g)
        }
        c.onclick = function (f) {
            f.stopPropagation()
        };
        return c
    };
    h.createColorChooser = function (a, b, c) {
        c = h.createElement("input", void 0, c);
        c.type = "color";
        c.value = a;
        b && (c.title = b);
        return c
    };
    h.setIcon = function (a, b) {
        var c = a.className.indexOf("icon-");
        if (-1 === c) a.className += " " + b; else {
            var d = a.className.indexOf(" ", c);
            a.className = -1 !== d ? a.className.slice(0, c) + b + a.className.slice(d - 1) : a.className.slice(0, c) + b
        }
    };
    h.toMMSScs = function (a, b) {
        var c = Math.round(100 * a);
        a = Math.floor(c /
            6E3);
        var d = Math.floor((c - 6E3 * a) / 100);
        c = c - 100 * d - 6E3 * a;
        b && 10 > a && (a = "0" + a);
        10 > d && (d = "0" + d);
        10 > c && (c = "0" + c);
        return a + ":" + d + ".<small>" + c + "</small>"
    };
    h.toMMSS = function (a, b) {
        var c = Math.floor(a);
        a = Math.floor(c / 60);
        c -= 60 * a;
        b && 10 > a && (a = "0" + a);
        10 > c && (c = "0" + c);
        return a + ":" + c
    };
    h.StopEventPropagationListener = function (a) {
        a.stopPropagation()
    };
    h.filterElements = function (a, b) {
        for (var c = [], d = 0; d < a.length; d++) a[d].nodeName === b && c.push(a[d]);
        return c
    };
    h.isFullscreenEnabled = function () {
        return !0 === document.fullscreenEnabled ||
            !0 === document.mozFullScreenEnabled || !0 === document.msFullscreenEnabled || !0 === document.webkitFullscreenEnabled
    };
    h.inFullscreen = function () {
        var a = h.getFullscreenElement();
        return void 0 !== a && null !== a
    };
    h.getFullscreenElement = function () {
        if (void 0 !== document.fullscreenElement) return document.fullscreenElement;
        if (void 0 !== document.mozFullScreenElement) return document.mozFullScreenElement;
        if (void 0 !== document.msFullscreenElement) return document.msFullscreenElement;
        if (void 0 !== document.webkitFullscreenElement) return document.webkitFullscreenElement
    };
    h.requestFullscreenFor = function (a) {
        void 0 !== a.requestFullscreen ? a.requestFullscreen() : void 0 !== a.mozRequestFullScreen ? a.mozRequestFullScreen() : void 0 !== a.webkitRequestFullscreen ? a.webkitRequestFullscreen() : void 0 !== a.msRequestFullscreen && a.msRequestFullscreen()
    };
    h.cancelFullscreen = function () {
        document.fullscreen && void 0 !== document.exitFullscreen ? document.exitFullscreen() : document.mozFullScreen && void 0 !== document.mozCancelFullScreen ? document.mozCancelFullScreen() : document.webkitIsFullScreen && void 0 !==
        document.webkitCancelFullScreen ? document.webkitCancelFullScreen() : document.msFullscreenEnabled && void 0 !== document.msExitFullscreen && document.msExitFullscreen()
    };
    var xa = function () {
        this.onNewFilesDropped = void 0;
        this.handleDragEnterListener = this.handleDragEnter.bind(this);
        this.handleDragEndListener = this.handleDragEnd.bind(this);
        this.handleDragOverListener = this.handleDragOver.bind(this);
        this.handleDropListener = this.handleDrop.bind(this)
    };
    xa.prototype.addListeners = function (a) {
        a.addEventListener("dragenter",
            this.handleDragEnterListener, !1);
        a.addEventListener("dragover", this.handleDragOverListener, !1);
        a.addEventListener("dragleave", this.handleDragEndListener, !1);
        a.addEventListener("dragend", this.handleDragEndListener, !1);
        a.addEventListener("drop", this.handleDropListener, !1)
    };
    xa.prototype.removeListeners = function (a) {
        a.removeEventListener("dragenter", this.handleDragEnterListener, !1);
        a.removeEventListener("dragover", this.handleDragOverListener, !1);
        a.removeEventListener("dragleave", this.handleDragEndListener,
            !1);
        a.removeEventListener("dragend", this.handleDragEndListener, !1);
        a.removeEventListener("drop", this.handleDropListener, !1)
    };
    xa.prototype.resetTarget = function (a) {
        null !== a && (a.className = a.className.replace("dragging-over", ""))
    };
    xa.prototype.handleDrop = function (a) {
        a.stopPropagation();
        a.preventDefault();
        this.resetTarget(a.target);
        if (this.onNewFilesDropped && 0 < a.dataTransfer.files.length) this.onNewFilesDropped(a.dataTransfer.files)
    };
    xa.prototype.handleDragEnter = function (a) {
        var b = a.dataTransfer.items[0];
        b && "file" === b.kind && (a.target.className += " dragging-over")
    };
    xa.prototype.handleDragEnd = function (a) {
        this.resetTarget(a.target)
    };
    xa.prototype.handleDragOver = function (a) {
        var b = a.dataTransfer.items[0];
        b && "file" === b.kind && (a.stopPropagation(), a.preventDefault(), a.dataTransfer.dropEffect = "copy")
    };
    var Ba = function (a) {
        this.__event_observers = null;
        this.container = a;
        this.changeEvent = {type: "change"};
        this.handleFullscreenChangeListener = this.handleFullscreenChange.bind(this);
        document.addEventListener("fullscreenchange",
            this.handleFullscreenChangeListener);
        document.addEventListener("mozfullscreenchange", this.handleFullscreenChangeListener);
        document.addEventListener("msfullscreenchange", this.handleFullscreenChangeListener);
        document.addEventListener("webkitfullscreenchange", this.handleFullscreenChangeListener);
        return this
    };
    $jscomp.inherits(Ba, aa);
    Ba.prototype.toggleFullscreen = function () {
        this.container === h.getFullscreenElement() ? h.cancelFullscreen() : h.requestFullscreenFor(this.container);
        this.dispatchEvent(this.changeEvent)
    };
    Ba.prototype.requestFullscreen = function () {
        this.container !== h.getFullscreenElement() && (h.requestFullscreenFor(this.container), this.dispatchEvent(this.changeEvent))
    };
    Ba.prototype.cancelFullscreen = function () {
        this.container === h.getFullscreenElement() && (h.cancelFullscreen(), this.dispatchEvent(this.changeEvent))
    };
    Ba.prototype.isFullscreen = function () {
        return this.container === h.getFullscreenElement()
    };
    Ba.prototype.handleFullscreenChange = function (a) {
        this.dispatchEvent(this.changeEvent)
    };
    var vb = function (a) {
        if (void 0 ===
            a || 1 > a) a = 1;
        for (this.fpsHistory = []; a--;) this.fpsHistory.push(0);
        this.currentSecond = -1;
        this.currentFPS = 0;
        this.onNewSecond = void 0
    };
    vb.prototype.update = function (a) {
        if (0 > this.currentSecond) this.currentSecond = Math.floor(a); else if (a = Math.floor(a), a > this.currentSecond) {
            for (var b = this.fpsHistory.length - 1; b--;) this.fpsHistory[b + 1] = this.fpsHistory[b];
            this.fpsHistory[0] = this.currentFPS;
            this.currentFPS = 0;
            this.currentSecond = a;
            if (void 0 !== this.onNewSecond) this.onNewSecond()
        }
        this.currentFPS++
    };
    vb.prototype.getMostRecentFPS =
        function () {
            return this.fpsHistory[0]
        };
    var I = function (a) {
        this.domElement = h.createDiv(a);
        this.onVisibilityChanged = void 0
    };
    I.prototype.appendChild = function (a) {
        this.domElement.appendChild(a)
    };
    I.prototype.setVisible = function (a) {
        void 0 === a && (a = !0);
        if (h.isVisible(this.domElement) !== a && (h.setVisibility(this.domElement, a), this.onVisibilityChanged)) this.onVisibilityChanged(this)
    };
    I.prototype.toggleVisibility = function () {
        var a = !h.isVisible(this.domElement);
        h.setVisibility(this.domElement, a);
        if (this.onVisibilityChanged) this.onVisibilityChanged(this)
    };
    I.prototype.isVisible = function () {
        return h.isVisible(this.domElement)
    };
    var Xa = function (a) {
        var b = I.call(this, "jsm-gl-info no-text-select") || this;
        b.fpsMeter = a;
        b.fpsMeter.onNewSecond = b.handleNewSecond.bind(b);
        a = document.createElement("ul");
        b.domElement.appendChild(a);
        b.fpsLbl = h.createSpan("0");
        var c = document.createElement("li");
        c.appendChild(h.createSpan("FPS:", "label"));
        c.appendChild(b.fpsLbl);
        a.appendChild(c);
        b.resolutionLbl = h.createSpan("0 x 0px");
        return b
    };
    $jscomp.inherits(Xa, I);
    Xa.prototype.setFPS =
        function (a) {
            this.fpsLbl.innerHTML = a
        };
    Xa.prototype.setResolution = function (a, b) {
        this.resolutionLbl.innerHTML = "" + a + " x " + b + "px"
    };
    Xa.prototype.handleNewSecond = function () {
        this.fpsLbl.innerHTML = this.fpsMeter.fpsHistory[0]
    };
    var Ya = function () {
    };
    Ya.prototype.setEnabled = function (a) {
    };
    Ya.prototype.setBounds = function (a) {
    };
    Ya.prototype.setAreaOfInterest = function (a) {
    };
    Ya.prototype.update = function (a) {
    };
    var kb = function (a) {
        var b = a.clientWidth, c = a.clientHeight;
        this.renderTTL = this.renderInterval = 1;
        this.timeSinceLastRenderCall =
            0;
        this.camera = new THREE.PerspectiveCamera(45, b / c, .1, 2E3);
        this.camera.position.set(20, 15, 15);
        this.camera.lookAt(new THREE.Vector3);
        this.camera.updateMatrix();
        this.renderer = new THREE.WebGLRenderer({antialias: !0});
        this.renderer.setSize(b, c);
        a.appendChild(this.renderer.domElement);
        this.cameraController = this.scene = null;
        this.clock = new THREE.Clock(!0);
        this.fpsMeter = new vb(10);
        this.glInfoBoard = new Xa(this.fpsMeter);
        this.glInfoBoard.setVisible(!1);
        a.appendChild(this.glInfoBoard.domElement);
        this.onNewRenderCycle =
            void 0;
        this.renderFunction = this.render.bind(this);
        requestAnimationFrame(this.renderFunction)
    };
    kb.prototype.render = function () {
        requestAnimationFrame(this.renderFunction);
        this.timeSinceLastRenderCall = this.clock.getDelta();
        .5 < this.timeSinceLastRenderCall && console.log("LAAAAG: " + this.timeSinceLastRenderCall);
        this.fpsMeter.update(this.clock.elapsedTime);
        if (!(0 < --this.renderTTL)) {
            this.renderTTL = this.renderInterval;
            if (void 0 !== this.onNewRenderCycle) this.onNewRenderCycle(this.timeSinceLastRenderCall);
            null !==
            this.cameraController && this.cameraController.update(this.timeSinceLastRenderCall);
            null !== this.scene && this.renderer.render(this.scene, this.camera)
        }
    };
    kb.prototype.autoResize = function () {
        var a = this.renderer.domElement.parentNode;
        this.setDimensions(a.clientWidth, a.clientHeight)
    };
    kb.prototype.setDimensions = function (a, b) {
        var c = this.renderer.getSize();
        if (c.width !== a || c.height !== b) this.renderer.setSize(a, b), this.camera.aspect = a / b, this.camera.updateProjectionMatrix(), this.renderTTL = 0
    };
    var B = function (a, b) {
        var c =
            this;
        c.camera = a;
        c.canvas = b;
        c.targetPos = new THREE.Vector3(0, 105, 0);
        c.targetRot = new THREE.Euler(-Math.PI / 2, 0, 0, "YXZ");
        c.targetRot.onChange(function () {
            c.targetMatrix.makeRotationFromEuler(c.targetRot)
        });
        c.targetMatrix = new THREE.Matrix4;
        c.targetMatrix.makeRotationX(-Math.PI / 2);
        c.rotateStart = null;
        c.panStart = null;
        c.panSpeed = 1;
        c.zoomStart = null;
        c.currentSpeed = new THREE.Vector3;
        c.intendedSpeed = new THREE.Vector3;
        a = new THREE.SphereGeometry(.05, 16, 16);
        b = new THREE.MeshPhongMaterial({color: 11184640});
        c.indicatorSphere =
            new THREE.Mesh(a, b);
        c.indicatorSphere.name = "camControlIndicatorSphere";
        c.indicatorSphere.visible = !1;
        c.indicatorTTL = 0;
        c.areaOfInterest = new THREE.Vector2(105, 68);
        c.bounds = new THREE.Vector3(500, 500, 500);
        c.enabled = !0;
        c.trackingObject = null;
        return c
    };
    $jscomp.inherits(B, Ya);
    B.prototype.setEnabled = function (a) {
        this.enabled !== a && (this.enabled = a, a || (this.zoomStart = this.panStart = this.rotateStart = null, this.intendedSpeed.setScalar(0)))
    };
    B.prototype.setBounds = function (a) {
        this.bounds.copy(a)
    };
    B.prototype.setAreaOfInterest =
        function (a) {
            this.areaOfInterest.copy(a)
        };
    B.prototype.update = function (a) {
        this.currentSpeed.lerp(this.intendedSpeed, .1);
        .01 > this.currentSpeed.length() ? this.currentSpeed.setScalar(0) : this.move(this.currentSpeed.x, this.currentSpeed.z, this.currentSpeed.y);
        this.camera.position.copy(this.targetPos);
        null !== this.trackingObject ? (this.camera.lookAt(this.trackingObject.position), this.targetRot.copy(this.camera.rotation)) : this.camera.rotation.copy(this.targetRot);
        this.indicatorSphere.visible && 0 > this.indicatorTTL-- &&
        (this.indicatorSphere.visible = !1)
    };
    B.prototype.trackObject = function (a) {
        this.trackingObject = a
    };
    B.prototype.setIndicator = function (a) {
        this.indicatorSphere.position.copy(a);
        this.indicatorSphere.visible = !0;
        this.indicatorTTL = 10
    };
    B.prototype.getCenterIntersectionPoint = function (a, b) {
        var c = new THREE.Vector3;
        c.setFromMatrixColumn(this.targetMatrix, 2);
        c.negate();
        -.01 > c.y || .01 < c.y ? (c.multiplyScalar(Math.abs(this.targetPos.y / c.y)), c.clampLength(-b, b), a = c.length()) : (a = b, c.multiplyScalar(b / c.length()));
        c.add(this.targetPos);
        this.setIndicator(c);
        return {point: c, distance: a}
    };
    B.prototype.getIntersectionPoint = function (a, b, c) {
        var d = 2 * Math.tan(this.camera.fov / 2 * Math.PI / 180);
        a = new THREE.Vector3(d * a.x / this.canvas.clientHeight, d * a.y / this.canvas.clientHeight, -1);
        a.applyMatrix4(this.targetMatrix);
        -.01 > a.y || .01 < a.y ? (a.multiplyScalar(-this.targetPos.y / a.y), a.clampLength(b, c), b = a.length()) : (b = c, a.multiplyScalar(c / a.length()));
        a.add(this.targetPos);
        this.setIndicator(a);
        return {point: a, distance: b}
    };
    B.prototype.setTargetRotDeg = function (a,
                                            b) {
        this.setTargetRot(U.toRad(a), U.toRad(b))
    };
    B.prototype.setTargetRot = function (a, b) {
        a > Math.PI ? a -= 2 * Math.PI : a < -Math.PI && (a += 2 * Math.PI);
        this.targetRot.set(THREE.Math.clamp(b, -Math.PI / 2, Math.PI / 2), a, 0)
    };
    B.prototype.shiftTargetRot = function (a, b) {
        this.setTargetRot(this.targetRot.y + a, this.targetRot.x + b)
    };
    B.prototype.setTargetPos = function (a, b, c) {
        this.targetPos.x = a;
        this.targetPos.y = b;
        this.targetPos.z = c
    };
    B.prototype.shiftTargetPos = function (a, b, c) {
        this.targetPos.x += a;
        this.targetPos.y += b;
        this.targetPos.z += c
    };
    B.prototype.handleStartRotate = function (a) {
        this.enabled && (this.rotateStart = new THREE.Vector2, this.rotateStart.copy(a))
    };
    B.prototype.handleStartPan = function (a) {
        this.enabled && (this.panStart = new THREE.Vector2, this.panStart.copy(a), this.panSpeed = this.getIntersectionPoint(a, .5, 100).distance * Math.tan(this.camera.fov / 2 * Math.PI / 180) * 2)
    };
    B.prototype.handleStartZoom = function (a) {
        this.enabled && (this.zoomStart = new THREE.Vector2, this.zoomStart.copy(a))
    };
    B.prototype.handleEndRotate = function () {
        this.rotateStart = null
    };
    B.prototype.handleEndPan = function () {
        this.panStart = null
    };
    B.prototype.handleEndZoom = function () {
        this.zoomStart = null
    };
    B.prototype.isWaitingForMouseEvents = function () {
        return null !== this.rotateStart || null !== this.panStart || null !== this.zoomStart
    };
    B.prototype.handleRotate = function (a) {
        null !== this.rotateStart && (this.shiftTargetRot(Math.PI * (this.rotateStart.x - a.x) / this.canvas.clientHeight, Math.PI * (a.y - this.rotateStart.y) / this.canvas.clientHeight), this.rotateStart.set(a.x, a.y))
    };
    B.prototype.handlePan = function (a) {
        null !==
        this.panStart && (this.pan(this.panSpeed * (this.panStart.x - a.x) / this.canvas.clientHeight, this.panSpeed * (this.panStart.y - a.y) / this.canvas.clientHeight, 0), this.panStart.set(a.x, a.y))
    };
    B.prototype.handleMouseZoom = function (a) {
        if (null !== this.zoomStart) {
            var b = this.zoomStart.y - a.y, c = this.getCenterIntersectionPoint(1, 25).distance * Math.tan(this.camera.fov / 2 * Math.PI / 180) * 2;
            this.pan(0, 0, -5 * c * b / this.canvas.clientHeight);
            this.zoomStart.set(a.x, a.y)
        }
    };
    B.prototype.handleWheelZoom = function (a, b) {
        this.enabled && (a = .02 *
            b * Math.abs(this.targetPos.y) / 30, 0 > a && -.8 < a ? a = -.8 : 0 < a && .8 > a && (a = .8), this.pan(0, 0, a))
    };
    B.prototype.setPredefinedPose = function (a) {
        if (this.enabled) {
            var b = this.areaOfInterest.x, c = this.areaOfInterest.y;
            switch (a) {
                case 1:
                    this.setTargetPos(.8 * -b, .4 * b, 0);
                    this.setTargetRotDeg(-90, -35);
                    break;
                case 2:
                    this.setTargetPos(.8 * -b, .4 * b, c);
                    this.setTargetRotDeg(-50, -30);
                    break;
                case 3:
                    this.setTargetPos(0, .4 * b, c);
                    this.setTargetRotDeg(35, -40);
                    break;
                case 4:
                    this.setTargetPos(0, .6 * b, 1.1 * c);
                    this.setTargetRotDeg(0, -45);
                    break;
                case 5:
                    this.setTargetPos(0,
                        .4 * b, c);
                    this.setTargetRotDeg(-35, -40);
                    break;
                case 6:
                    this.setTargetPos(.8 * b, .4 * b, c);
                    this.setTargetRotDeg(50, -30);
                    break;
                case 7:
                    this.setTargetPos(.8 * b, .4 * b, 0);
                    this.setTargetRotDeg(90, -35);
                    break;
                default:
                    this.setTargetPos(0, b, 0), this.setTargetRotDeg(0, -90)
            }
        }
    };
    B.prototype.moveLeft = function () {
        if (this.enabled) {
            var a = this.areaOfInterest.x / 300;
            this.intendedSpeed.x = -a;
            this.currentSpeed.x = -a
        }
    };
    B.prototype.moveRight = function () {
        if (this.enabled) {
            var a = this.areaOfInterest.x / 300;
            this.intendedSpeed.x = a;
            this.currentSpeed.x =
                a
        }
    };
    B.prototype.moveForward = function () {
        if (this.enabled) {
            var a = this.areaOfInterest.x / 300;
            this.intendedSpeed.z = -a;
            this.currentSpeed.z = -a
        }
    };
    B.prototype.moveBack = function () {
        if (this.enabled) {
            var a = this.areaOfInterest.x / 300;
            this.intendedSpeed.z = a;
            this.currentSpeed.z = a
        }
    };
    B.prototype.moveUp = function () {
        if (this.enabled) {
            var a = this.areaOfInterest.x / 300;
            this.intendedSpeed.y = a;
            this.currentSpeed.y = a
        }
    };
    B.prototype.moveDown = function () {
        if (this.enabled) {
            var a = this.areaOfInterest.x / 300;
            this.intendedSpeed.y = -a;
            this.currentSpeed.y =
                -a
        }
    };
    B.prototype.stopMoveLeftRight = function () {
        this.intendedSpeed.x = 0
    };
    B.prototype.stopMoveForwardBack = function () {
        this.intendedSpeed.z = 0
    };
    B.prototype.stopMoveUpDown = function () {
        this.intendedSpeed.y = 0
    };
    B.prototype.pan = function (a, b, c) {
        var d = new THREE.Vector3, e = new THREE.Vector3;
        d.setFromMatrixColumn(this.targetMatrix, 0);
        d.multiplyScalar(a);
        e.setFromMatrixColumn(this.targetMatrix, 1);
        e.multiplyScalar(b);
        d.add(e);
        e.setFromMatrixColumn(this.targetMatrix, 2);
        e.multiplyScalar(c);
        d.sub(e);
        this.shiftTargetPos(d.x,
            d.y, d.z)
    };
    B.prototype.move = function (a, b, c) {
        var d = new THREE.Vector3, e = new THREE.Vector3;
        d.setFromMatrixColumn(this.targetMatrix, 0);
        d.multiplyScalar(a);
        e.setFromMatrixColumn(this.targetMatrix, 2);
        if (-.99 > e.y || .99 < e.y) e.setFromMatrixColumn(this.targetMatrix, 1), e.negate();
        e.y = 0;
        e.normalize();
        e.multiplyScalar(b);
        d.add(e);
        this.shiftTargetPos(d.x, c, d.z)
    };
    var J = function (a, b, c, d) {
        this.domElement = document.createElement("div");
        this.domElement.tabIndex = 0;
        this.domElement.className = "jsm-input-pane full-size";
        var e =
            h.createDiv("dnd-box");
        e.innerHTML = "<span>Drop Replays or SServer Logs to Play</span>";
        this.domElement.appendChild(e);
        this.model = a;
        this.fullscreenManager = c;
        this.dndHandler = d;
        this.camCon = new B(b.camera, b.renderer.domElement);
        this.enabled = !0;
        this.selectedObject = null;
        this.docMouseEnabled = this.playPauseAction = this.selectAction = !1;
        this.onContextMenuListener = this.onContextMenu.bind(this);
        this.onMouseDownListener = this.onMouseDown.bind(this);
        this.onMouseUpListener = this.onMouseUp.bind(this);
        this.onMouseMoveListener =
            this.onMouseMove.bind(this);
        this.onMouseWheelListener = this.onMouseWheel.bind(this);
        this.onMouseInListener = this.onMouseIn.bind(this);
        this.onTouchStartListener = this.onTouchStart.bind(this);
        this.onTouchEndListener = this.onTouchEnd.bind(this);
        this.onTouchMoveListener = this.onTouchMove.bind(this);
        this.onKeyDownListener = this.onKeyDown.bind(this);
        this.onKeyPressedListener = this.onKeyPressed.bind(this);
        this.onKeyUpListener = this.onKeyUp.bind(this);
        this.dndHandler.addListeners(this.domElement);
        this.domElement.addEventListener("contextmenu",
            this.onContextMenuListener);
        this.domElement.addEventListener("mousedown", this.onMouseDownListener);
        this.domElement.addEventListener("mousewheel", this.onMouseWheelListener);
        this.domElement.addEventListener("MozMousePixelScroll", this.onMouseWheelListener);
        this.domElement.addEventListener("keydown", this.onKeyDownListener);
        this.domElement.addEventListener("keypress", this.onKeyPressedListener);
        this.domElement.addEventListener("keyup", this.onKeyUpListener);
        b.cameraController = this.camCon
    };
    J.prototype.setEnabled =
        function (a) {
            this.enabled !== a && (this.enabled = a)
        };
    J.prototype.selectObject = function (a) {
        null !== this.selectedObject && this.selectedObject.setSelected(!1);
        this.selectedObject = a;
        null !== this.selectedObject && this.selectedObject.setSelected(!0)
    };
    J.prototype.onContextMenu = function (a) {
        this.enabled && a.preventDefault()
    };
    J.prototype.onMouseDown = function (a) {
        if (this.enabled) {
            this.docMouseEnabled || (this.docMouseEnabled = !0, document.addEventListener("mouseup", this.onMouseUpListener), document.addEventListener("mousemove",
                this.onMouseMoveListener), document.addEventListener("mouseover", this.onMouseInListener));
            var b = J.eventToLocalCenterPos(this.domElement, a);
            switch (a.button) {
                case THREE.MOUSE.LEFT:
                    this.camCon.handleStartRotate(b);
                    this.selectAction = !0;
                    break;
                case THREE.MOUSE.MIDDLE:
                    this.camCon.handleStartZoom(b);
                    this.playPauseAction = !0;
                    break;
                case THREE.MOUSE.RIGHT:
                    this.camCon.handleStartPan(b)
            }
        }
    };
    J.prototype.onMouseUp = function (a) {
        if (this.enabled) {
            J.eventToLocalCenterPos(this.domElement, a);
            switch (a.button) {
                case THREE.MOUSE.LEFT:
                    this.camCon.handleEndRotate();
                    this.selectAction && this.selectObject(null);
                    break;
                case THREE.MOUSE.MIDDLE:
                    this.camCon.handleEndZoom();
                    this.playPauseAction && this.model.logPlayer.playPause();
                    break;
                case THREE.MOUSE.RIGHT:
                    this.camCon.handleEndPan()
            }
            this.camCon.isWaitingForMouseEvents() || (this.docMouseEnabled = !1, document.removeEventListener("mouseup", this.onMouseUpListener), document.removeEventListener("mousemove", this.onMouseMoveListener), document.removeEventListener("mouseover", this.onMouseInListener))
        }
    };
    J.prototype.onMouseMove = function (a) {
        this.enabled &&
        (a.preventDefault(), a.stopPropagation(), this.playPauseAction = this.selectAction = !1, a = J.eventToLocalCenterPos(this.domElement, a), this.camCon.handleRotate(a), this.camCon.handleMouseZoom(a), this.camCon.handlePan(a))
    };
    J.prototype.onMouseWheel = function (a) {
        if (this.enabled) {
            a.preventDefault();
            a.stopPropagation();
            var b = 0;
            void 0 !== a.wheelDelta ? b = a.wheelDelta : void 0 !== a.detail && (b = -a.detail);
            0 !== b && (a = J.eventToLocalCenterPos(this.domElement, a), this.camCon.handleWheelZoom(a, b))
        }
    };
    J.prototype.onMouseIn = function (a) {
        this.enabled &&
        (0 === (1 & a.buttons) && this.camCon.handleEndRotate(), 0 === (2 & a.buttons) && this.camCon.handleEndPan(), 0 === (4 & a.buttons) && this.camCon.handleEndZoom(), this.camCon.isWaitingForMouseEvents() || (this.docMouseEnabled = !1, document.removeEventListener("mouseup", this.onMouseUpListener), document.removeEventListener("mousemove", this.onMouseMoveListener), document.removeEventListener("mouseover", this.onMouseInListener)))
    };
    J.prototype.onTouchStart = function (a) {
    };
    J.prototype.onTouchEnd = function (a) {
    };
    J.prototype.onTouchMove =
        function (a) {
        };
    J.prototype.onKeyDown = function (a) {
        if (this.enabled) switch (a.keyCode) {
            case D.LEFT:
            case D.A:
                this.camCon.moveLeft();
                break;
            case D.UP:
            case D.W:
                this.camCon.moveForward();
                break;
            case D.RIGHT:
            case D.D:
                this.camCon.moveRight();
                break;
            case D.DOWN:
            case D.S:
                this.camCon.moveBack();
                break;
            case D.PAGE_UP:
            case D.Q:
                this.camCon.moveUp();
                break;
            case D.PAGE_DOWN:
            case D.E:
                this.camCon.moveDown()
        }
    };
    J.prototype.onKeyPressed = function (a) {
        if (this.enabled) {
            var b = !1;
            switch (a.charCode) {
                case S.ZERO:
                    this.selectObject(this.model.world.ball);
                    break;
                case S.ONE:
                    this.camCon.setPredefinedPose(0);
                    break;
                case S.TWO:
                    this.camCon.setPredefinedPose(1);
                    break;
                case S.THREE:
                    this.camCon.setPredefinedPose(2);
                    break;
                case S.FOUR:
                    this.camCon.setPredefinedPose(3);
                    break;
                case S.FIVE:
                    this.camCon.setPredefinedPose(4);
                    break;
                case S.SIX:
                    this.camCon.setPredefinedPose(5);
                    break;
                case S.SEVEN:
                    this.camCon.setPredefinedPose(6);
                    break;
                case S.EIGHT:
                    this.camCon.setPredefinedPose(7);
                    break;
                case S.p:
                    this.model.logPlayer.playPause();
                    break;
                case S.PLUS:
                    a.ctrlKey || this.model.logPlayer.step();
                    break;
                case S.MINUS:
                    a.ctrlKey || this.model.logPlayer.step(!0);
                    break;
                case S.SPACE:
                    b = !0;
                    null === this.camCon.trackingObject ? this.camCon.trackObject(this.model.world.ball.objGroup) : this.camCon.trackObject(null);
                    break;
                case S.ENTER:
                    a.ctrlKey && this.fullscreenManager.toggleFullscreen()
            }
            if (0 === a.charCode) switch (a.keyCode) {
                case D.ENTER:
                    a.ctrlKey && this.fullscreenManager.toggleFullscreen()
            }
            b && (a.preventDefault(), a.stopPropagation())
        }
    };
    J.prototype.onKeyUp = function (a) {
        if (this.enabled) switch (a.keyCode) {
            case D.LEFT:
            case D.A:
            case D.RIGHT:
            case D.D:
                this.camCon.stopMoveLeftRight();
                break;
            case D.UP:
            case D.W:
            case D.DOWN:
            case D.S:
                this.camCon.stopMoveForwardBack();
                break;
            case D.PAGE_UP:
            case D.Q:
            case D.PAGE_DOWN:
            case D.E:
                this.camCon.stopMoveUpDown()
        }
    };
    J.eventToLocalPos = function (a, b) {
        a = a.getBoundingClientRect();
        return new THREE.Vector2(b.clientX - a.left, b.clientY - a.top)
    };
    J.eventToLocalCenterPos = function (a, b) {
        var c = a.clientWidth / 2, d = a.clientHeight / 2;
        a = a.getBoundingClientRect();
        return new THREE.Vector2(b.clientX - a.left - c, d - b.clientY + a.top)
    };
    var Na = function (a) {
        var b = I.call(this, "jsm-loading-bar") ||
            this;
        b.gameLogLoader = a;
        b.progressBar = document.createElement("div");
        b.progressBar.style.width = "0px";
        b.domElement.appendChild(b.progressBar);
        b.label = document.createElement("span");
        b.label.innerHTML = "0 / 0 KB";
        b.domElement.appendChild(b.label);
        b.setVisible(!1);
        b.handleLoadStartListener = b.handleLoadStart.bind(b);
        b.handleLoadProgressListener = b.handleLoadProgress.bind(b);
        b.handleLoadEndListener = b.handleLoadEnd.bind(b);
        b.gameLogLoader.addEventListener("start", b.handleLoadStartListener);
        b.gameLogLoader.addEventListener("progress",
            b.handleLoadProgressListener);
        b.gameLogLoader.addEventListener("finished", b.handleLoadEndListener);
        b.gameLogLoader.addEventListener("error", b.handleLoadEndListener);
        return b
    };
    $jscomp.inherits(Na, I);
    Na.prototype.handleLoadStart = function (a) {
        this.progressBar.style.width = "0%";
        this.label.innerHTML = "0 / 0 MB";
        this.setVisible(!0)
    };
    Na.prototype.handleLoadProgress = function (a) {
        this.setProgress(100 * a.loaded / a.total, a.loaded / 1E6, a.total / 1E6)
    };
    Na.prototype.handleLoadEnd = function (a) {
        this.setVisible(!1)
    };
    Na.prototype.setProgress =
        function (a, b, c) {
            this.progressBar.style.width = "" + a.toFixed(1) + "%";
            this.label.innerHTML = "" + b.toFixed(3) + " / " + c.toFixed(3) + " MB"
        };
    var Ca = function (a, b) {
        var c = I.call(this, "overlay full-size") || this;
        c.innerElement = h.createDiv(a);
        c.domElement.appendChild(c.innerElement);
        a = function (d) {
            c.setVisible(!1);
            d.stopPropagation()
        };
        c.domElement.addEventListener("mousedown", a);
        c.domElement.addEventListener("ontouchstart", a);
        b || (c.innerElement.addEventListener("mousedown", h.StopEventPropagationListener), c.innerElement.addEventListener("ontouchstart",
            h.StopEventPropagationListener));
        c.setVisible(!1);
        return c
    };
    $jscomp.inherits(Ca, I);
    var Fb = function () {
        var a = Ca.call(this, "info-pane centered") || this;
        a.innerElement.innerHTML = '<h1>JaSMIn</h1><h4>Javascript Soccer Monitor Interface</h4><h5>v0.3</h5><a href="https://gitlab.com/robocup-sim/JaSMIn" target="_blank">JaSMIn on GitLab</a><h6>Author</h6><span class="author">Stefan Glaser</span><h6>Acknowledgements</h6><span class="acknowledgement">JaSMIn is using <a href="https://www.threejs.org">threejs</a> for webgl rendering.</span><span class="acknowledgement">The 3D models and textures are partially taken from <a href="https://github.com/magmaOffenburg/RoboViz">RoboViz</a>, respectively <a href="https://sourceforge.net/projects/simspark/">SimSpark</a>.</span>';
        return a
    };
    $jscomp.inherits(Fb, Ca);
    var Oa = function () {
        this.panels = [];
        this.activePanel = null;
        this.visibilityListener = this.onVisibilityChanged.bind(this)
    };
    Oa.prototype.add = function (a) {
        -1 === this.panels.indexOf(a) && (h.setVisibility(a.domElement, !1), this.panels.push(a), a.onVisibilityChanged = this.visibilityListener)
    };
    Oa.prototype.hasActivePanel = function () {
        return null !== this.activePanel
    };
    Oa.prototype.hideAll = function () {
        null !== this.activePanel && (h.setVisibility(this.activePanel.domElement, !1), this.activePanel =
            null)
    };
    Oa.prototype.onVisibilityChanged = function (a) {
        if (a.isVisible()) {
            for (var b = 0; b < this.panels.length; b++) this.panels[b] !== a && h.setVisibility(this.panels[b].domElement, !1);
            this.activePanel = a
        } else this.activePanel === a && (this.activePanel = null)
    };
    var Za = function (a, b, c, d) {
        this.domElement = h.createLI(d);
        this.domElement.appendChild(h.createSpan(a));
        this.domElement.appendChild(h.createDiv("spcaer"));
        this.form = h.createSingleChoiceForm(b, c);
        this.domElement.appendChild(this.form);
        this.form.onchange = this.onFormChangeListener.bind(this);
        this.onChanged = void 0
    };
    Za.prototype.onFormChangeListener = function () {
        for (var a = this.form.elements.userOptions, b = a.length; b--;) if (a[b].checked) {
            if (this.onChanged) this.onChanged(b, a[b].value);
            return
        }
        if (this.onChanged) this.onChanged()
    };
    Za.prototype.selectIndex = function (a) {
        a = this.form.elements.userOptions[a];
        void 0 !== a && (a.checked = !0)
    };
    Za.prototype.selectOption = function (a) {
        for (var b = this.form.elements.userOptions, c = b.length; c--;) if (b[c].value == a) {
            1 != b[c].checked && (b[c].checked = !0);
            break
        }
    };
    var ya = function (a,
                       b, c, d, e) {
        a = Za.call(this, a, [b, c], d ? 0 : 1, "toggle-item" + (void 0 === e ? "" : " " + e)) || this;
        a.domElement.onclick = a.toggle.bind(a);
        return a
    };
    $jscomp.inherits(ya, Za);
    ya.prototype.onFormChangeListener = function () {
        if (this.onChanged) this.onChanged(1 == this.form.elements.userOptions[0].checked)
    };
    ya.prototype.toggle = function () {
        var a = 1 == this.form.elements.userOptions[0].checked;
        a ? this.form.elements.userOptions[1].checked = !0 : this.form.elements.userOptions[0].checked = !0;
        if (this.onChanged) this.onChanged(!a)
    };
    ya.prototype.setState =
        function (a) {
            a ? this.form.elements.userOptions[0].checked = !0 : this.form.elements.userOptions[1].checked = !0
        };
    var da = function (a) {
        var b = Ca.call(this, "jsm-playlist") || this;
        b.logPlayer = a;
        b.playlist = a.playlist;
        a = h.createDiv("title-bar");
        b.innerElement.appendChild(a);
        b.titleLbl = h.createSpan("My Playlist", "title");
        a.appendChild(b.titleLbl);
        a = h.createDiv("settings-bar");
        b.innerElement.appendChild(a);
        var c = h.createSpan("Autoplay", "label");
        c.title = "Toggle Autoplay";
        c.onclick = b.toggleAutoplay.bind(b);
        a.appendChild(c);
        b.autoplayForm = h.createSingleChoiceForm(["On", "Off"]);
        a.appendChild(b.autoplayForm);
        b.autoplayForm.onchange = b.handleAutoplayFormChange.bind(b);
        a = h.createDiv("content-box");
        b.innerElement.appendChild(a);
        b.entryList = h.createUL("playlist");
        a.appendChild(b.entryList);
        b.handlePlaylistChangeListener = b.handlePlaylistChange.bind(b);
        b.handlePlaylistUpdateListener = b.handlePlaylistUpdate.bind(b);
        b.handleAutoplayChangeListener = b.refreshAutoplay.bind(b);
        b.refreshSelectionsListener = b.refreshSelections.bind(b);
        b.refreshListingListener = b.refreshListing.bind(b);
        b.playEntryListener = b.playEntry.bind(b);
        b.logPlayer.addEventListener("playlist-change", b.handlePlaylistChangeListener);
        b.logPlayer.addEventListener("game-log-change", b.refreshSelectionsListener);
        null !== b.playlist && (b.refreshListing(), b.refreshAutoplay(), b.playlist.addEventListener("update", b.handlePlaylistUpdateListener), b.playlist.addEventListener("change", b.refreshListingListener), b.playlist.addEventListener("active-change", b.refreshSelectionsListener),
            b.playlist.addEventListener("autoplay-change", b.handleAutoplayChangeListener));
        return b
    };
    $jscomp.inherits(da, Ca);
    da.prototype.refreshListing = function () {
        var a = 0, b = [], c = this.logPlayer.playlistIndex, d = -1;
        null !== this.playlist ? (d = this.playlist.activeIndex, b = this.playlist.entries, this.titleLbl.innerHTML = this.playlist.title) : this.titleLbl.innerHTML = "n/a";
        for (var e = 0; e < this.entryList.children.length; e++) {
            var g = this.entryList.children[e];
            if ("LI" === g.nodeName) {
                var m = b[a];
                this.refreshEntry(g, m, a);
                this.refreshEntryClass(g,
                    c, d);
                a++
            }
        }
        for (; a < b.length;) m = b[a], g = h.createLI("entry"), g.tabIndex = 0, this.refreshEntry(g, m, a), this.refreshEntryClass(g, c, d), g.addEventListener("click", this.playEntryListener, !1), g.addEventListener("keydown", this.playEntryListener, !1), this.entryList.appendChild(g), a++
    };
    da.prototype.refreshEntryClass = function (a, b, c) {
        var d = parseInt(a.dataset.entryIdx, 10);
        a.className = "entry";
        d === b ? a.className += " playing" : d === c && (a.className += " selected");
        "true" !== a.dataset.valid && (a.className += " error")
    };
    da.prototype.refreshEntry =
        function (a, b, c) {
            void 0 === c || void 0 === b ? (a.dataset.entryIdx = -1, a.dataset.valid = "false", a.title = "", a.innerHTML = "", h.setVisibility(a, !1)) : (a.dataset.entryIdx = c, a.dataset.valid = null === b.errorMsg, a.title = null !== b.errorMsg ? b.errorMsg : "", a.innerHTML = b.title, h.setVisibility(a, !0))
        };
    da.prototype.refreshAutoplay = function () {
        null !== this.playlist && (this.autoplayForm.elements.userOptions[this.playlist.autoplay ? 0 : 1].checked = !0)
    };
    da.prototype.refreshSelections = function () {
        if (null !== this.playlist) for (var a = this.logPlayer.playlistIndex,
                                             b = this.playlist.activeIndex, c, d = 0; d < this.entryList.children.length; d++) c = this.entryList.children[d], "LI" === c.nodeName && this.refreshEntryClass(c, a, b)
    };
    da.prototype.playEntry = function (a) {
        if (h.isButtonAction(a) && null !== this.playlist) {
            var b = a.target.dataset.entryIdx;
            void 0 !== b && "true" === a.target.dataset.valid && this.playlist.setActiveIndex(parseInt(b, 10))
        }
    };
    da.prototype.handleAutoplayFormChange = function () {
        null !== this.playlist && (this.autoplayForm.elements.userOptions[0].checked ? this.playlist.setAutoplay(!0) :
            this.playlist.setAutoplay(!1))
    };
    da.prototype.toggleAutoplay = function () {
        null !== this.playlist && this.playlist.setAutoplay(!this.playlist.autoplay)
    };
    da.prototype.handlePlaylistUpdate = function (a) {
        var b = a.index;
        a = a.entry;
        for (var c = 0; c < this.entryList.children.length; c++) {
            var d = this.entryList.children[c];
            if ("LI" === d.nodeName && b === parseInt(d.dataset.entryIdx, 10)) {
                null !== a.errorMsg ? (d.dataset.valid = !1, d.title = a.errorMsg) : (d.dataset.valid = !0, d.title = "");
                this.refreshEntryClass(d, this.logPlayer.playlistIndex,
                    this.playlist.activeIndex);
                break
            }
        }
    };
    da.prototype.handlePlaylistChange = function (a) {
        null !== this.playlist && (this.playlist.removeEventListener("update", this.handlePlaylistUpdateListener), this.playlist.removeEventListener("change", this.refreshListingListener), this.playlist.removeEventListener("active-change", this.refreshSelectionsListener), this.playlist.removeEventListener("autoplay-change", this.handleAutoplayChangeListener));
        this.playlist = this.logPlayer.playlist;
        this.refreshListing();
        this.refreshAutoplay();
        null !== this.playlist ? (this.playlist.addEventListener("update", this.handlePlaylistUpdateListener), this.playlist.addEventListener("change", this.refreshListingListener), this.playlist.addEventListener("active-change", this.refreshSelectionsListener), this.playlist.addEventListener("autoplay-change", this.handleAutoplayChangeListener)) : this.setVisible(!1)
    };
    var Da = function (a) {
        var b = Ca.call(this, "jsm-settings") || this;
        b.config = a;
        b.mainMenu = h.createUL("jsm-menu");
        b.innerElement.appendChild(b.mainMenu);
        b.interpolateItem =
            new ya("Interpolation", "On", "Off", a.interpolateStates, "item");
        b.interpolateItem.onChanged = function (c) {
            a.setInterpolateStates(c)
        };
        b.mainMenu.appendChild(b.interpolateItem.domElement);
        b.shadowsItem = new ya("Shadows", "On", "Off", a.shadowsEnabled, "item");
        b.shadowsItem.onChanged = function (c) {
            a.setShadowsEnabled(c)
        };
        b.mainMenu.appendChild(b.shadowsItem.domElement);
        b.statisticsItem = new ya("Monitor Statistics", "On", "Off", a.glInfoEnabled, "item");
        b.statisticsItem.onChanged = function (c) {
            a.setGLInfoEnabled(c)
        };
        b.mainMenu.appendChild(b.statisticsItem.domElement);
        b.teamColorsItem = new ya("Team Colors", "Fix", "Auto", a.teamColorsEnabled, "item");
        b.teamColorsItem.onChanged = function (c) {
            a.setTeamColorsEnabled(c);
            b.teamColorChooserItem.style.height = c ? b.teamColorChooserItem.scrollHeight + "px" : "0px"
        };
        b.mainMenu.appendChild(b.teamColorsItem.domElement);
        b.teamColorChooserItem = h.createDiv("collapsable");
        b.teamColorChooserItem.onclick = function (c) {
            c.stopPropagation()
        };
        a.teamColorsEnabled || (b.teamColorChooserItem.style.height = "0px");
        b.leftTeamColorChooser = h.createColorChooser("#" +
            a.leftTeamColor.getHexString(), "Left team color", "team-color");
        b.leftTeamColorChooser.onchange = function () {
            a.setTeamColor(b.leftTeamColorChooser.value, !0)
        };
        b.rightTeamColorChooser = h.createColorChooser("#" + a.rightTeamColor.getHexString(), "Right team color", "team-color");
        b.rightTeamColorChooser.onchange = function () {
            a.setTeamColor(b.rightTeamColorChooser.value, !1)
        };
        b.teamColorChooserItem.appendChild(b.leftTeamColorChooser);
        b.teamColorChooserItem.appendChild(b.rightTeamColorChooser);
        b.teamColorsItem.domElement.appendChild(b.teamColorChooserItem);
        b.handleConfigChangeListener = b.handleConfigChange.bind(b);
        b.config.addEventListener("change", b.handleConfigChangeListener);
        return b
    };
    $jscomp.inherits(Da, Ca);
    Da.prototype.handleConfigChange = function (a) {
        switch (a.property) {
            case "interpolateStates":
                this.applyInterpolationSettings();
                break;
            case "teamColorsEnabled":
            case "teamColorLeft":
            case "teamColorRight":
                this.applyTeamColorSettings();
                break;
            case "shadowsEnabled":
                this.applyShadowSettings();
                break;
            case "glInfoEnabled":
                this.applyGLInfoSettings()
        }
    };
    Da.prototype.applyTeamColorSettings =
        function () {
            var a = this.config.teamColorsEnabled;
            this.teamColorsItem.setState(a);
            this.teamColorChooserItem.style.height = a ? this.teamColorChooserItem.scrollHeight + "px" : "0px";
            this.leftTeamColorChooser.value = "#" + this.config.leftTeamColor.getHexString();
            this.rightTeamColorChooser.value = "#" + this.config.rightTeamColor.getHexString()
        };
    Da.prototype.applyShadowSettings = function () {
        this.shadowsItem.setState(this.config.shadowsEnabled)
    };
    Da.prototype.applyInterpolationSettings = function () {
        this.interpolateItem.setState(this.config.interpolateStates)
    };
    Da.prototype.applyGLInfoSettings = function () {
        this.statisticsItem.setState(this.config.glInfoEnabled)
    };
    var $a = function () {
        var a = I.call(this, "jsm-game-info no-text-select") || this;
        var b = h.createDiv("info-line");
        a.domElement.appendChild(b);
        var c = h.createDiv("state-line");
        a.domElement.appendChild(c);
        a.gameTimeLbl = h.createSpan("00:00.<small>00</small>", "game_time_lbl");
        b.appendChild(a.gameTimeLbl);
        a.leftTeamLbl = h.createSpan("Left", "left-team");
        b.appendChild(a.leftTeamLbl);
        a.leftScoreLbl = h.createSpan("0",
            "left-score");
        b.appendChild(a.leftScoreLbl);
        a.scoreDividerLbl = h.createSpan(":", "score-divider");
        b.appendChild(a.scoreDividerLbl);
        a.rightScoreLbl = h.createSpan("0", "right-score");
        b.appendChild(a.rightScoreLbl);
        a.rightTeamLbl = h.createSpan("Right", "right-team");
        b.appendChild(a.rightTeamLbl);
        a.gameStateLbl = h.createSpan("Unknown", "game_state_lbl");
        c.appendChild(a.gameStateLbl);
        a.previousWorldState = null;
        return a
    };
    $jscomp.inherits($a, I);
    $a.prototype.update = function (a) {
        a ? (null === this.previousWorldState ? (this.gameTimeLbl.innerHTML =
            h.toMMSScs(a.gameTime, !0), this.gameStateLbl.innerHTML = a.gameState.playMode, this.leftScoreLbl.innerHTML = a.score.goalsLeft, this.rightScoreLbl.innerHTML = a.score.goalsRight) : (this.previousWorldState.gameTime !== a.gameTime && (this.gameTimeLbl.innerHTML = h.toMMSScs(a.gameTime, !0)), this.previousWorldState.gameState !== a.gameState && (this.gameStateLbl.innerHTML = a.gameState.playMode), this.previousWorldState.score !== a.score && (this.leftScoreLbl.innerHTML = a.score.goalsLeft, this.rightScoreLbl.innerHTML = a.score.goalsRight)),
            this.previousWorldState = a) : (this.gameTimeLbl.innerHTML = "00:00.<small>00</small>", this.gameStateLbl.innerHTML = "Unknown", this.leftScoreLbl.innerHTML = "0", this.rightScoreLbl.innerHTML = "0", this.previousWorldState = null)
    };
    $a.prototype.updateTeamNames = function (a, b) {
        this.leftTeamLbl.innerHTML = a;
        this.rightTeamLbl.innerHTML = b
    };
    $a.prototype.updateTeamColors = function (a, b) {
        var c = h.getForegroundColor(a);
        this.leftTeamLbl.style.backgroundColor = this.leftScoreLbl.style.backgroundColor = a.getStyle();
        this.leftTeamLbl.style.color =
            this.leftScoreLbl.style.color = c.getStyle();
        a = h.getForegroundColor(b);
        this.rightTeamLbl.style.backgroundColor = this.rightScoreLbl.style.backgroundColor = b.getStyle();
        this.rightTeamLbl.style.color = this.rightScoreLbl.style.color = a.getStyle()
    };
    var V = function (a, b) {
        var c = I.call(this, "jsm-player-pane full-size") || this;
        c.model = a;
        c.fullscreenManager = b;
        c.infoOverlay = new Fb;
        c.appendChild(c.infoOverlay.domElement);
        c.settingsOverlay = new Da(a.settings.monitorConfig);
        c.appendChild(c.settingsOverlay.domElement);
        c.playlistOverlay =
            new da(a.logPlayer);
        c.appendChild(c.playlistOverlay.domElement);
        c.overlayGroup = new Oa;
        c.overlayGroup.add(c.infoOverlay);
        c.overlayGroup.add(c.settingsOverlay);
        c.overlayGroup.add(c.playlistOverlay);
        c.shadowPane = h.createDiv("jsm-shadow-pane");
        c.appendChild(c.shadowPane);
        c.gameInfoBoard = new $a;
        c.gameInfoBoard.setVisible(!1);
        c.domElement.appendChild(c.gameInfoBoard.domElement);
        c.waitingIndicator = h.createDiv("jsm-waiting-indicator no-text-select");
        c.waitingIndicator.title = "Waiting for new stream data...";
        c.appendChild(c.waitingIndicator);
        h.setVisibility(c.waitingIndicator, !1);
        c.barPane = h.createDiv("jsm-player-bar");
        c.appendChild(c.barPane);
        c.timeSlider = document.createElement("input");
        c.timeSlider.className = "time-slider";
        c.timeSlider.type = "range";
        c.timeSlider.min = 0;
        c.timeSlider.max = 6E3;
        c.timeSlider.step = 1;
        c.timeSlider.value = 0;
        c.timeSlider.addEventListener("change", function (d) {
            c.model.logPlayer.jump(this.value)
        });
        c.timeSlider.addEventListener("input", function (d) {
            c.model.logPlayer.jump(this.value)
        });
        h.setVisibility(c.timeSlider, !1);
        c.barPane.appendChild(c.timeSlider);
        c.leftPane = h.createDiv("left");
        h.setVisibility(c.leftPane, !1);
        c.barPane.appendChild(c.leftPane);
        c.rightPane = h.createDiv("right");
        c.barPane.appendChild(c.rightPane);
        c.playBtn = h.createPlayerButton("", "player-btn icon-play", "Play", function () {
            c.overlayGroup.hideAll();
            c.model.logPlayer.playPause()
        }, !0);
        c.leftPane.appendChild(c.playBtn);
        c.jumpPreviousGoalBtn = h.createPlayerButton("", "player-btn icon-jump-prev", "Jump Previous Goal", function () {
            c.overlayGroup.hideAll();
            c.model.logPlayer.jumpGoal(!0)
        }, !0);
        c.leftPane.appendChild(c.jumpPreviousGoalBtn);
        c.stepBackwardsBtn = h.createPlayerButton("", "player-btn icon-step-back", "Step Backwards", function () {
            c.overlayGroup.hideAll();
            c.model.logPlayer.step(!0)
        }, !0);
        c.leftPane.appendChild(c.stepBackwardsBtn);
        c.stepForwardBtn = h.createPlayerButton("", "player-btn icon-step-fwd", "Step Forwards", function () {
            c.overlayGroup.hideAll();
            c.model.logPlayer.step()
        }, !0);
        c.leftPane.appendChild(c.stepForwardBtn);
        c.jumpNextGoalBtn = h.createPlayerButton("",
            "player-btn icon-jump-next", "Jump Next Goal", function () {
                c.overlayGroup.hideAll();
                c.model.logPlayer.jumpGoal()
            }, !0);
        c.leftPane.appendChild(c.jumpNextGoalBtn);
        c.currentTimeLbl = h.createSpan("0:00.<small>00</small>", "current-time");
        c.leftPane.appendChild(c.currentTimeLbl);
        c.timeDividerLbl = h.createSpan("/", "time-divider");
        c.leftPane.appendChild(c.timeDividerLbl);
        c.totalTimeLbl = h.createSpan("0:00", "total-time");
        c.leftPane.appendChild(c.totalTimeLbl);
        c.playlistBtn = h.createPlayerButton("", "player-btn icon-playlist",
            "Playlist", function () {
                c.playlistOverlay.toggleVisibility()
            }, !0);
        c.rightPane.appendChild(c.playlistBtn);
        h.setVisibility(c.playlistBtn, null !== c.model.logPlayer.playlist);
        c.infoBtn = h.createPlayerButton("", "player-btn icon-info", "Info", function () {
            c.infoOverlay.toggleVisibility()
        }, !0);
        c.rightPane.appendChild(c.infoBtn);
        c.settingsBtn = h.createPlayerButton("", "player-btn icon-settings", "Settings", function () {
            c.settingsOverlay.toggleVisibility()
        }, !0);
        c.rightPane.appendChild(c.settingsBtn);
        c.fullscreenBtn = h.createPlayerButton("",
            "player-btn icon-fullscreen", "Fullscreen", function () {
                c.overlayGroup.hideAll();
                c.fullscreenManager.toggleFullscreen()
            }, !0);
        c.rightPane.appendChild(c.fullscreenBtn);
        h.isFullscreenEnabled() || (c.fullscreenBtn.disabled = !0, c.fullscreenBtn.title = "Fullscreen not supported!");
        c.handleFullscreenChangeListener = c.handleFullscreenChange.bind(c);
        c.handleMonitorStateChangeListener = c.handleMonitorStateChange.bind(c);
        c.handlePlayerStateChangeListener = c.handlePlayerStateChange.bind(c);
        c.handlePlayerTimeChangeListener =
            c.handlePlayerTimeChange.bind(c);
        c.handleGameLogUpdatedListener = c.handleGameLogUpdated.bind(c);
        c.handleGameLogChangeListener = c.handleGameLogChange.bind(c);
        c.handlePlaylistChangeListener = c.handlePlaylistChange.bind(c);
        c.model.addEventListener("state-change", c.handleMonitorStateChangeListener);
        c.fullscreenManager.addEventListener("change", c.handleFullscreenChangeListener);
        return c
    };
    $jscomp.inherits(V, I);
    V.prototype.refreshControls = function () {
        h.setVisibility(this.waitingIndicator, !1);
        "replay" === this.model.state ?
            (h.setVisibility(this.timeSlider, !0), h.setVisibility(this.leftPane, !0), h.setVisibility(this.playlistBtn, null !== this.model.logPlayer.playlist), 0 === this.model.logPlayer.state ? (this.timeSlider.disabled = !0, this.playBtn.disabled = !0, this.jumpPreviousGoalBtn.disabled = !0, this.stepBackwardsBtn.disabled = !0, this.stepForwardBtn.disabled = !0, this.jumpNextGoalBtn.disabled = !0, this.gameInfoBoard.setVisible(!1), this.currentTimeLbl.innerHTML = "0:00.<small>00</small>", this.totalTimeLbl.innerHTML = "0:00") : (this.timeSlider.disabled =
                !1, this.playBtn.disabled = !1, this.jumpPreviousGoalBtn.disabled = !1, this.stepBackwardsBtn.disabled = !1, this.stepForwardBtn.disabled = !1, this.jumpNextGoalBtn.disabled = !1, this.gameInfoBoard.setVisible(!0), this.gameInfoBoard.updateTeamNames(this.model.logPlayer.gameLog.leftTeam.name, this.model.logPlayer.gameLog.rightTeam.name), this.gameInfoBoard.update(this.model.logPlayer.getCurrentWorldState()), this.updateTeamColors(), this.timeSlider.value = this.model.logPlayer.playIndex, this.timeSlider.max = this.model.logPlayer.gameLog.states.length -
                1, this.updateSliderBackground(), this.currentTimeLbl.innerHTML = h.toMMSScs(this.model.logPlayer.playTime), this.totalTimeLbl.innerHTML = h.toMMSS(this.model.logPlayer.gameLog.duration)), h.setVisibility(this.waitingIndicator, 3 === this.model.logPlayer.state), this.refreshPlayBtn()) : (h.setVisibility(this.timeSlider, !1), h.setVisibility(this.leftPane, !1), h.setVisibility(this.playlistBtn, !1), this.gameInfoBoard.setVisible(!1))
    };
    V.prototype.updateSliderBackground = function () {
        var a = this.timeSlider.value / this.timeSlider.max *
            100;
        this.timeSlider.style.background = "-webkit-linear-gradient(left, #e00 0%, #e00 " + a + "%, rgba(204,204,204, 0.7) " + a + "%)"
    };
    V.prototype.updateJumpGoalButtons = function () {
        this.jumpPreviousGoalBtn.disabled = 0 === this.model.logPlayer.passedGoals;
        this.jumpNextGoalBtn.disabled = 0 === this.model.logPlayer.upcomingGoals
    };
    V.prototype.updateTeamColors = function () {
        var a = this.model.world, b = this.model.settings.monitorConfig;
        b.teamColorsEnabled ? (a.leftTeam.setColor(b.leftTeamColor), a.rightTeam.setColor(b.rightTeamColor),
            this.gameInfoBoard.updateTeamColors(b.leftTeamColor, b.rightTeamColor)) : (a.leftTeam.setColor(), a.rightTeam.setColor(), this.gameInfoBoard.updateTeamColors(a.leftTeam.description.color, a.rightTeam.description.color))
    };
    V.prototype.refreshPlayBtn = function () {
        switch (this.model.logPlayer.state) {
            case 2:
            case 3:
                h.setIcon(this.playBtn, "icon-pause");
                this.playBtn.title = "Pause";
                break;
            case 4:
                h.setIcon(this.playBtn, "icon-replay");
                this.playBtn.title = "Replay";
                break;
            default:
                h.setIcon(this.playBtn, "icon-play"), this.playBtn.title =
                    "Play"
        }
    };
    V.prototype.handleFullscreenChange = function (a) {
        this.fullscreenManager.isFullscreen() ? (h.setIcon(this.fullscreenBtn, "icon-partscreen"), this.fullscreenBtn.title = "Leave Fullscreen") : (h.setIcon(this.fullscreenBtn, "icon-fullscreen"), this.fullscreenBtn.title = "Fullscreen")
    };
    V.prototype.handleGameLogChange = function (a) {
        this.timeSlider.value = this.model.logPlayer.playIndex;
        if (a = this.model.logPlayer.gameLog) this.timeSlider.max = a.states.length - 1, this.totalTimeLbl.innerHTML = h.toMMSS(a.duration), this.gameInfoBoard.updateTeamNames(a.leftTeam.name,
            a.rightTeam.name), this.gameInfoBoard.update(this.model.logPlayer.getCurrentWorldState()), this.updateTeamColors();
        this.updateSliderBackground();
        this.updateJumpGoalButtons();
        this.currentTimeLbl.innerHTML = h.toMMSScs(this.model.logPlayer.playTime)
    };
    V.prototype.handlePlaylistChange = function (a) {
        h.setVisibility(this.playlistBtn, null !== this.model.logPlayer.playlist)
    };
    V.prototype.handlePlayerTimeChange = function (a) {
        this.timeSlider.value = this.model.logPlayer.playIndex;
        this.updateSliderBackground();
        this.updateJumpGoalButtons();
        this.currentTimeLbl.innerHTML = h.toMMSScs(this.model.logPlayer.playTime);
        this.gameInfoBoard.update(this.model.logPlayer.getCurrentWorldState())
    };
    V.prototype.handleGameLogUpdated = function (a) {
        a = this.model.logPlayer.gameLog;
        this.timeSlider.max = a.states.length - 1;
        this.updateSliderBackground();
        this.updateJumpGoalButtons();
        this.totalTimeLbl.innerHTML = h.toMMSS(a.duration);
        this.gameInfoBoard.updateTeamNames(a.leftTeam.name, a.rightTeam.name);
        this.updateTeamColors()
    };
    V.prototype.handleMonitorStateChange = function (a) {
        this.refreshControls();
        switch (a.oldState) {
            case "replay":
                this.model.logPlayer.removeEventListener("state-change", this.handlePlayerStateChangeListener), this.model.logPlayer.removeEventListener("game-log-updated", this.handleGameLogUpdatedListener), this.model.logPlayer.removeEventListener("time-change", this.handlePlayerTimeChangeListener), this.model.logPlayer.removeEventListener("game-log-change", this.handleGameLogChangeListener), this.model.logPlayer.removeEventListener("playlist-change", this.handlePlaylistChangeListener)
        }
        switch (a.newState) {
            case "replay":
                this.model.logPlayer.addEventListener("state-change",
                    this.handlePlayerStateChangeListener), this.model.logPlayer.addEventListener("game-log-updated", this.handleGameLogUpdatedListener), this.model.logPlayer.addEventListener("time-change", this.handlePlayerTimeChangeListener), this.model.logPlayer.addEventListener("game-log-change", this.handleGameLogChangeListener), this.model.logPlayer.addEventListener("playlist-change", this.handlePlaylistChangeListener)
        }
    };
    V.prototype.handlePlayerStateChange = function (a) {
        0 === a.oldState ? this.refreshControls() : this.refreshPlayBtn();
        3 === this.model.logPlayer.state ? h.setVisibility(this.waitingIndicator, !0) : h.setVisibility(this.waitingIndicator, !1)
    };
    var Xb = function (a, b) {
        this.head = a;
        this.content = b
    }, Pa = function (a) {
        a = I.call(this, "jsm-tab-pane" + (void 0 === a ? "" : " " + a)) || this;
        var b = h.createDiv("t-row");
        a.domElement.appendChild(b);
        var c = h.createDiv("tab-header");
        b.appendChild(c);
        a.tabHeaderList = h.createUL();
        c.appendChild(a.tabHeaderList);
        b = h.createDiv("t-row");
        a.domElement.appendChild(b);
        a.tabContent = h.createDiv("tab-content");
        b.appendChild(a.tabContent);
        a.tabs = [];
        a.tabGroup = new Oa;
        return a
    };
    $jscomp.inherits(Pa, I);
    Pa.prototype.add = function (a) {
        this.tabs.push(a);
        this.tabGroup.add(a.content);
        var b = h.createLI();
        b.onclick = function (c) {
            a.content.setVisible();
            c = b.parentNode.childNodes;
            for (var d = 0; d < c.length; ++d) "LI" === c[d].nodeName && (c[d].className = c[d].className.replace("active", ""));
            b.className += " active"
        };
        b.appendChild(a.head.domElement);
        this.tabHeaderList.appendChild(b);
        this.tabContent.appendChild(a.content.domElement);
        1 === this.tabs.length && (a.content.setVisible(),
            b.className = "active")
    };
    Pa.prototype.addPanels = function (a, b) {
        a = new Xb(a, b);
        this.add(a);
        return a
    };
    Pa.prototype.addElements = function (a, b) {
        var c = new I;
        c.appendChild(a);
        a = new I;
        a.appendChild(b);
        return this.addPanels(c, a)
    };
    var Y = function (a, b) {
        this.archiveURL = a;
        this.playlistSelectionCallback = this.gameLogSelectionCallback = void 0;
        this.loadFolderListener = this.loadFolder.bind(this);
        this.loadGameLogListener = this.loadGameLog.bind(this);
        this.loadPlaylistListener = this.loadPlaylist.bind(this);
        this.domElement = this.createFolderItem(b,
            "/", "archive-root")
    };
    Y.prototype.createFolderItem = function (a, b, c) {
        var d = "folder new";
        void 0 !== c && (d += " " + c);
        c = h.createLI(d);
        c.dataset.path = b;
        a = h.createSpan(a, "title no-text-select");
        a.tabIndex = 0;
        a.addEventListener("click", this.loadFolderListener, !1);
        a.addEventListener("keydown", this.loadFolderListener, !1);
        c.appendChild(a);
        "/" === b && (a.title = this.archiveURL, b = h.createButton("Del", "remove-btn", 'Remove "' + this.archiveURL + '" from list of archives.'), b.addEventListener("click", Y.removeArchive, !1), b.addEventListener("keydown",
            Y.removeArchive, !1), a.appendChild(b));
        return c
    };
    Y.prototype.createGameLogItem = function (a, b, c) {
        c = h.createLI("game-log " + c);
        c.dataset.path = b;
        b = h.createSpan(a, "title no-text-select");
        b.tabIndex = 0;
        b.title = a;
        b.addEventListener("click", this.loadGameLogListener, !1);
        b.addEventListener("keydown", this.loadGameLogListener, !1);
        c.appendChild(b);
        return c
    };
    Y.prototype.createPlaylistItem = function (a, b) {
        var c = h.createLI("playlist");
        c.dataset.path = b;
        b = h.createSpan(a, "title no-text-select");
        b.tabIndex = 0;
        b.title = a;
        b.addEventListener("click",
            this.loadPlaylistListener, !1);
        b.addEventListener("keydown", this.loadPlaylistListener, !1);
        c.appendChild(b);
        return c
    };
    Y.prototype.loadFolder = function (a) {
        if (h.isButtonAction(a)) {
            var b = a.target.parentNode, c = b.dataset.path, d = this, e = function () {
                return function (f) {
                    var k = "";
                    if (200 === f.target.status || 0 === f.target.status) {
                        var l = {};
                        try {
                            l = JSON.parse(f.target.response)
                        } catch (w) {
                            console.log(w)
                        }
                        if ("archive" === l.type) {
                            k = h.createUL("folder-listing");
                            var r = l.folders, p = l.replays;
                            f = l.sserverlogs;
                            l = l.playlists;
                            if (void 0 !==
                                r) for (var y = 0; y < r.length; ++y) k.appendChild(d.createFolderItem(r[y].label, r[y].path));
                            if (void 0 !== p) for (r = 0; r < p.length; ++r) k.appendChild(d.createGameLogItem(p[r].label, p[r].path, "replay"));
                            if (void 0 !== f) for (p = 0; p < f.length; ++p) k.appendChild(d.createGameLogItem(f[p].label, f[p].path, "sserver-log"));
                            if (void 0 !== l) for (f = 0; f < l.length; ++f) k.appendChild(d.createPlaylistItem(l[f].label, l[f].path));
                            0 < k.children.length ? (b.appendChild(k), k = "expanded", f = h.filterElements(b.childNodes, "SPAN")[0], f.addEventListener("click",
                                Y.toggleExpand, !1), f.addEventListener("keydown", Y.toggleExpand, !1)) : (k = "empty", h.filterElements(b.childNodes, "SPAN")[0].tabIndex = -1)
                        }
                    } else 404 === f.target.status ? (k = "not-found", h.filterElements(b.childNodes, "SPAN")[0].tabIndex = -1) : (console.log('Error ajax resonse for "' + b.dataset.path + '"!'), k = "error", f = h.filterElements(b.childNodes, "SPAN")[0], f.addEventListener("click", d.loadFolderListener, !1), f.addEventListener("keydown", d.loadFolderListener, !1));
                    b.className = b.className.replace("loading", k)
                }
            }(), g =
                function () {
                    return function (f) {
                        console.log('Error ajax resonse for "' + b.dataset.path + '"!');
                        b.className = b.className.replace("loading", "error");
                        f = h.filterElements(b.childNodes, "SPAN")[0];
                        f.addEventListener("click", d.loadFolderListener, !1);
                        f.addEventListener("keydown", d.loadFolderListener, !1)
                    }
                }(), m = new XMLHttpRequest;
            m.open("GET", this.archiveURL + "?path=" + encodeURIComponent(c), !0);
            m.addEventListener("load", e, !1);
            m.addEventListener("error", g, !1);
            m.overrideMimeType && m.overrideMimeType("text/plain");
            m.send(null);
            b.className = b.className.replace("new", "loading").replace("error", "loading");
            a.target.removeEventListener("click", this.loadFolderListener, !1);
            a.target.removeEventListener("keydown", this.loadFolderListener, !1)
        }
    };
    Y.prototype.loadGameLog = function (a) {
        if (h.isButtonAction(a) && this.gameLogSelectionCallback) {
            a = a.target.parentNode.dataset.path;
            var b = this.archiveURL.lastIndexOf("/");
            this.gameLogSelectionCallback(this.archiveURL.slice(0, b + 1) + a)
        }
    };
    Y.prototype.loadPlaylist = function (a) {
        if (h.isButtonAction(a) && this.playlistSelectionCallback) {
            a =
                a.target.parentNode.dataset.path;
            var b = this.archiveURL.lastIndexOf("/");
            this.playlistSelectionCallback(this.archiveURL.slice(0, b + 1) + a)
        }
    };
    Y.toggleExpand = function (a) {
        h.isButtonAction(a) && (a = a.target.parentNode, h.toggleVisibility(a.getElementsByTagName("ul")[0]) ? a.className = a.className.replace("expandable", "expanded") : a.className = a.className.replace("expanded", "expandable"))
    };
    Y.removeArchive = function (a) {
        h.isButtonAction(a) && (a = a.target.parentNode.parentNode, a.parentNode.removeChild(a))
    };
    var za = function (a) {
        var b =
            I.call(this, "jsm-archive-explorer") || this;
        b.logPlayer = a;
        b.archiveList = h.createUL("archive-list");
        b.domElement.appendChild(b.archiveList);
        b.addArchiveItem = h.createLI("add-archive expandable");
        b.archiveList.appendChild(b.addArchiveItem);
        a = h.createSpan("Add new Archive", "no-text-select");
        a.addEventListener("click", za.toggleExpand, !1);
        b.addArchiveItem.appendChild(a);
        b.addArchiveBox = h.createDiv("add-box");
        h.setVisibility(b.addArchiveBox, !1);
        b.addArchiveItem.appendChild(b.addArchiveBox);
        b.archiveLocationInput =
            h.createElement("input");
        b.archiveLocationInput.name = "location";
        b.archiveLocationInput.type = "url";
        b.archiveLocationInput.value = "https://";
        a = h.createElement("label");
        a.appendChild(h.createSpan("URL:"));
        a.appendChild(b.archiveLocationInput);
        b.addArchiveBox.appendChild(a);
        b.archiveNameInput = h.createElement("input");
        b.archiveNameInput.name = "name";
        b.archiveNameInput.type = "text";
        a = h.createElement("label");
        a.appendChild(h.createSpan("Name:"));
        a.appendChild(b.archiveNameInput);
        b.addArchiveBox.appendChild(a);
        b.onAddNewLocationListener = b.onAddNewLocation.bind(b);
        b.addArchiveBtn = h.createButton("Add", "add-archive", "Add new archive location to list of archives", b.onAddNewLocationListener);
        b.addArchiveBox.appendChild(b.addArchiveBtn);
        b.handleGameLogSelectedListener = b.handleGameLogSelected.bind(b);
        b.handlePlaylistSelectedListener = b.handlePlaylistSelected.bind(b);
        return b
    };
    $jscomp.inherits(za, I);
    za.prototype.onAddNewLocation = function (a) {
        a = this.archiveLocationInput.value;
        var b = this.archiveNameInput.value;
        a &&
        "https://" !== a && "http://" !== a && (b || (b = a), this.addLocation(a, b), this.archiveLocationInput.value = "https://", this.archiveNameInput.value = "", h.setVisibility(this.addArchiveBox, !1), this.addArchiveItem.className = this.addArchiveItem.className.replace(" expanded", ""))
    };
    za.prototype.addLocation = function (a, b) {
        a = new Y(a, b);
        a.gameLogSelectionCallback = this.handleGameLogSelectedListener;
        a.playlistSelectionCallback = this.handlePlaylistSelectedListener;
        this.archiveList.appendChild(a.domElement)
    };
    za.prototype.handleGameLogSelected =
        function (a) {
            this.logPlayer.loadGameLog(a)
        };
    za.prototype.handlePlaylistSelected = function (a) {
        this.logPlayer.loadPlaylist(a)
    };
    za.toggleExpand = function (a) {
        a = a.target.parentNode;
        h.toggleVisibility(a.getElementsByTagName("div")[0]) ? a.className = a.className.replace("expandable", "expanded") : a.className = a.className.replace("expanded", "expandable")
    };
    var wb = function (a) {
        var b = Pa.call(this, "jsm-explorer") || this;
        b.model = a;
        b.archiveExplorer = new za(b.model.logPlayer);
        var c = new I, d = h.createSpan("Archives");
        d.title =
            "Browse Replay Archives";
        c.appendChild(d);
        b.addPanels(c, b.archiveExplorer);
        b.fileInput = h.createElement("input");
        b.fileInput.type = "file";
        b.fileInput.accept = ".rpl3d, .rpl2d, .replay, .rcg, .json";
        b.fileInput.multiple = !0;
        b.fileInput.onchange = function () {
            return function (e) {
                (e = e.target.files) && 0 < e.length && a.loadFiles(e)
            }
        }();
        b.showFileChooserListener = b.showFileChooser.bind(b);
        b.openResourceItem = h.createLI("open-resource");
        b.openResourceItem.onclick = b.showFileChooserListener;
        d = h.createSpan("Open");
        d.title =
            "Open local resource...";
        b.openResourceItem.appendChild(d);
        b.openResourceItem.appendChild(b.fileInput);
        b.tabHeaderList.appendChild(b.openResourceItem);
        return b
    };
    $jscomp.inherits(wb, Pa);
    wb.prototype.showFileChooser = function () {
        this.fileInput.click()
    };
    var Gb = function (a) {
        var b = I.call(this, "jsm-welcome-pane full-size") || this;
        b.dndHandler = a;
        b.dndBox = h.createDiv("dnd-box");
        b.dndBox.innerHTML = "<span>Drag &amp; Drop Replays or SServer Logs to Play</span>";
        b.appendChild(b.dndBox);
        b.dndHandler.addListeners(b.dndBox);
        return b
    };
    $jscomp.inherits(Gb, I);
    var ea = function (a, b) {
        this.model = a;
        this.domElement = h.createDiv("jsm-root");
        b.appendChild(this.domElement);
        this.dndHandler = new xa;
        this.dndHandler.onNewFilesDropped = function () {
            return function (c) {
                a.loadFiles(c)
            }
        }();
        this.fullscreenManager = new Ba(this.domElement);
        this.explorerRoot = h.createDiv("explorer-root");
        this.domElement.appendChild(this.explorerRoot);
        this.rootDivider = h.createDiv("root-divider");
        this.domElement.appendChild(this.rootDivider);
        this.monitorRoot = h.createDiv("monitor-root");
        this.domElement.appendChild(this.monitorRoot);
        this.resourceExplorer = new wb(this.model);
        this.explorerRoot.appendChild(this.resourceExplorer.domElement);
        this.glPanel = new kb(this.monitorRoot);
        this.glPanel.onNewRenderCycle = this.handleNewRenderCycle.bind(this);
        this.glPanel.scene = this.model.world.scene;
        this.glPanel.glInfoBoard.setVisible(this.model.settings.monitorConfig.glInfoEnabled);
        this.glPanel.renderer.shadowMap.enabled = this.model.settings.monitorConfig.shadowsEnabled;
        this.glPanel.renderInterval = 30;
        this.inputController = new J(this.model, this.glPanel, this.fullscreenManager, this.dndHandler);
        this.monitorRoot.appendChild(this.inputController.domElement);
        this.loadingBar = new Na(this.model.logPlayer.gameLogLoader);
        this.monitorRoot.appendChild(this.loadingBar.domElement);
        this.welcomeOverlay = new Gb(this.dndHandler);
        this.monitorRoot.appendChild(this.welcomeOverlay.domElement);
        this.playerUI = new V(this.model, this.fullscreenManager);
        this.monitorRoot.appendChild(this.playerUI.domElement);
        this.handleRevealExplorerListener =
            this.showExplorer.bind(this);
        this.handleHideExplorerListener = this.hideExplorer.bind(this);
        this.handleAutoSizeExplorerListener = this.autoSizeExplorer.bind(this);
        this.revealExplorerBtn = h.createPlayerButton("&nbsp;&nbsp;&gt;", "reveal-explorer-btn", "Show Resource Explorer", this.handleRevealExplorerListener, !0);
        this.domElement.appendChild(this.revealExplorerBtn);
        h.setVisibility(this.revealExplorerBtn, !1);
        this.hideExplorerBtn = h.createPlayerButton("&lt;&nbsp;&nbsp;", "hide-explorer-btn", "Hide Resource Explorer",
            this.handleHideExplorerListener, !0);
        this.rootDivider.appendChild(this.hideExplorerBtn);
        this.handleMonitorStateChangeListener = this.handleMonitorStateChange.bind(this);
        this.handleEWResizeStartListener = this.handleEWResizeStart.bind(this);
        this.handleEWResizeEndListener = this.handleEWResizeEnd.bind(this);
        this.handleEWResizeListener = this.handleEWResize.bind(this);
        this.handleMonitorConfigChangeListener = this.handleMonitorConfigChange.bind(this);
        this.handleWorldChangeListener = this.handleWorldChange.bind(this);
        this.model.addEventListener("state-change", this.handleMonitorStateChangeListener);
        this.rootDivider.addEventListener("mousedown", this.handleEWResizeStartListener, !1);
        this.rootDivider.addEventListener("dblclick", this.handleAutoSizeExplorerListener, !1);
        this.model.settings.monitorConfig.addEventListener("change", this.handleMonitorConfigChangeListener);
        this.model.world.addEventListener("change", this.handleWorldChangeListener);
        this.handleResizeListener = this.handleResize.bind(this);
        window.addEventListener("resize",
            this.handleResizeListener);
        window.addEventListener("beforeunload", function () {
            return function (c) {
                a.settings.save()
            }
        }());
        this.model.embedded && (this.hideExplorer(), this.welcomeOverlay.setVisible(!1))
    };
    ea.prototype.handleWorldChange = function (a) {
        this.inputController.camCon.setAreaOfInterest(this.model.world.field.fieldDimensions);
        this.inputController.camCon.setPredefinedPose();
        this.inputController.domElement.focus()
    };
    ea.prototype.handleNewRenderCycle = function (a) {
        "replay" === this.model.state && this.model.logPlayer.update(a)
    };
    ea.prototype.handleEWResizeStart = function (a) {
        a.preventDefault();
        a.stopPropagation();
        this.domElement.style.cursor = "ew-resize";
        this.domElement.addEventListener("mousemove", this.handleEWResizeListener, !1);
        this.domElement.addEventListener("mouseup", this.handleEWResizeEndListener, !1)
    };
    ea.prototype.handleEWResizeEnd = function (a) {
        this.domElement.style.cursor = "";
        this.domElement.removeEventListener("mousemove", this.handleEWResizeListener, !1);
        this.domElement.removeEventListener("mouseup", this.handleEWResizeEndListener,
            !1);
        5 > 100 * (a.clientX + 2) / this.domElement.offsetWidth && this.hideExplorer()
    };
    ea.prototype.handleEWResize = function (a) {
        a.preventDefault();
        a.stopPropagation();
        a = 100 * (a.clientX + 2) / this.domElement.offsetWidth;
        50 < a && (a = 50);
        5 > a ? (this.explorerRoot.style.width = "0px", this.monitorRoot.style.width = "calc(100% - 3px)") : (this.explorerRoot.style.width = "calc(" + a + "% - 3px)", this.monitorRoot.style.width = "" + (100 - a) + "%");
        this.glPanel.autoResize()
    };
    ea.prototype.handleResize = function (a) {
        this.glPanel.autoResize()
    };
    ea.prototype.autoSizeExplorer =
        function () {
            if (this.explorerRoot.scrollWidth !== this.explorerRoot.offsetWidth) {
                h.setVisibility(this.explorerRoot, !0);
                h.setVisibility(this.rootDivider, !0);
                var a = 100 * (this.explorerRoot.scrollWidth + 3) / this.domElement.offsetWidth;
                50 < a && (a = 50);
                this.explorerRoot.style.width = "calc(" + a + "% - 3px)";
                this.monitorRoot.style.width = "" + (100 - a) + "%";
                this.glPanel.autoResize();
                h.setVisibility(this.revealExplorerBtn, !1)
            }
        };
    ea.prototype.showExplorer = function () {
        this.model.embedded || (h.setVisibility(this.explorerRoot, !0), h.setVisibility(this.rootDivider,
            !0), this.explorerRoot.style.width = "calc(25% - 3px)", this.explorerRoot.scrollLeft = 0, this.monitorRoot.style.width = "75%", this.glPanel.autoResize(), h.setVisibility(this.revealExplorerBtn, !1))
    };
    ea.prototype.hideExplorer = function () {
        h.setVisibility(this.explorerRoot, !1);
        h.setVisibility(this.rootDivider, !1);
        this.monitorRoot.style.width = "100%";
        this.glPanel.autoResize();
        h.setVisibility(this.revealExplorerBtn, !this.model.embedded)
    };
    ea.prototype.handleMonitorConfigChange = function (a) {
        var b = this.model.settings.monitorConfig;
        switch (a.property) {
            case "shadowsEnabled":
                this.model.world.setShadowsEnabled(b.shadowsEnabled);
                this.glPanel.renderer.shadowMap.enabled = b.shadowsEnabled;
                break;
            case "teamColorsEnabled":
            case "teamColorLeft":
            case "teamColorRight":
                this.playerUI.updateTeamColors();
                break;
            case "glInfoEnabled":
                this.glPanel.glInfoBoard.setVisible(b.glInfoEnabled)
        }
    };
    ea.prototype.handleMonitorStateChange = function (a) {
        "init" !== a.newState ? (this.welcomeOverlay.setVisible(!1), this.glPanel.renderInterval = 1, this.glPanel.renderTTL = 1) :
            this.glPanel.renderInterval = 30
    };
    var fa = function (a, b) {
        var c = document.body;
        a && (c = a, c.innerHTML = "");
        a = new ra(b);
        this.model = new qa(a.isEmbedded());
        this.ui = new ea(this.model, c);
        try {
            this.applyParams(a)
        } catch (d) {
            console.log("Error while applying monitor parameters!")
        }
    };
    fa.prototype.applyParams = function (a) {
        for (var b = a.getArchives(), c = 0; c < b.length; c++) b[c].url && b[c].name && this.ui.resourceExplorer.archiveExplorer.addLocation(b[c].url, b[c].name);
        if (b = a.getGameLogURL()) this.loadGameLog(b), this.ui.hideExplorer();
        else if (b = a.getPlaylistURL()) this.loadPlaylist(b), this.ui.hideExplorer()
    };
    fa.prototype.loadFiles = function (a) {
        this.model.loadFiles(a)
    };
    fa.prototype.loadGameLog = function (a) {
        this.model.loadGameLog(a)
    };
    fa.prototype.loadPlaylist = function (a) {
        this.model.loadPlaylist(a)
    };
    fa.prototype.connectStream = function (a) {
        this.model.connectStream(a)
    };
    fa.prototype.connectSimulator = function (a) {
        this.model.connectSimulator(a)
    };
    fa.prototype.playPause = function () {
        this.model.logPlayer.playPause()
    };
    fa.prototype.stop = function () {
    };
    fa.prototype.step = function (a) {
        this.model.logPlayer.step(a)
    };
    fa.prototype.jump = function (a) {
        this.model.logPlayer.jump(a)
    };
    fa.prototype.jumpGoal = function (a) {
        this.model.logPlayer.jumpGoal(a)
    };
    n.CharCodes = S;
    n.KeyCodes = D;
    n.Monitor = fa;
    n.MonitorParameters = ra;
    n.REVISION = "0.3";
    Object.defineProperty(n, "__esModule", {value: !0})
})
