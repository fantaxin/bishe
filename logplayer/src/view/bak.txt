<template>
  <div>
    123
  </div>
</template>
<script>
import * as THREE from "three";
//import { reactive } from 'vue';
import { toRaw } from 'vue';
//const scenel = reactive({ count: 0 })
import { Player } from "../js/player.js";
import { OrbitControls } from 'three/addons/controls/OrbitControls.js';
import { TeamDescription } from "@/js/game/description/TeamDescription.js";
import { EntityName, TeamSide } from "@/js/util/Constants.js";
import { MeshFactory } from "@/js/model/loader/MeshFactory";

let controls;
let geometry;
let n = 0.1;
export default {
  name: "ThreeTest",
  data() {
    return {
      // 三维场景
      scene: null,
      // 相机
      camera: null,
      // 渲染器
      renderer: null,
      // 灯光
      light: null,
      //
      cube: null,

      cube2: null,

    };
  },
  created() {
    this.init();
  },
  mounted() {
    this.load();
    this.test();
  },
  methods: {
    test() {
      let map1 = new Map();
      map1.set(1.1, "string1");
      map1.set(2.1, "string2");
      map1.set(3.1, "string3");
      map1.forEach(element => {
        console.log(element);
      });

      let world = EntityName.World;
      console.log(world);

      let agent = EntityName.Agent(TeamSide.LEFT, "10");
      console.log(agent);

      let teamDescription = new TeamDescription("team1", "team2", "team3");
      console.log(teamDescription.color);
    },
    init() {
      this.scene = new THREE.Scene();

      //scenel =this.scene;
      //this.camera = new THREE.OrthographicCamera(-window.innerWidth, window.innerWidth, window.innerHeight, -window.innerHeight, 0.1, 5000)
      this.camera = new THREE.PerspectiveCamera(45, window.innerWidth / window.innerHeight, 0.1, 5000);

      this.camera.position.set(0, 50, 70);
      this.camera.lookAt(new THREE.Vector3(0, 0, -30));
      //this.camera.updateMatrix();
      this.renderer = new THREE.WebGLRenderer({ antialias: true, alpha: true });
      this.renderer.setSize(window.innerWidth, window.innerHeight);
      this.renderer.setPixelRatio(window.devicePixelRatio);
      this.renderer.gammaOutput = true;
      this.renderer.gammaFactor = 2.2;
      this.renderer.autoClear = false;
      this.renderer.shadowMap.enabled = true;
      this.renderer.shadowMap.type = THREE.PCFSoftShadowMap;
      this.renderer.shadowMapSoft = true;
      this.renderer.shadowMapAutoUpdate = true;
      this.renderer.sortObjects = false;
      this.renderer.localClippingEnabled = true;
      this.renderer.physicallyCorrectLights = true;
      this.renderer.setClearColor(new THREE.Color(0x000000), 0);
      //this.renderer.toneMapping = THREE.ACESFilmicToneMapping;
      //this.renderer.toneMappingExposure = 1.25;
      //this.renderer.toneMappingWhitePoint = 1.0;

      document.body.appendChild(this.renderer.domElement);
      //this.$refs.container.appendChild(this.renderer.domElement);

      const x = new THREE.MeshBasicMaterial({ color: "rgb(255, 0, 0)" });
      const y = new THREE.MeshBasicMaterial({ color: "rgb(0, 255, 0)" });
      const z = new THREE.MeshBasicMaterial({ color: "rgb(0, 0, 255)" });
      geometry = new THREE.BoxGeometry(1, 1, 1);
      const material = new THREE.MeshBasicMaterial({ color: 0x00ff00 });
      this.cube = new THREE.Mesh(geometry, material);
      this.cube2 = new THREE.Mesh(geometry, material);
      this.cube.position.set(10, 0, 0);
      this.cube2.position.set(0, 0, 10);
      //this.cube.rotation.x = 1;
      //this.cube2.rotation.x = 1;
      //cube = this.cube;
      //cube = new THREE.Mesh(geometry, material);
      this.scene.add(this.cube);
      this.scene.add(this.cube2);

      let a = new Float32Array([0, 0, 0, 10, 0, 0]);
      let b = new Float32Array([0, 0, 0, 0, 10, 0]);
      let c = new Float32Array([0, 0, 0, 0, 0, 10]);
      var line1 = new THREE.BufferGeometry();
      line1.setAttribute("position", new THREE.BufferAttribute(a, 3));
      var line2 = new THREE.BufferGeometry();
      line2.setAttribute("position", new THREE.BufferAttribute(b, 3));
      var line3 = new THREE.BufferGeometry();
      line3.setAttribute("position", new THREE.BufferAttribute(c, 3));
      var linea = new THREE.Line(line1, x);
      var lineb = new THREE.Line(line2, y);
      var linec = new THREE.Line(line3, z);
      this.scene.add(linea);
      this.scene.add(lineb);
      this.scene.add(linec);

      this.scene.add(MeshFactory.createSkyBox(512, 512, 512));
      this.scene.add(MeshFactory.createAmbientLight("light", new THREE.Color("#FFFFFF"), 1.5));
      let directionalLight = new THREE.DirectionalLight("#FFFFFF");

      // 平行光配置
      directionalLight.position.set(-40, 60, -10);
      directionalLight.castShadow = true;
      directionalLight.shadow.camera.near = 2;
      directionalLight.shadow.camera.far = 200;
      directionalLight.shadow.camera.left = -50;
      directionalLight.shadow.camera.right = 50;
      directionalLight.shadow.camera.top = 50;
      directionalLight.shadow.camera.bottom = -50;

      // 距离和强度
      directionalLight.distance = 1;
      directionalLight.intensity = 1.5;

      // 设置阴影的分辨率
      directionalLight.shadow.mapSize.width = 1024;
      directionalLight.shadow.mapSize.height = 1024;
      this.scene.add(directionalLight);
      this.scene.add(MeshFactory.createField());
      this.scene.add(MeshFactory.createBorder());
      //this.scene.add(MeshFactory.createFieldLines());
      this.scene.add(MeshFactory.createFieldLine());
      this.scene.add(MeshFactory.createGoal());
      this.scene.add(MeshFactory.createAgents());

      controls = new OrbitControls(this.camera, this.renderer.domElement);

      controls.enableRotate = true; //启用旋转
      controls.enablePan = true; //启用平移
      controls.enableZoom = true;//启用缩放
      controls.autoRotate = false;//是否自动旋转 
      controls.update();

      this.scene.background = new THREE.Color("skyblue")

    },
    load() {

      this.animate();
    },
    animate() {
      requestAnimationFrame(this.animate);
      let scene = toRaw(this.scene);
      controls.update();
      let cube = toRaw(this.cube);
      let cube2 = toRaw(this.cube2);
      //cube.rotation.y += 0.01;
      cube2.rotation.y += 0.1;
      cube.rotateY(0.1);
      //cube2.rotateY(+0.1);
      //cube.position.x += 0.1;
      //cube2.position.z += 0.1;
      //cube.translateX(+0.1);
      //cube2.translateZ(+0.1);
      geometry.position;
      this.renderer.render(scene, this.camera);
    }
  }
};

</script>
<style>
.wrap {
  position: fixed;
  top: 0;
  bottom: 0;
  left: 0;
  right: 0;
  z-index: 100;
}

#container {
  height: 100%;
}

.label {
  margin-top: -20px;
  color: #fff;
  font-size: 12px;
  border: 1px solid #dbeca4;
  padding: 3px 5px;
  background: rgba(0, 0, 0, 0.6);
  min-width: 80px;
}

.pressure {
  width: 115px;
}

.text_Num {
  color: red;
  margin-right: 5px;
}
</style>
